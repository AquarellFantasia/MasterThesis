Loaded dependency [python3/3.10.7]: gcc/11.3.0-binutils-2.38
Loaded module: python3/3.10.7

Loading python3/3.10.7
  Loading requirement: gcc/11.3.0-binutils-2.38
Loaded module: cuda/11.6
Loaded module: cudnn/v8.3.2.44-prod-cuda-11.X
2023-01-19 07:04:41.369402: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2023-01-19 07:04:48.038307: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer.so.7'; dlerror: libnvinfer.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /appl/cudnn/v8.3.2.44-prod-cuda-11.5/lib:/appl/cuda/11.6.0/lib64:/appl/python/3.10.7/lib:/appl/gcc/11.3.0-binutils-2.38/lib64:/appl/gcc/11.3.0-binutils-2.38/lib:/lsf/10.1/linux3.10-glibc2.17-x86_64/lib
2023-01-19 07:04:48.039003: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer_plugin.so.7'; dlerror: libnvinfer_plugin.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /appl/cudnn/v8.3.2.44-prod-cuda-11.5/lib:/appl/cuda/11.6.0/lib64:/appl/python/3.10.7/lib:/appl/gcc/11.3.0-binutils-2.38/lib64:/appl/gcc/11.3.0-binutils-2.38/lib:/lsf/10.1/linux3.10-glibc2.17-x86_64/lib
2023-01-19 07:04:48.039016: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Cannot dlopen some TensorRT libraries. If you would like to use Nvidia GPU with TensorRT, please make sure the missing libraries mentioned above are installed properly.
2023-01-19 07:04:55.920742: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2023-01-19 07:05:01.109704: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1613] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 30961 MB memory:  -> device: 0, name: Tesla V100-SXM2-32GB, pci bus id: 0000:16:00.0, compute capability: 7.0
Epochs:  100
Optimizer:  Adam(learning_rate=0.005, amsgrad=True)
Metrics:  ["accuracy", tf.keras.metrics.MeanSquaredError(name="mean_squared_error", dtype=None)]
Loss function name:  square_abs_min_individual_loss
Csv file used:  black_background_500x500.csv
Verbose:  2
Unique name:  Adam_square_abs_min_individual_loss_0005_amsgrad_true
Output folder:  iter3
 ################ MODEL ############### 
 
inputs = keras.Input(shape=(input_size, input_size, 1))
x = layers.Conv2D(filters=32, kernel_size=3, activation="relu")(inputs)
x = layers.Conv2D(filters=32, kernel_size=3, activation="relu")(x)
x = layers.MaxPooling2D(pool_size=4)(x)
x = layers.Conv2D(filters=32, kernel_size=3, activation="relu")(x)
x = layers.Conv2D(filters=32, kernel_size=3, activation="relu")(x)
x = layers.MaxPooling2D(pool_size=4)(x)
x = layers.Conv2D(filters=32, kernel_size=3, activation="relu")(x)
x = layers.Conv2D(filters=32, kernel_size=3, activation="relu")(x)
x = layers.MaxPooling2D(pool_size=4)(x)
x = layers.Flatten()(x)
x = layers.Dense(128, activation="relu")(x)
x = layers.Dense(16, activation="relu")(x)
outputs = layers.Dense(3)(x)


Model: "model"
_________________________________________________________________
 Layer (type)                Output Shape              Param #   
=================================================================
 input_1 (InputLayer)        [(None, 500, 500, 1)]     0         
                                                                 
 conv2d (Conv2D)             (None, 498, 498, 32)      320       
                                                                 
 conv2d_1 (Conv2D)           (None, 496, 496, 32)      9248      
                                                                 
 max_pooling2d (MaxPooling2D  (None, 124, 124, 32)     0         
 )                                                               
                                                                 
 conv2d_2 (Conv2D)           (None, 122, 122, 32)      9248      
                                                                 
 conv2d_3 (Conv2D)           (None, 120, 120, 32)      9248      
                                                                 
 max_pooling2d_1 (MaxPooling  (None, 30, 30, 32)       0         
 2D)                                                             
                                                                 
 conv2d_4 (Conv2D)           (None, 28, 28, 32)        9248      
                                                                 
 conv2d_5 (Conv2D)           (None, 26, 26, 32)        9248      
                                                                 
 max_pooling2d_2 (MaxPooling  (None, 6, 6, 32)         0         
 2D)                                                             
                                                                 
 flatten (Flatten)           (None, 1152)              0         
                                                                 
 dense (Dense)               (None, 128)               147584    
                                                                 
 dense_1 (Dense)             (None, 16)                2064      
                                                                 
 dense_2 (Dense)             (None, 3)                 51        
                                                                 
=================================================================
Total params: 196,259
Trainable params: 196,259
Non-trainable params: 0
_________________________________________________________________
/zhome/ab/7/153983/project/venv/lib/python3.10/site-packages/keras/utils/image_utils.py:409: UserWarning: grayscale is deprecated. Please use color_mode = "grayscale"
  warnings.warn(
Epoch 1/100
2023-01-19 07:05:04.462450: I tensorflow/compiler/xla/stream_executor/cuda/cuda_dnn.cc:428] Loaded cuDNN version 8302
273/273 - 79s - loss: 0.0778 - accuracy: 0.3127 - mean_squared_error: 0.3475 - val_loss: 0.0882 - val_accuracy: 0.2923 - val_mean_squared_error: 0.3355 - 79s/epoch - 290ms/step
Epoch 2/100
273/273 - 73s - loss: 0.0824 - accuracy: 0.3592 - mean_squared_error: 0.3840 - val_loss: 0.0739 - val_accuracy: 0.3468 - val_mean_squared_error: 0.3510 - 73s/epoch - 267ms/step
Epoch 3/100
273/273 - 73s - loss: 0.0764 - accuracy: 0.2816 - mean_squared_error: 0.3302 - val_loss: 0.0953 - val_accuracy: 0.3649 - val_mean_squared_error: 0.2917 - 73s/epoch - 269ms/step
Epoch 4/100
273/273 - 73s - loss: 0.0808 - accuracy: 0.3127 - mean_squared_error: 0.3050 - val_loss: 0.0890 - val_accuracy: 0.4627 - val_mean_squared_error: 0.2705 - 73s/epoch - 268ms/step
Epoch 5/100
273/273 - 73s - loss: 0.0794 - accuracy: 0.2761 - mean_squared_error: 0.4107 - val_loss: 0.0891 - val_accuracy: 0.3901 - val_mean_squared_error: 0.5886 - 73s/epoch - 268ms/step
Epoch 6/100
273/273 - 73s - loss: 0.0768 - accuracy: 0.3011 - mean_squared_error: 0.4369 - val_loss: 0.0861 - val_accuracy: 0.2611 - val_mean_squared_error: 0.4198 - 73s/epoch - 268ms/step
Epoch 7/100
273/273 - 73s - loss: 0.0787 - accuracy: 0.3363 - mean_squared_error: 0.4281 - val_loss: 0.0885 - val_accuracy: 0.3206 - val_mean_squared_error: 0.3869 - 73s/epoch - 268ms/step
Epoch 8/100
273/273 - 71s - loss: 0.0782 - accuracy: 0.3199 - mean_squared_error: 0.4513 - val_loss: 0.0825 - val_accuracy: 0.3448 - val_mean_squared_error: 0.4599 - 71s/epoch - 261ms/step
Epoch 9/100
273/273 - 71s - loss: 0.0764 - accuracy: 0.2610 - mean_squared_error: 0.4593 - val_loss: 0.0880 - val_accuracy: 0.3317 - val_mean_squared_error: 0.4309 - 71s/epoch - 260ms/step
Epoch 10/100
273/273 - 71s - loss: 0.0764 - accuracy: 0.3433 - mean_squared_error: 0.4734 - val_loss: 0.0877 - val_accuracy: 0.2591 - val_mean_squared_error: 0.4226 - 71s/epoch - 262ms/step
Epoch 11/100
273/273 - 72s - loss: 0.0761 - accuracy: 0.3520 - mean_squared_error: 0.4455 - val_loss: 0.0867 - val_accuracy: 0.3901 - val_mean_squared_error: 0.4311 - 72s/epoch - 265ms/step
Epoch 12/100
273/273 - 72s - loss: 0.0782 - accuracy: 0.3640 - mean_squared_error: 0.4737 - val_loss: 0.0784 - val_accuracy: 0.4113 - val_mean_squared_error: 0.4958 - 72s/epoch - 263ms/step
Epoch 13/100
273/273 - 72s - loss: 0.0795 - accuracy: 0.3393 - mean_squared_error: 0.6044 - val_loss: 0.0759 - val_accuracy: 0.4677 - val_mean_squared_error: 0.7163 - 72s/epoch - 264ms/step
Epoch 14/100
273/273 - 72s - loss: 0.0801 - accuracy: 0.2998 - mean_squared_error: 0.7474 - val_loss: 0.0809 - val_accuracy: 0.4032 - val_mean_squared_error: 0.7541 - 72s/epoch - 263ms/step
Epoch 15/100
273/273 - 71s - loss: 0.0827 - accuracy: 0.3709 - mean_squared_error: 0.8170 - val_loss: 0.0792 - val_accuracy: 0.3155 - val_mean_squared_error: 0.8655 - 71s/epoch - 259ms/step
Epoch 16/100
273/273 - 69s - loss: 0.0830 - accuracy: 0.3787 - mean_squared_error: 0.8995 - val_loss: 0.0959 - val_accuracy: 0.2792 - val_mean_squared_error: 1.0062 - 69s/epoch - 254ms/step
Epoch 17/100
273/273 - 71s - loss: 0.0826 - accuracy: 0.3804 - mean_squared_error: 0.8931 - val_loss: 0.0867 - val_accuracy: 0.4345 - val_mean_squared_error: 0.8190 - 71s/epoch - 261ms/step
Epoch 18/100
273/273 - 72s - loss: 0.0791 - accuracy: 0.3455 - mean_squared_error: 0.8826 - val_loss: 0.0811 - val_accuracy: 0.4042 - val_mean_squared_error: 0.8904 - 72s/epoch - 263ms/step
Epoch 19/100
273/273 - 71s - loss: 0.0799 - accuracy: 0.3375 - mean_squared_error: 0.9676 - val_loss: 0.0783 - val_accuracy: 0.3397 - val_mean_squared_error: 0.9957 - 71s/epoch - 260ms/step
Epoch 20/100
273/273 - 71s - loss: 0.0803 - accuracy: 0.3755 - mean_squared_error: 0.9349 - val_loss: 0.0892 - val_accuracy: 0.3004 - val_mean_squared_error: 0.8514 - 71s/epoch - 260ms/step
Epoch 21/100
273/273 - 71s - loss: 0.0792 - accuracy: 0.3760 - mean_squared_error: 0.9048 - val_loss: 0.0902 - val_accuracy: 0.3901 - val_mean_squared_error: 0.8130 - 71s/epoch - 260ms/step
Epoch 22/100
273/273 - 71s - loss: 0.0795 - accuracy: 0.3377 - mean_squared_error: 0.8474 - val_loss: 0.0900 - val_accuracy: 0.3175 - val_mean_squared_error: 0.7818 - 71s/epoch - 260ms/step
Epoch 23/100
273/273 - 71s - loss: 0.0836 - accuracy: 0.3363 - mean_squared_error: 0.7484 - val_loss: 0.0776 - val_accuracy: 0.3488 - val_mean_squared_error: 0.6757 - 71s/epoch - 259ms/step
Epoch 24/100
273/273 - 70s - loss: 0.0780 - accuracy: 0.3136 - mean_squared_error: 0.4884 - val_loss: 0.0784 - val_accuracy: 0.2873 - val_mean_squared_error: 0.4143 - 70s/epoch - 258ms/step
Epoch 25/100
273/273 - 71s - loss: 0.0819 - accuracy: 0.3291 - mean_squared_error: 0.3200 - val_loss: 0.0851 - val_accuracy: 0.4637 - val_mean_squared_error: 0.2307 - 71s/epoch - 259ms/step
Epoch 26/100
273/273 - 71s - loss: 0.0759 - accuracy: 0.3126 - mean_squared_error: 0.4024 - val_loss: 0.0761 - val_accuracy: 0.4224 - val_mean_squared_error: 0.4334 - 71s/epoch - 260ms/step
Epoch 27/100
273/273 - 71s - loss: 0.0798 - accuracy: 0.3386 - mean_squared_error: 0.3598 - val_loss: 0.0917 - val_accuracy: 0.4103 - val_mean_squared_error: 0.3508 - 71s/epoch - 260ms/step
Epoch 28/100
273/273 - 71s - loss: 0.0778 - accuracy: 0.3187 - mean_squared_error: 0.3923 - val_loss: 0.0881 - val_accuracy: 0.3800 - val_mean_squared_error: 0.4068 - 71s/epoch - 259ms/step
Epoch 29/100
273/273 - 68s - loss: 0.0814 - accuracy: 0.2863 - mean_squared_error: 0.5113 - val_loss: 0.0950 - val_accuracy: 0.3397 - val_mean_squared_error: 0.4863 - 68s/epoch - 250ms/step
Epoch 30/100
273/273 - 69s - loss: 0.0782 - accuracy: 0.3084 - mean_squared_error: 0.5422 - val_loss: 0.0816 - val_accuracy: 0.3115 - val_mean_squared_error: 0.5098 - 69s/epoch - 254ms/step
Epoch 31/100
273/273 - 69s - loss: 0.0840 - accuracy: 0.3399 - mean_squared_error: 0.5234 - val_loss: 0.0659 - val_accuracy: 0.3337 - val_mean_squared_error: 0.5819 - 69s/epoch - 254ms/step
Epoch 32/100
273/273 - 69s - loss: 0.0800 - accuracy: 0.2910 - mean_squared_error: 0.4958 - val_loss: 0.0766 - val_accuracy: 0.4214 - val_mean_squared_error: 0.4893 - 69s/epoch - 252ms/step
Epoch 33/100
273/273 - 70s - loss: 0.0823 - accuracy: 0.3692 - mean_squared_error: 0.5593 - val_loss: 0.0811 - val_accuracy: 0.5060 - val_mean_squared_error: 0.5817 - 70s/epoch - 257ms/step
Epoch 34/100
273/273 - 70s - loss: 0.0820 - accuracy: 0.3301 - mean_squared_error: 0.5038 - val_loss: 0.0860 - val_accuracy: 0.1915 - val_mean_squared_error: 0.5484 - 70s/epoch - 257ms/step
Epoch 35/100
273/273 - 70s - loss: 0.0819 - accuracy: 0.3091 - mean_squared_error: 0.5668 - val_loss: 0.0812 - val_accuracy: 0.3296 - val_mean_squared_error: 0.6407 - 70s/epoch - 258ms/step
Epoch 36/100
273/273 - 69s - loss: 0.0783 - accuracy: 0.3421 - mean_squared_error: 0.6059 - val_loss: 0.0782 - val_accuracy: 0.3246 - val_mean_squared_error: 0.5736 - 69s/epoch - 254ms/step
Epoch 37/100
273/273 - 70s - loss: 0.0820 - accuracy: 0.3336 - mean_squared_error: 0.7174 - val_loss: 0.0860 - val_accuracy: 0.3700 - val_mean_squared_error: 0.6702 - 70s/epoch - 257ms/step
Epoch 38/100
273/273 - 69s - loss: 0.0835 - accuracy: 0.3480 - mean_squared_error: 0.6763 - val_loss: 0.0922 - val_accuracy: 0.3377 - val_mean_squared_error: 0.6452 - 69s/epoch - 253ms/step
Epoch 39/100
273/273 - 71s - loss: 0.0820 - accuracy: 0.3322 - mean_squared_error: 0.6929 - val_loss: 0.0781 - val_accuracy: 0.2440 - val_mean_squared_error: 0.7273 - 71s/epoch - 259ms/step
Epoch 40/100
273/273 - 69s - loss: 0.0794 - accuracy: 0.3281 - mean_squared_error: 0.5826 - val_loss: 0.0708 - val_accuracy: 0.3175 - val_mean_squared_error: 0.4827 - 69s/epoch - 251ms/step
Epoch 41/100
273/273 - 69s - loss: 0.0809 - accuracy: 0.3178 - mean_squared_error: 0.4154 - val_loss: 0.0855 - val_accuracy: 0.3448 - val_mean_squared_error: 0.3166 - 69s/epoch - 255ms/step
Epoch 42/100
273/273 - 69s - loss: 0.0821 - accuracy: 0.3180 - mean_squared_error: 0.4173 - val_loss: 0.0834 - val_accuracy: 0.3891 - val_mean_squared_error: 0.4024 - 69s/epoch - 255ms/step
Epoch 43/100
273/273 - 66s - loss: 0.0794 - accuracy: 0.3526 - mean_squared_error: 0.4549 - val_loss: 0.0983 - val_accuracy: 0.4476 - val_mean_squared_error: 0.4663 - 66s/epoch - 241ms/step
Epoch 44/100
273/273 - 70s - loss: 0.0794 - accuracy: 0.3278 - mean_squared_error: 0.3803 - val_loss: 0.0878 - val_accuracy: 0.3831 - val_mean_squared_error: 0.3495 - 70s/epoch - 255ms/step
Epoch 45/100
273/273 - 69s - loss: 0.0808 - accuracy: 0.3307 - mean_squared_error: 0.3401 - val_loss: 0.0825 - val_accuracy: 0.2188 - val_mean_squared_error: 0.3438 - 69s/epoch - 254ms/step
Epoch 46/100
273/273 - 69s - loss: 0.0808 - accuracy: 0.3251 - mean_squared_error: 0.2577 - val_loss: 0.0864 - val_accuracy: 0.3417 - val_mean_squared_error: 0.2398 - 69s/epoch - 254ms/step
Epoch 47/100
273/273 - 70s - loss: 0.0745 - accuracy: 0.3310 - mean_squared_error: 0.2449 - val_loss: 0.0886 - val_accuracy: 0.3488 - val_mean_squared_error: 0.2231 - 70s/epoch - 257ms/step
Epoch 48/100
273/273 - 68s - loss: 0.0811 - accuracy: 0.3140 - mean_squared_error: 0.2571 - val_loss: 0.0931 - val_accuracy: 0.4022 - val_mean_squared_error: 0.2509 - 68s/epoch - 250ms/step
Epoch 49/100
273/273 - 67s - loss: 0.0869 - accuracy: 0.4133 - mean_squared_error: 0.2398 - val_loss: 0.0726 - val_accuracy: 0.2833 - val_mean_squared_error: 0.2376 - 67s/epoch - 245ms/step
Epoch 50/100
273/273 - 69s - loss: 0.0855 - accuracy: 0.3346 - mean_squared_error: 0.2443 - val_loss: 0.0966 - val_accuracy: 0.3044 - val_mean_squared_error: 0.2279 - 69s/epoch - 253ms/step
Epoch 51/100
273/273 - 68s - loss: 0.0769 - accuracy: 0.2742 - mean_squared_error: 0.3454 - val_loss: 0.0814 - val_accuracy: 0.3216 - val_mean_squared_error: 0.3157 - 68s/epoch - 250ms/step
Epoch 52/100
273/273 - 69s - loss: 0.0795 - accuracy: 0.3280 - mean_squared_error: 0.3366 - val_loss: 0.0792 - val_accuracy: 0.2792 - val_mean_squared_error: 0.3740 - 69s/epoch - 254ms/step
Epoch 53/100
273/273 - 70s - loss: 0.0820 - accuracy: 0.3333 - mean_squared_error: 0.3248 - val_loss: 0.0883 - val_accuracy: 0.3185 - val_mean_squared_error: 0.3069 - 70s/epoch - 255ms/step
Epoch 54/100
273/273 - 68s - loss: 0.0830 - accuracy: 0.3494 - mean_squared_error: 0.3249 - val_loss: 0.0851 - val_accuracy: 0.3024 - val_mean_squared_error: 0.3484 - 68s/epoch - 251ms/step
Epoch 55/100
273/273 - 70s - loss: 0.0808 - accuracy: 0.3479 - mean_squared_error: 0.3951 - val_loss: 0.0910 - val_accuracy: 0.4244 - val_mean_squared_error: 0.2921 - 70s/epoch - 256ms/step
Epoch 56/100
273/273 - 69s - loss: 0.0815 - accuracy: 0.3718 - mean_squared_error: 0.3549 - val_loss: 0.0852 - val_accuracy: 0.2752 - val_mean_squared_error: 0.3814 - 69s/epoch - 252ms/step
Epoch 57/100
273/273 - 68s - loss: 0.0837 - accuracy: 0.3535 - mean_squared_error: 0.3889 - val_loss: 0.0770 - val_accuracy: 0.3619 - val_mean_squared_error: 0.3659 - 68s/epoch - 251ms/step
Epoch 58/100
273/273 - 69s - loss: 0.0818 - accuracy: 0.3117 - mean_squared_error: 0.3719 - val_loss: 0.0726 - val_accuracy: 0.1905 - val_mean_squared_error: 0.3175 - 69s/epoch - 254ms/step
Epoch 59/100
273/273 - 69s - loss: 0.0805 - accuracy: 0.3696 - mean_squared_error: 0.5360 - val_loss: 0.0899 - val_accuracy: 0.4183 - val_mean_squared_error: 0.5971 - 69s/epoch - 252ms/step
Epoch 60/100
273/273 - 68s - loss: 0.0766 - accuracy: 0.3450 - mean_squared_error: 0.6873 - val_loss: 0.0824 - val_accuracy: 0.3337 - val_mean_squared_error: 0.6766 - 68s/epoch - 250ms/step
Epoch 61/100
273/273 - 69s - loss: 0.0779 - accuracy: 0.3299 - mean_squared_error: 0.5362 - val_loss: 0.0973 - val_accuracy: 0.3115 - val_mean_squared_error: 0.4475 - 69s/epoch - 254ms/step
Epoch 62/100
273/273 - 69s - loss: 0.0844 - accuracy: 0.3405 - mean_squared_error: 0.4905 - val_loss: 0.0870 - val_accuracy: 0.2732 - val_mean_squared_error: 0.5557 - 69s/epoch - 254ms/step
Epoch 63/100
273/273 - 70s - loss: 0.0770 - accuracy: 0.3436 - mean_squared_error: 0.5397 - val_loss: 0.0962 - val_accuracy: 0.4808 - val_mean_squared_error: 0.4691 - 70s/epoch - 255ms/step
Epoch 64/100
273/273 - 69s - loss: 0.0769 - accuracy: 0.3401 - mean_squared_error: 0.5721 - val_loss: 0.0838 - val_accuracy: 0.3679 - val_mean_squared_error: 0.6365 - 69s/epoch - 253ms/step
Epoch 65/100
273/273 - 69s - loss: 0.0762 - accuracy: 0.3851 - mean_squared_error: 0.7498 - val_loss: 0.0892 - val_accuracy: 0.2853 - val_mean_squared_error: 0.8221 - 69s/epoch - 254ms/step
Epoch 66/100
273/273 - 69s - loss: 0.0762 - accuracy: 0.3334 - mean_squared_error: 0.6410 - val_loss: 0.0986 - val_accuracy: 0.4073 - val_mean_squared_error: 0.4828 - 69s/epoch - 253ms/step
Epoch 67/100
273/273 - 70s - loss: 0.0739 - accuracy: 0.3173 - mean_squared_error: 0.5555 - val_loss: 0.0841 - val_accuracy: 0.3024 - val_mean_squared_error: 0.5136 - 70s/epoch - 256ms/step
Epoch 68/100
273/273 - 69s - loss: 0.0837 - accuracy: 0.3633 - mean_squared_error: 0.4809 - val_loss: 0.0739 - val_accuracy: 0.1855 - val_mean_squared_error: 0.4765 - 69s/epoch - 252ms/step
Epoch 69/100
273/273 - 70s - loss: 0.0850 - accuracy: 0.3568 - mean_squared_error: 0.4782 - val_loss: 0.0796 - val_accuracy: 0.2389 - val_mean_squared_error: 0.4238 - 70s/epoch - 255ms/step
Epoch 70/100
273/273 - 69s - loss: 0.0793 - accuracy: 0.3341 - mean_squared_error: 0.5164 - val_loss: 0.0813 - val_accuracy: 0.3125 - val_mean_squared_error: 0.5628 - 69s/epoch - 252ms/step
Epoch 71/100
273/273 - 70s - loss: 0.0835 - accuracy: 0.3354 - mean_squared_error: 0.4993 - val_loss: 0.0871 - val_accuracy: 0.1835 - val_mean_squared_error: 0.5714 - 70s/epoch - 255ms/step
Epoch 72/100
273/273 - 69s - loss: 0.0847 - accuracy: 0.3063 - mean_squared_error: 0.5179 - val_loss: 0.0905 - val_accuracy: 0.3246 - val_mean_squared_error: 0.5487 - 69s/epoch - 254ms/step
Epoch 73/100
273/273 - 69s - loss: 0.0840 - accuracy: 0.3258 - mean_squared_error: 0.4573 - val_loss: 0.0779 - val_accuracy: 0.3196 - val_mean_squared_error: 0.4736 - 69s/epoch - 254ms/step
Epoch 74/100
273/273 - 70s - loss: 0.0835 - accuracy: 0.3779 - mean_squared_error: 0.5494 - val_loss: 0.1003 - val_accuracy: 0.4052 - val_mean_squared_error: 0.6291 - 70s/epoch - 255ms/step
Epoch 75/100
273/273 - 70s - loss: 0.0790 - accuracy: 0.3278 - mean_squared_error: 0.6021 - val_loss: 0.0843 - val_accuracy: 0.3901 - val_mean_squared_error: 0.4352 - 70s/epoch - 256ms/step
Epoch 76/100
273/273 - 69s - loss: 0.0765 - accuracy: 0.3116 - mean_squared_error: 0.4418 - val_loss: 0.0788 - val_accuracy: 0.3478 - val_mean_squared_error: 0.3972 - 69s/epoch - 251ms/step
Epoch 77/100
273/273 - 68s - loss: 0.0784 - accuracy: 0.3504 - mean_squared_error: 0.5691 - val_loss: 0.0782 - val_accuracy: 0.3730 - val_mean_squared_error: 0.6401 - 68s/epoch - 250ms/step
Epoch 78/100
273/273 - 68s - loss: 0.0768 - accuracy: 0.2645 - mean_squared_error: 0.5853 - val_loss: 0.0965 - val_accuracy: 0.3357 - val_mean_squared_error: 0.4939 - 68s/epoch - 248ms/step
Epoch 79/100
273/273 - 70s - loss: 0.0782 - accuracy: 0.3199 - mean_squared_error: 0.5733 - val_loss: 0.0753 - val_accuracy: 0.3891 - val_mean_squared_error: 0.6588 - 70s/epoch - 256ms/step
Epoch 80/100
273/273 - 69s - loss: 0.0815 - accuracy: 0.3072 - mean_squared_error: 0.3716 - val_loss: 0.0902 - val_accuracy: 0.3327 - val_mean_squared_error: 0.2643 - 69s/epoch - 254ms/step
Epoch 81/100
273/273 - 69s - loss: 0.0791 - accuracy: 0.3228 - mean_squared_error: 0.2481 - val_loss: 0.0796 - val_accuracy: 0.3256 - val_mean_squared_error: 0.2254 - 69s/epoch - 251ms/step
Epoch 82/100
273/273 - 67s - loss: 0.0818 - accuracy: 0.3250 - mean_squared_error: 0.2566 - val_loss: 0.0877 - val_accuracy: 0.2681 - val_mean_squared_error: 0.2935 - 67s/epoch - 244ms/step
Epoch 83/100
273/273 - 69s - loss: 0.0792 - accuracy: 0.3191 - mean_squared_error: 0.4065 - val_loss: 0.0790 - val_accuracy: 0.2671 - val_mean_squared_error: 0.4500 - 69s/epoch - 251ms/step
Epoch 84/100
273/273 - 68s - loss: 0.0801 - accuracy: 0.3460 - mean_squared_error: 0.4815 - val_loss: 0.0891 - val_accuracy: 0.1935 - val_mean_squared_error: 0.4967 - 68s/epoch - 251ms/step
Epoch 85/100
273/273 - 69s - loss: 0.0838 - accuracy: 0.3488 - mean_squared_error: 0.4819 - val_loss: 0.0835 - val_accuracy: 0.4657 - val_mean_squared_error: 0.4787 - 69s/epoch - 253ms/step
Epoch 86/100
273/273 - 67s - loss: 0.0825 - accuracy: 0.3171 - mean_squared_error: 0.4159 - val_loss: 0.0783 - val_accuracy: 0.2339 - val_mean_squared_error: 0.4008 - 67s/epoch - 247ms/step
Epoch 87/100
273/273 - 69s - loss: 0.0802 - accuracy: 0.3173 - mean_squared_error: 0.3312 - val_loss: 0.0929 - val_accuracy: 0.4980 - val_mean_squared_error: 0.2477 - 69s/epoch - 254ms/step
Epoch 88/100
273/273 - 69s - loss: 0.0814 - accuracy: 0.3385 - mean_squared_error: 0.2923 - val_loss: 0.0947 - val_accuracy: 0.2540 - val_mean_squared_error: 0.3518 - 69s/epoch - 254ms/step
Epoch 89/100
273/273 - 69s - loss: 0.0800 - accuracy: 0.3679 - mean_squared_error: 0.4956 - val_loss: 0.0817 - val_accuracy: 0.3044 - val_mean_squared_error: 0.6322 - 69s/epoch - 254ms/step
Epoch 90/100
273/273 - 69s - loss: 0.0757 - accuracy: 0.3387 - mean_squared_error: 0.6624 - val_loss: 0.0794 - val_accuracy: 0.2853 - val_mean_squared_error: 0.6431 - 69s/epoch - 254ms/step
Epoch 91/100
273/273 - 69s - loss: 0.0812 - accuracy: 0.3340 - mean_squared_error: 0.5359 - val_loss: 0.0779 - val_accuracy: 0.2984 - val_mean_squared_error: 0.5752 - 69s/epoch - 253ms/step
Epoch 92/100
273/273 - 69s - loss: 0.0765 - accuracy: 0.3339 - mean_squared_error: 0.5745 - val_loss: 0.0861 - val_accuracy: 0.3589 - val_mean_squared_error: 0.5654 - 69s/epoch - 252ms/step
Epoch 93/100
273/273 - 67s - loss: 0.0813 - accuracy: 0.3077 - mean_squared_error: 0.7197 - val_loss: 0.0809 - val_accuracy: 0.3478 - val_mean_squared_error: 0.8354 - 67s/epoch - 247ms/step
Epoch 94/100
273/273 - 67s - loss: 0.0816 - accuracy: 0.3395 - mean_squared_error: 0.7356 - val_loss: 0.0736 - val_accuracy: 0.3649 - val_mean_squared_error: 0.6822 - 67s/epoch - 244ms/step
Epoch 95/100
273/273 - 67s - loss: 0.0761 - accuracy: 0.3494 - mean_squared_error: 0.7021 - val_loss: 0.0957 - val_accuracy: 0.2440 - val_mean_squared_error: 0.6027 - 67s/epoch - 247ms/step
Epoch 96/100
273/273 - 69s - loss: 0.0835 - accuracy: 0.3369 - mean_squared_error: 0.6436 - val_loss: 0.0824 - val_accuracy: 0.3226 - val_mean_squared_error: 0.6167 - 69s/epoch - 254ms/step
Epoch 97/100
273/273 - 69s - loss: 0.0821 - accuracy: 0.3906 - mean_squared_error: 0.6396 - val_loss: 0.0794 - val_accuracy: 0.2883 - val_mean_squared_error: 0.6619 - 69s/epoch - 253ms/step
Epoch 98/100
273/273 - 68s - loss: 0.0783 - accuracy: 0.3144 - mean_squared_error: 0.5423 - val_loss: 0.0850 - val_accuracy: 0.5081 - val_mean_squared_error: 0.4296 - 68s/epoch - 250ms/step
Epoch 99/100
273/273 - 66s - loss: 0.0819 - accuracy: 0.3009 - mean_squared_error: 0.4518 - val_loss: 0.0907 - val_accuracy: 0.3246 - val_mean_squared_error: 0.4792 - 66s/epoch - 242ms/step
Epoch 100/100
273/273 - 66s - loss: 0.0837 - accuracy: 0.3561 - mean_squared_error: 0.4663 - val_loss: 0.0872 - val_accuracy: 0.2994 - val_mean_squared_error: 0.4987 - 66s/epoch - 240ms/step
Traceback (most recent call last):
  File "/zhome/ab/7/153983/project/trainModelIter2.py", line 238, in <module>
    plt.savefig("{}/Graphs/{}_Image_{}.png".format(out_path, random_id_str, unique_name))
  File "/zhome/ab/7/153983/project/venv/lib/python3.10/site-packages/matplotlib/pyplot.py", line 944, in savefig
    res = fig.savefig(*args, **kwargs)
  File "/zhome/ab/7/153983/project/venv/lib/python3.10/site-packages/matplotlib/figure.py", line 3277, in savefig
    self.canvas.print_figure(fname, **kwargs)
  File "/zhome/ab/7/153983/project/venv/lib/python3.10/site-packages/matplotlib/backend_bases.py", line 2338, in print_figure
    result = print_method(
  File "/zhome/ab/7/153983/project/venv/lib/python3.10/site-packages/matplotlib/backend_bases.py", line 2204, in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
  File "/zhome/ab/7/153983/project/venv/lib/python3.10/site-packages/matplotlib/_api/deprecation.py", line 410, in wrapper
    return func(*inner_args, **inner_kwargs)
  File "/zhome/ab/7/153983/project/venv/lib/python3.10/site-packages/matplotlib/backends/backend_agg.py", line 520, in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
  File "/zhome/ab/7/153983/project/venv/lib/python3.10/site-packages/matplotlib/backends/backend_agg.py", line 467, in _print_pil
    mpl.image.imsave(
  File "/zhome/ab/7/153983/project/venv/lib/python3.10/site-packages/matplotlib/image.py", line 1656, in imsave
    image.save(fname, **pil_kwargs)
  File "/zhome/ab/7/153983/project/venv/lib/python3.10/site-packages/PIL/Image.py", line 2317, in save
    fp = builtins.open(filename, "w+b")
FileNotFoundError: [Errno 2] No such file or directory: 'iter3/Graphs/35ba368497bf11edab44b883034fb9c2_Image_Adam_square_abs_min_individual_loss_0005_amsgrad_true.png'

------------------------------------------------------------
Sender: LSF System <lsfadmin@hpc.dtu.dk>
Subject: Job 15213428: <s202741-train> in cluster <dcc> Exited

Job <s202741-train> was submitted from host <n-62-20-1> by user <s202741> in cluster <dcc> at Wed Jan 18 23:53:43 2023
Job was executed on host(s) <4*n-62-20-11>, in queue <gpuv100>, as user <s202741> in cluster <dcc> at Thu Jan 19 07:04:33 2023
</zhome/ab/7/153983> was used as the home directory.
</zhome/ab/7/153983/project/scripts> was used as the working directory.
Started at Thu Jan 19 07:04:33 2023
Terminated at Thu Jan 19 09:01:14 2023
Results reported at Thu Jan 19 09:01:14 2023

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#!/bin/bash
### General options
### -- specify queue --   NOTE: TitanX is significantly faster than K80
#BSUB -q gpuv100
#BSUB -gpu "num=1:mode=exclusive_process"
### -- set the job Name --
#BSUB -J s202741-train
### -- ask for number of cores (default: 1) --
#BSUB -n 4
#BSUB -R "span[hosts=1]"
### -- set walltime limit: hh:mm --  maximum 24 hours for GPU-queues right now
#BSUB -W 2:00
# request 5GB of memory
#BSUB -R "rusage[mem=5GB]"
### -- Specify the output and error file. %J is the job-id --
### -- -o and -e mean append, -oo and -eo mean overwrite --
#BSUB -o iter3/Logs/Adam_square_abs_min_individual_loss_0005_amsgrad_true%J.out
# -- end of LSF options --

# Necessary modules
cd ..
source venv/bin/activate

python trainModelIter2.py 100 "Adam(learning_rate=0.005, amsgrad=True)" "[\"accuracy\", tf.keras.metrics.MeanSquaredError(name=\"mean_squared_error\", dtype=None)]" "square_abs_min_individual_loss" "black_background_500x500.csv" 2 "Adam_square_abs_min_individual_loss_0005_amsgrad_true" "iter3"

    
------------------------------------------------------------

Exited with exit code 1.

Resource usage summary:

    CPU time :                                   8493.32 sec.
    Max Memory :                                 2978 MB
    Average Memory :                             2829.75 MB
    Total Requested Memory :                     20480.00 MB
    Delta Memory :                               17502.00 MB
    Max Swap :                                   -
    Max Processes :                              4
    Max Threads :                                33
    Run time :                                   7013 sec.
    Turnaround time :                            32851 sec.

The output (if any) is above this job summary.

