Loaded dependency [python3/3.10.7]: gcc/11.3.0-binutils-2.38
Loaded module: python3/3.10.7

Loading python3/3.10.7
  Loading requirement: gcc/11.3.0-binutils-2.38
Loaded module: cuda/11.6
Loaded module: cudnn/v8.3.2.44-prod-cuda-11.X
2023-01-19 08:33:28.106964: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2023-01-19 08:33:31.429735: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer.so.7'; dlerror: libnvinfer.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /appl/cudnn/v8.3.2.44-prod-cuda-11.5/lib:/appl/cuda/11.6.0/lib64:/appl/python/3.10.7/lib:/appl/gcc/11.3.0-binutils-2.38/lib64:/appl/gcc/11.3.0-binutils-2.38/lib:/lsf/10.1/linux3.10-glibc2.17-x86_64/lib
2023-01-19 08:33:31.430370: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer_plugin.so.7'; dlerror: libnvinfer_plugin.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /appl/cudnn/v8.3.2.44-prod-cuda-11.5/lib:/appl/cuda/11.6.0/lib64:/appl/python/3.10.7/lib:/appl/gcc/11.3.0-binutils-2.38/lib64:/appl/gcc/11.3.0-binutils-2.38/lib:/lsf/10.1/linux3.10-glibc2.17-x86_64/lib
2023-01-19 08:33:31.430385: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Cannot dlopen some TensorRT libraries. If you would like to use Nvidia GPU with TensorRT, please make sure the missing libraries mentioned above are installed properly.
2023-01-19 08:33:36.565459: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2023-01-19 08:33:39.022254: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1613] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 30961 MB memory:  -> device: 0, name: Tesla V100-SXM2-32GB, pci bus id: 0000:16:00.0, compute capability: 7.0
Epochs:  100
Optimizer:  RMSprop(learning_rate=0.001)
Metrics:  ["accuracy", tf.keras.metrics.MeanSquaredError(name="mean_squared_error", dtype=None)]
Loss function name:  square_abs_min_loss
Csv file used:  black_background_500x500.csv
Verbose:  2
Unique name:  RMSprop_square_abs_min_loss_0001
Output folder:  iter3
 ################ MODEL ############### 
 
inputs = keras.Input(shape=(input_size, input_size, 1))
x = layers.Conv2D(filters=32, kernel_size=3, activation="relu")(inputs)
x = layers.Conv2D(filters=32, kernel_size=3, activation="relu")(x)
x = layers.MaxPooling2D(pool_size=4)(x)
x = layers.Conv2D(filters=32, kernel_size=3, activation="relu")(x)
x = layers.Conv2D(filters=32, kernel_size=3, activation="relu")(x)
x = layers.MaxPooling2D(pool_size=4)(x)
x = layers.Conv2D(filters=32, kernel_size=3, activation="relu")(x)
x = layers.Conv2D(filters=32, kernel_size=3, activation="relu")(x)
x = layers.MaxPooling2D(pool_size=4)(x)
x = layers.Flatten()(x)
x = layers.Dense(128, activation="relu")(x)
x = layers.Dense(16, activation="relu")(x)
outputs = layers.Dense(3)(x)


Model: "model"
_________________________________________________________________
 Layer (type)                Output Shape              Param #   
=================================================================
 input_1 (InputLayer)        [(None, 500, 500, 1)]     0         
                                                                 
 conv2d (Conv2D)             (None, 498, 498, 32)      320       
                                                                 
 conv2d_1 (Conv2D)           (None, 496, 496, 32)      9248      
                                                                 
 max_pooling2d (MaxPooling2D  (None, 124, 124, 32)     0         
 )                                                               
                                                                 
 conv2d_2 (Conv2D)           (None, 122, 122, 32)      9248      
                                                                 
 conv2d_3 (Conv2D)           (None, 120, 120, 32)      9248      
                                                                 
 max_pooling2d_1 (MaxPooling  (None, 30, 30, 32)       0         
 2D)                                                             
                                                                 
 conv2d_4 (Conv2D)           (None, 28, 28, 32)        9248      
                                                                 
 conv2d_5 (Conv2D)           (None, 26, 26, 32)        9248      
                                                                 
 max_pooling2d_2 (MaxPooling  (None, 6, 6, 32)         0         
 2D)                                                             
                                                                 
 flatten (Flatten)           (None, 1152)              0         
                                                                 
 dense (Dense)               (None, 128)               147584    
                                                                 
 dense_1 (Dense)             (None, 16)                2064      
                                                                 
 dense_2 (Dense)             (None, 3)                 51        
                                                                 
=================================================================
Total params: 196,259
Trainable params: 196,259
Non-trainable params: 0
_________________________________________________________________
/zhome/ab/7/153983/project/venv/lib/python3.10/site-packages/keras/utils/image_utils.py:409: UserWarning: grayscale is deprecated. Please use color_mode = "grayscale"
  warnings.warn(
Epoch 1/100
2023-01-19 08:33:43.164273: I tensorflow/compiler/xla/stream_executor/cuda/cuda_dnn.cc:428] Loaded cuDNN version 8302
273/273 - 75s - loss: 0.0674 - accuracy: 0.3107 - mean_squared_error: 0.2923 - val_loss: 0.0733 - val_accuracy: 0.2923 - val_mean_squared_error: 0.2752 - 75s/epoch - 274ms/step
Epoch 2/100
273/273 - 70s - loss: 0.0725 - accuracy: 0.3075 - mean_squared_error: 0.3236 - val_loss: 0.0638 - val_accuracy: 0.2429 - val_mean_squared_error: 0.3696 - 70s/epoch - 256ms/step
Epoch 3/100
273/273 - 71s - loss: 0.0730 - accuracy: 0.3668 - mean_squared_error: 0.3454 - val_loss: 0.0717 - val_accuracy: 0.3286 - val_mean_squared_error: 0.3462 - 71s/epoch - 259ms/step
Epoch 4/100
273/273 - 69s - loss: 0.0686 - accuracy: 0.3251 - mean_squared_error: 0.3482 - val_loss: 0.0752 - val_accuracy: 0.4940 - val_mean_squared_error: 0.3243 - 69s/epoch - 253ms/step
Epoch 5/100
273/273 - 68s - loss: 0.0647 - accuracy: 0.3221 - mean_squared_error: 0.4047 - val_loss: 0.0633 - val_accuracy: 0.3276 - val_mean_squared_error: 0.3775 - 68s/epoch - 249ms/step
Epoch 6/100
273/273 - 68s - loss: 0.0633 - accuracy: 0.2995 - mean_squared_error: 0.4160 - val_loss: 0.0671 - val_accuracy: 0.2520 - val_mean_squared_error: 0.3844 - 68s/epoch - 249ms/step
Epoch 7/100
273/273 - 69s - loss: 0.0676 - accuracy: 0.3049 - mean_squared_error: 0.4430 - val_loss: 0.0688 - val_accuracy: 0.4113 - val_mean_squared_error: 0.4151 - 69s/epoch - 254ms/step
Epoch 8/100
273/273 - 70s - loss: 0.0697 - accuracy: 0.3345 - mean_squared_error: 0.4333 - val_loss: 0.0772 - val_accuracy: 0.2571 - val_mean_squared_error: 0.4111 - 70s/epoch - 257ms/step
Epoch 9/100
273/273 - 68s - loss: 0.0704 - accuracy: 0.3605 - mean_squared_error: 0.4852 - val_loss: 0.0836 - val_accuracy: 0.3518 - val_mean_squared_error: 0.5446 - 68s/epoch - 250ms/step
Epoch 10/100
273/273 - 69s - loss: 0.0705 - accuracy: 0.2982 - mean_squared_error: 0.4989 - val_loss: 0.0719 - val_accuracy: 0.3448 - val_mean_squared_error: 0.4698 - 69s/epoch - 253ms/step
Epoch 11/100
273/273 - 67s - loss: 0.0666 - accuracy: 0.3031 - mean_squared_error: 0.4511 - val_loss: 0.0684 - val_accuracy: 0.3488 - val_mean_squared_error: 0.4243 - 67s/epoch - 246ms/step
Epoch 12/100
273/273 - 70s - loss: 0.0626 - accuracy: 0.3033 - mean_squared_error: 0.4649 - val_loss: 0.0724 - val_accuracy: 0.2702 - val_mean_squared_error: 0.4630 - 70s/epoch - 256ms/step
Epoch 13/100
273/273 - 69s - loss: 0.0678 - accuracy: 0.3726 - mean_squared_error: 0.4827 - val_loss: 0.0685 - val_accuracy: 0.2812 - val_mean_squared_error: 0.4485 - 69s/epoch - 253ms/step
Epoch 14/100
273/273 - 68s - loss: 0.0701 - accuracy: 0.3638 - mean_squared_error: 0.4479 - val_loss: 0.0712 - val_accuracy: 0.3125 - val_mean_squared_error: 0.3900 - 68s/epoch - 249ms/step
Epoch 15/100
273/273 - 67s - loss: 0.0637 - accuracy: 0.3204 - mean_squared_error: 0.4076 - val_loss: 0.0716 - val_accuracy: 0.3306 - val_mean_squared_error: 0.3816 - 67s/epoch - 246ms/step
Epoch 16/100
273/273 - 67s - loss: 0.0661 - accuracy: 0.3365 - mean_squared_error: 0.3607 - val_loss: 0.0700 - val_accuracy: 0.2480 - val_mean_squared_error: 0.3660 - 67s/epoch - 245ms/step
Epoch 17/100
273/273 - 68s - loss: 0.0705 - accuracy: 0.3096 - mean_squared_error: 0.3450 - val_loss: 0.0729 - val_accuracy: 0.2480 - val_mean_squared_error: 0.3617 - 68s/epoch - 249ms/step
Epoch 18/100
273/273 - 68s - loss: 0.0678 - accuracy: 0.3545 - mean_squared_error: 0.3513 - val_loss: 0.0651 - val_accuracy: 0.2107 - val_mean_squared_error: 0.3158 - 68s/epoch - 249ms/step
Epoch 19/100
273/273 - 67s - loss: 0.0677 - accuracy: 0.3494 - mean_squared_error: 0.3082 - val_loss: 0.0688 - val_accuracy: 0.3679 - val_mean_squared_error: 0.2902 - 67s/epoch - 247ms/step
Epoch 20/100
273/273 - 68s - loss: 0.0716 - accuracy: 0.3543 - mean_squared_error: 0.2925 - val_loss: 0.0666 - val_accuracy: 0.3377 - val_mean_squared_error: 0.2734 - 68s/epoch - 248ms/step
Epoch 21/100
273/273 - 67s - loss: 0.0657 - accuracy: 0.2978 - mean_squared_error: 0.2511 - val_loss: 0.0848 - val_accuracy: 0.4062 - val_mean_squared_error: 0.2500 - 67s/epoch - 247ms/step
Epoch 22/100
273/273 - 67s - loss: 0.0641 - accuracy: 0.3075 - mean_squared_error: 0.2315 - val_loss: 0.0789 - val_accuracy: 0.2157 - val_mean_squared_error: 0.2314 - 67s/epoch - 244ms/step
Epoch 23/100
273/273 - 66s - loss: 0.0637 - accuracy: 0.2794 - mean_squared_error: 0.2227 - val_loss: 0.0797 - val_accuracy: 0.2722 - val_mean_squared_error: 0.2406 - 66s/epoch - 244ms/step
Epoch 24/100
273/273 - 67s - loss: 0.0658 - accuracy: 0.2954 - mean_squared_error: 0.2207 - val_loss: 0.0621 - val_accuracy: 0.3024 - val_mean_squared_error: 0.2212 - 67s/epoch - 246ms/step
Epoch 25/100
273/273 - 66s - loss: 0.0681 - accuracy: 0.3370 - mean_squared_error: 0.2568 - val_loss: 0.0688 - val_accuracy: 0.3639 - val_mean_squared_error: 0.2709 - 66s/epoch - 243ms/step
Epoch 26/100
273/273 - 65s - loss: 0.0676 - accuracy: 0.3597 - mean_squared_error: 0.3490 - val_loss: 0.0692 - val_accuracy: 0.2843 - val_mean_squared_error: 0.3696 - 65s/epoch - 239ms/step
Epoch 27/100
273/273 - 66s - loss: 0.0704 - accuracy: 0.2859 - mean_squared_error: 0.3960 - val_loss: 0.0792 - val_accuracy: 0.4446 - val_mean_squared_error: 0.3757 - 66s/epoch - 240ms/step
Epoch 28/100
273/273 - 65s - loss: 0.0700 - accuracy: 0.3310 - mean_squared_error: 0.4390 - val_loss: 0.0745 - val_accuracy: 0.3448 - val_mean_squared_error: 0.4383 - 65s/epoch - 240ms/step
Epoch 29/100
273/273 - 67s - loss: 0.0682 - accuracy: 0.3064 - mean_squared_error: 0.4267 - val_loss: 0.0700 - val_accuracy: 0.2379 - val_mean_squared_error: 0.3418 - 67s/epoch - 246ms/step
Epoch 30/100
273/273 - 67s - loss: 0.0683 - accuracy: 0.3401 - mean_squared_error: 0.4036 - val_loss: 0.0595 - val_accuracy: 0.2782 - val_mean_squared_error: 0.4499 - 67s/epoch - 244ms/step
Epoch 31/100
273/273 - 67s - loss: 0.0665 - accuracy: 0.3645 - mean_squared_error: 0.4975 - val_loss: 0.0752 - val_accuracy: 0.3710 - val_mean_squared_error: 0.4917 - 67s/epoch - 245ms/step
Epoch 32/100
273/273 - 65s - loss: 0.0671 - accuracy: 0.3162 - mean_squared_error: 0.4906 - val_loss: 0.0739 - val_accuracy: 0.2883 - val_mean_squared_error: 0.4410 - 65s/epoch - 239ms/step
Epoch 33/100
273/273 - 67s - loss: 0.0716 - accuracy: 0.3266 - mean_squared_error: 0.5150 - val_loss: 0.0820 - val_accuracy: 0.2782 - val_mean_squared_error: 0.5162 - 67s/epoch - 245ms/step
Epoch 34/100
273/273 - 64s - loss: 0.0638 - accuracy: 0.3444 - mean_squared_error: 0.6117 - val_loss: 0.0760 - val_accuracy: 0.4093 - val_mean_squared_error: 0.5621 - 64s/epoch - 234ms/step
Epoch 35/100
273/273 - 65s - loss: 0.0708 - accuracy: 0.3574 - mean_squared_error: 0.5789 - val_loss: 0.0773 - val_accuracy: 0.1946 - val_mean_squared_error: 0.5699 - 65s/epoch - 238ms/step
Epoch 36/100
273/273 - 65s - loss: 0.0638 - accuracy: 0.3341 - mean_squared_error: 0.6394 - val_loss: 0.0713 - val_accuracy: 0.2611 - val_mean_squared_error: 0.6139 - 65s/epoch - 240ms/step
Epoch 37/100
273/273 - 65s - loss: 0.0648 - accuracy: 0.2898 - mean_squared_error: 0.5980 - val_loss: 0.0665 - val_accuracy: 0.3145 - val_mean_squared_error: 0.5924 - 65s/epoch - 239ms/step
Epoch 38/100
273/273 - 67s - loss: 0.0678 - accuracy: 0.3355 - mean_squared_error: 0.5856 - val_loss: 0.0597 - val_accuracy: 0.2903 - val_mean_squared_error: 0.6547 - 67s/epoch - 245ms/step
Epoch 39/100
273/273 - 64s - loss: 0.0649 - accuracy: 0.3593 - mean_squared_error: 0.5998 - val_loss: 0.0684 - val_accuracy: 0.3054 - val_mean_squared_error: 0.5793 - 64s/epoch - 235ms/step
Epoch 40/100
273/273 - 66s - loss: 0.0667 - accuracy: 0.3162 - mean_squared_error: 0.5386 - val_loss: 0.0706 - val_accuracy: 0.3407 - val_mean_squared_error: 0.5212 - 66s/epoch - 242ms/step
Epoch 41/100
273/273 - 64s - loss: 0.0663 - accuracy: 0.3330 - mean_squared_error: 0.4695 - val_loss: 0.0691 - val_accuracy: 0.2752 - val_mean_squared_error: 0.4535 - 64s/epoch - 236ms/step
Epoch 42/100
273/273 - 65s - loss: 0.0670 - accuracy: 0.3312 - mean_squared_error: 0.4481 - val_loss: 0.0634 - val_accuracy: 0.2571 - val_mean_squared_error: 0.3852 - 65s/epoch - 238ms/step
Epoch 43/100
273/273 - 65s - loss: 0.0639 - accuracy: 0.3220 - mean_squared_error: 0.4993 - val_loss: 0.0721 - val_accuracy: 0.4395 - val_mean_squared_error: 0.5616 - 65s/epoch - 239ms/step
Epoch 44/100
273/273 - 65s - loss: 0.0626 - accuracy: 0.2944 - mean_squared_error: 0.5498 - val_loss: 0.0599 - val_accuracy: 0.3901 - val_mean_squared_error: 0.5643 - 65s/epoch - 239ms/step
Epoch 45/100
273/273 - 65s - loss: 0.0678 - accuracy: 0.3511 - mean_squared_error: 0.4766 - val_loss: 0.0732 - val_accuracy: 0.3790 - val_mean_squared_error: 0.4124 - 65s/epoch - 239ms/step
Epoch 46/100
273/273 - 65s - loss: 0.0677 - accuracy: 0.3480 - mean_squared_error: 0.4809 - val_loss: 0.0592 - val_accuracy: 0.2712 - val_mean_squared_error: 0.4501 - 65s/epoch - 237ms/step
Epoch 47/100
273/273 - 67s - loss: 0.0665 - accuracy: 0.3235 - mean_squared_error: 0.4260 - val_loss: 0.0728 - val_accuracy: 0.3145 - val_mean_squared_error: 0.3489 - 67s/epoch - 244ms/step
Epoch 48/100
273/273 - 63s - loss: 0.0670 - accuracy: 0.3090 - mean_squared_error: 0.3612 - val_loss: 0.0803 - val_accuracy: 0.2520 - val_mean_squared_error: 0.3571 - 63s/epoch - 232ms/step
Epoch 49/100
273/273 - 67s - loss: 0.0674 - accuracy: 0.3108 - mean_squared_error: 0.3193 - val_loss: 0.0629 - val_accuracy: 0.2812 - val_mean_squared_error: 0.2845 - 67s/epoch - 244ms/step
Epoch 50/100
273/273 - 67s - loss: 0.0698 - accuracy: 0.2840 - mean_squared_error: 0.3097 - val_loss: 0.0682 - val_accuracy: 0.3478 - val_mean_squared_error: 0.3232 - 67s/epoch - 244ms/step
Epoch 51/100
273/273 - 64s - loss: 0.0683 - accuracy: 0.3206 - mean_squared_error: 0.3843 - val_loss: 0.0616 - val_accuracy: 0.2984 - val_mean_squared_error: 0.3916 - 64s/epoch - 233ms/step
Epoch 52/100
273/273 - 66s - loss: 0.0691 - accuracy: 0.3160 - mean_squared_error: 0.3604 - val_loss: 0.0708 - val_accuracy: 0.2087 - val_mean_squared_error: 0.3690 - 66s/epoch - 243ms/step
Epoch 53/100
273/273 - 67s - loss: 0.0693 - accuracy: 0.3515 - mean_squared_error: 0.3895 - val_loss: 0.0767 - val_accuracy: 0.2359 - val_mean_squared_error: 0.4324 - 67s/epoch - 244ms/step
Epoch 54/100
273/273 - 63s - loss: 0.0652 - accuracy: 0.3413 - mean_squared_error: 0.3995 - val_loss: 0.0639 - val_accuracy: 0.3266 - val_mean_squared_error: 0.4274 - 63s/epoch - 233ms/step
Epoch 55/100
273/273 - 66s - loss: 0.0601 - accuracy: 0.3418 - mean_squared_error: 0.4046 - val_loss: 0.0765 - val_accuracy: 0.3952 - val_mean_squared_error: 0.3619 - 66s/epoch - 243ms/step
Epoch 56/100
273/273 - 65s - loss: 0.0651 - accuracy: 0.3213 - mean_squared_error: 0.4019 - val_loss: 0.0629 - val_accuracy: 0.1724 - val_mean_squared_error: 0.3740 - 65s/epoch - 237ms/step
Epoch 57/100
273/273 - 65s - loss: 0.0726 - accuracy: 0.3253 - mean_squared_error: 0.3755 - val_loss: 0.0800 - val_accuracy: 0.4294 - val_mean_squared_error: 0.3858 - 65s/epoch - 238ms/step
Epoch 58/100
273/273 - 65s - loss: 0.0686 - accuracy: 0.3558 - mean_squared_error: 0.4197 - val_loss: 0.0554 - val_accuracy: 0.3075 - val_mean_squared_error: 0.4346 - 65s/epoch - 238ms/step
Epoch 59/100
273/273 - 65s - loss: 0.0659 - accuracy: 0.2948 - mean_squared_error: 0.4291 - val_loss: 0.0709 - val_accuracy: 0.3054 - val_mean_squared_error: 0.4109 - 65s/epoch - 239ms/step
Epoch 60/100
273/273 - 65s - loss: 0.0674 - accuracy: 0.3296 - mean_squared_error: 0.4117 - val_loss: 0.0669 - val_accuracy: 0.2681 - val_mean_squared_error: 0.4392 - 65s/epoch - 239ms/step
Epoch 61/100
273/273 - 67s - loss: 0.0675 - accuracy: 0.3096 - mean_squared_error: 0.4108 - val_loss: 0.0680 - val_accuracy: 0.2762 - val_mean_squared_error: 0.3174 - 67s/epoch - 244ms/step
Epoch 62/100
273/273 - 64s - loss: 0.0682 - accuracy: 0.3281 - mean_squared_error: 0.3637 - val_loss: 0.0607 - val_accuracy: 0.3216 - val_mean_squared_error: 0.3571 - 64s/epoch - 234ms/step
Epoch 63/100
273/273 - 65s - loss: 0.0667 - accuracy: 0.3563 - mean_squared_error: 0.3613 - val_loss: 0.0640 - val_accuracy: 0.2308 - val_mean_squared_error: 0.3431 - 65s/epoch - 239ms/step
Epoch 64/100
273/273 - 64s - loss: 0.0687 - accuracy: 0.3505 - mean_squared_error: 0.3102 - val_loss: 0.0659 - val_accuracy: 0.2571 - val_mean_squared_error: 0.3072 - 64s/epoch - 233ms/step
Epoch 65/100
273/273 - 64s - loss: 0.0716 - accuracy: 0.3492 - mean_squared_error: 0.3402 - val_loss: 0.0770 - val_accuracy: 0.3095 - val_mean_squared_error: 0.3053 - 64s/epoch - 233ms/step
Epoch 66/100
273/273 - 65s - loss: 0.0677 - accuracy: 0.3068 - mean_squared_error: 0.3024 - val_loss: 0.0641 - val_accuracy: 0.2752 - val_mean_squared_error: 0.2631 - 65s/epoch - 237ms/step
Epoch 67/100
273/273 - 65s - loss: 0.0714 - accuracy: 0.3288 - mean_squared_error: 0.2780 - val_loss: 0.0711 - val_accuracy: 0.3367 - val_mean_squared_error: 0.2802 - 65s/epoch - 238ms/step
Epoch 68/100
273/273 - 65s - loss: 0.0640 - accuracy: 0.2984 - mean_squared_error: 0.2516 - val_loss: 0.0693 - val_accuracy: 0.3246 - val_mean_squared_error: 0.2366 - 65s/epoch - 239ms/step
Epoch 69/100
273/273 - 65s - loss: 0.0680 - accuracy: 0.2613 - mean_squared_error: 0.2807 - val_loss: 0.0701 - val_accuracy: 0.3569 - val_mean_squared_error: 0.2638 - 65s/epoch - 238ms/step
Epoch 70/100
273/273 - 65s - loss: 0.0686 - accuracy: 0.3265 - mean_squared_error: 0.3211 - val_loss: 0.0740 - val_accuracy: 0.3921 - val_mean_squared_error: 0.2778 - 65s/epoch - 237ms/step
Epoch 71/100
273/273 - 74s - loss: 0.0672 - accuracy: 0.3555 - mean_squared_error: 0.3251 - val_loss: 0.0749 - val_accuracy: 0.4113 - val_mean_squared_error: 0.2667 - 74s/epoch - 272ms/step
Epoch 72/100
273/273 - 67s - loss: 0.0705 - accuracy: 0.3357 - mean_squared_error: 0.2775 - val_loss: 0.0645 - val_accuracy: 0.4244 - val_mean_squared_error: 0.2883 - 67s/epoch - 244ms/step
Epoch 73/100
273/273 - 67s - loss: 0.0699 - accuracy: 0.3340 - mean_squared_error: 0.2404 - val_loss: 0.0641 - val_accuracy: 0.3095 - val_mean_squared_error: 0.2269 - 67s/epoch - 245ms/step
Epoch 74/100
273/273 - 64s - loss: 0.0652 - accuracy: 0.3595 - mean_squared_error: 0.1920 - val_loss: 0.0727 - val_accuracy: 0.3347 - val_mean_squared_error: 0.1998 - 64s/epoch - 236ms/step
Epoch 75/100
273/273 - 64s - loss: 0.0636 - accuracy: 0.3223 - mean_squared_error: 0.1691 - val_loss: 0.0720 - val_accuracy: 0.4194 - val_mean_squared_error: 0.1668 - 64s/epoch - 234ms/step
Epoch 76/100
273/273 - 65s - loss: 0.0651 - accuracy: 0.2861 - mean_squared_error: 0.1805 - val_loss: 0.0642 - val_accuracy: 0.3075 - val_mean_squared_error: 0.1672 - 65s/epoch - 237ms/step
Epoch 77/100
273/273 - 65s - loss: 0.0643 - accuracy: 0.3236 - mean_squared_error: 0.1946 - val_loss: 0.0783 - val_accuracy: 0.2984 - val_mean_squared_error: 0.2034 - 65s/epoch - 238ms/step
Epoch 78/100
273/273 - 69s - loss: 0.0665 - accuracy: 0.3060 - mean_squared_error: 0.2178 - val_loss: 0.0610 - val_accuracy: 0.4062 - val_mean_squared_error: 0.2069 - 69s/epoch - 253ms/step
Epoch 79/100
273/273 - 66s - loss: 0.0693 - accuracy: 0.3365 - mean_squared_error: 0.2403 - val_loss: 0.0660 - val_accuracy: 0.1724 - val_mean_squared_error: 0.2642 - 66s/epoch - 240ms/step
Epoch 80/100
273/273 - 65s - loss: 0.0664 - accuracy: 0.3266 - mean_squared_error: 0.2821 - val_loss: 0.0701 - val_accuracy: 0.3760 - val_mean_squared_error: 0.2958 - 65s/epoch - 238ms/step
Epoch 81/100
273/273 - 66s - loss: 0.0682 - accuracy: 0.3284 - mean_squared_error: 0.3149 - val_loss: 0.0606 - val_accuracy: 0.3629 - val_mean_squared_error: 0.3332 - 66s/epoch - 242ms/step
Epoch 82/100
273/273 - 65s - loss: 0.0639 - accuracy: 0.3040 - mean_squared_error: 0.3689 - val_loss: 0.0837 - val_accuracy: 0.2873 - val_mean_squared_error: 0.3368 - 65s/epoch - 238ms/step
Epoch 83/100
273/273 - 67s - loss: 0.0665 - accuracy: 0.3527 - mean_squared_error: 0.3779 - val_loss: 0.0745 - val_accuracy: 0.3800 - val_mean_squared_error: 0.3371 - 67s/epoch - 245ms/step
Epoch 84/100
273/273 - 65s - loss: 0.0667 - accuracy: 0.3112 - mean_squared_error: 0.3316 - val_loss: 0.0710 - val_accuracy: 0.3014 - val_mean_squared_error: 0.3228 - 65s/epoch - 238ms/step
Epoch 85/100
273/273 - 64s - loss: 0.0667 - accuracy: 0.3740 - mean_squared_error: 0.3488 - val_loss: 0.0668 - val_accuracy: 0.3427 - val_mean_squared_error: 0.3286 - 64s/epoch - 233ms/step
Epoch 86/100
273/273 - 67s - loss: 0.0643 - accuracy: 0.3141 - mean_squared_error: 0.3490 - val_loss: 0.0712 - val_accuracy: 0.3014 - val_mean_squared_error: 0.3481 - 67s/epoch - 245ms/step
Epoch 87/100
273/273 - 67s - loss: 0.0669 - accuracy: 0.3489 - mean_squared_error: 0.3397 - val_loss: 0.0709 - val_accuracy: 0.2329 - val_mean_squared_error: 0.3535 - 67s/epoch - 245ms/step
Epoch 88/100
273/273 - 64s - loss: 0.0679 - accuracy: 0.2890 - mean_squared_error: 0.3618 - val_loss: 0.0746 - val_accuracy: 0.3317 - val_mean_squared_error: 0.3243 - 64s/epoch - 234ms/step
Epoch 89/100
273/273 - 66s - loss: 0.0660 - accuracy: 0.2800 - mean_squared_error: 0.3300 - val_loss: 0.0799 - val_accuracy: 0.3629 - val_mean_squared_error: 0.2948 - 66s/epoch - 242ms/step
Epoch 90/100
273/273 - 67s - loss: 0.0609 - accuracy: 0.3229 - mean_squared_error: 0.3272 - val_loss: 0.0653 - val_accuracy: 0.4173 - val_mean_squared_error: 0.3037 - 67s/epoch - 246ms/step
Epoch 91/100
273/273 - 65s - loss: 0.0670 - accuracy: 0.3171 - mean_squared_error: 0.3259 - val_loss: 0.0729 - val_accuracy: 0.3558 - val_mean_squared_error: 0.3458 - 65s/epoch - 238ms/step
Epoch 92/100
273/273 - 64s - loss: 0.0708 - accuracy: 0.3241 - mean_squared_error: 0.3214 - val_loss: 0.0700 - val_accuracy: 0.3821 - val_mean_squared_error: 0.3192 - 64s/epoch - 233ms/step
Epoch 93/100
273/273 - 65s - loss: 0.0710 - accuracy: 0.3372 - mean_squared_error: 0.3388 - val_loss: 0.0772 - val_accuracy: 0.3448 - val_mean_squared_error: 0.3001 - 65s/epoch - 238ms/step
Epoch 94/100
273/273 - 65s - loss: 0.0685 - accuracy: 0.3332 - mean_squared_error: 0.3457 - val_loss: 0.0728 - val_accuracy: 0.2601 - val_mean_squared_error: 0.3576 - 65s/epoch - 239ms/step
Epoch 95/100
273/273 - 64s - loss: 0.0638 - accuracy: 0.3078 - mean_squared_error: 0.3954 - val_loss: 0.0699 - val_accuracy: 0.4062 - val_mean_squared_error: 0.3673 - 64s/epoch - 234ms/step
Epoch 96/100
273/273 - 65s - loss: 0.0677 - accuracy: 0.2996 - mean_squared_error: 0.3849 - val_loss: 0.0619 - val_accuracy: 0.3014 - val_mean_squared_error: 0.3941 - 65s/epoch - 238ms/step
Epoch 97/100
273/273 - 65s - loss: 0.0714 - accuracy: 0.3308 - mean_squared_error: 0.3905 - val_loss: 0.0768 - val_accuracy: 0.4304 - val_mean_squared_error: 0.3058 - 65s/epoch - 238ms/step
Epoch 98/100
273/273 - 65s - loss: 0.0651 - accuracy: 0.3324 - mean_squared_error: 0.3744 - val_loss: 0.0701 - val_accuracy: 0.2611 - val_mean_squared_error: 0.3548 - 65s/epoch - 238ms/step
Epoch 99/100
273/273 - 67s - loss: 0.0717 - accuracy: 0.3085 - mean_squared_error: 0.3510 - val_loss: 0.0717 - val_accuracy: 0.3054 - val_mean_squared_error: 0.3221 - 67s/epoch - 245ms/step
Epoch 100/100
273/273 - 67s - loss: 0.0702 - accuracy: 0.3178 - mean_squared_error: 0.3564 - val_loss: 0.0784 - val_accuracy: 0.4909 - val_mean_squared_error: 0.3301 - 67s/epoch - 246ms/step
Traceback (most recent call last):
  File "/zhome/ab/7/153983/project/trainModelIter2.py", line 238, in <module>
    plt.savefig("{}/Graphs/{}_Image_{}.png".format(out_path, random_id_str, unique_name))
  File "/zhome/ab/7/153983/project/venv/lib/python3.10/site-packages/matplotlib/pyplot.py", line 944, in savefig
    res = fig.savefig(*args, **kwargs)
  File "/zhome/ab/7/153983/project/venv/lib/python3.10/site-packages/matplotlib/figure.py", line 3277, in savefig
    self.canvas.print_figure(fname, **kwargs)
  File "/zhome/ab/7/153983/project/venv/lib/python3.10/site-packages/matplotlib/backend_bases.py", line 2338, in print_figure
    result = print_method(
  File "/zhome/ab/7/153983/project/venv/lib/python3.10/site-packages/matplotlib/backend_bases.py", line 2204, in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
  File "/zhome/ab/7/153983/project/venv/lib/python3.10/site-packages/matplotlib/_api/deprecation.py", line 410, in wrapper
    return func(*inner_args, **inner_kwargs)
  File "/zhome/ab/7/153983/project/venv/lib/python3.10/site-packages/matplotlib/backends/backend_agg.py", line 520, in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
  File "/zhome/ab/7/153983/project/venv/lib/python3.10/site-packages/matplotlib/backends/backend_agg.py", line 467, in _print_pil
    mpl.image.imsave(
  File "/zhome/ab/7/153983/project/venv/lib/python3.10/site-packages/matplotlib/image.py", line 1656, in imsave
    image.save(fname, **pil_kwargs)
  File "/zhome/ab/7/153983/project/venv/lib/python3.10/site-packages/PIL/Image.py", line 2317, in save
    fp = builtins.open(filename, "w+b")
FileNotFoundError: [Errno 2] No such file or directory: 'iter3/Graphs/9774050697cb11ed9d9708f1ea952f1a_Image_RMSprop_square_abs_min_loss_0001.png'

------------------------------------------------------------
Sender: LSF System <lsfadmin@hpc.dtu.dk>
Subject: Job 15213431: <s202741-train> in cluster <dcc> Exited

Job <s202741-train> was submitted from host <n-62-20-1> by user <s202741> in cluster <dcc> at Wed Jan 18 23:53:44 2023
Job was executed on host(s) <4*n-62-20-10>, in queue <gpuv100>, as user <s202741> in cluster <dcc> at Thu Jan 19 08:33:23 2023
</zhome/ab/7/153983> was used as the home directory.
</zhome/ab/7/153983/project/scripts> was used as the working directory.
Started at Thu Jan 19 08:33:23 2023
Terminated at Thu Jan 19 10:24:07 2023
Results reported at Thu Jan 19 10:24:07 2023

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#!/bin/bash
### General options
### -- specify queue --   NOTE: TitanX is significantly faster than K80
#BSUB -q gpuv100
#BSUB -gpu "num=1:mode=exclusive_process"
### -- set the job Name --
#BSUB -J s202741-train
### -- ask for number of cores (default: 1) --
#BSUB -n 4
#BSUB -R "span[hosts=1]"
### -- set walltime limit: hh:mm --  maximum 24 hours for GPU-queues right now
#BSUB -W 2:00
# request 5GB of memory
#BSUB -R "rusage[mem=5GB]"
### -- Specify the output and error file. %J is the job-id --
### -- -o and -e mean append, -oo and -eo mean overwrite --
#BSUB -o iter3/Logs/RMSprop_square_abs_min_loss_0001%J.out
# -- end of LSF options --

# Necessary modules
cd ..
source venv/bin/activate

python trainModelIter2.py 100 "RMSprop(learning_rate=0.001)" "[\"accuracy\", tf.keras.metrics.MeanSquaredError(name=\"mean_squared_error\", dtype=None)]" "square_abs_min_loss" "black_background_500x500.csv" 2 "RMSprop_square_abs_min_loss_0001" "iter3"

    
------------------------------------------------------------

Exited with exit code 1.

Resource usage summary:

    CPU time :                                   8158.80 sec.
    Max Memory :                                 2940 MB
    Average Memory :                             2814.98 MB
    Total Requested Memory :                     20480.00 MB
    Delta Memory :                               17540.00 MB
    Max Swap :                                   -
    Max Processes :                              4
    Max Threads :                                33
    Run time :                                   6684 sec.
    Turnaround time :                            37823 sec.

The output (if any) is above this job summary.

