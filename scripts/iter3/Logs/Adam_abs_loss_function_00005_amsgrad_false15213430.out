Loaded dependency [python3/3.10.7]: gcc/11.3.0-binutils-2.38
Loaded module: python3/3.10.7

Loading python3/3.10.7
  Loading requirement: gcc/11.3.0-binutils-2.38
Loaded module: cuda/11.6
Loaded module: cudnn/v8.3.2.44-prod-cuda-11.X
2023-01-19 07:07:39.423866: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2023-01-19 07:07:40.986354: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer.so.7'; dlerror: libnvinfer.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /appl/cudnn/v8.3.2.44-prod-cuda-11.5/lib:/appl/cuda/11.6.0/lib64:/appl/python/3.10.7/lib:/appl/gcc/11.3.0-binutils-2.38/lib64:/appl/gcc/11.3.0-binutils-2.38/lib:/lsf/10.1/linux3.10-glibc2.17-x86_64/lib
2023-01-19 07:07:40.986994: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer_plugin.so.7'; dlerror: libnvinfer_plugin.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /appl/cudnn/v8.3.2.44-prod-cuda-11.5/lib:/appl/cuda/11.6.0/lib64:/appl/python/3.10.7/lib:/appl/gcc/11.3.0-binutils-2.38/lib64:/appl/gcc/11.3.0-binutils-2.38/lib:/lsf/10.1/linux3.10-glibc2.17-x86_64/lib
2023-01-19 07:07:40.987007: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Cannot dlopen some TensorRT libraries. If you would like to use Nvidia GPU with TensorRT, please make sure the missing libraries mentioned above are installed properly.
2023-01-19 07:07:44.246091: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2023-01-19 07:07:44.930532: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1613] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 30961 MB memory:  -> device: 0, name: Tesla V100-SXM2-32GB, pci bus id: 0000:15:00.0, compute capability: 7.0
Epochs:  100
Optimizer:  Adam(learning_rate=0.0005, amsgrad=False)
Metrics:  ["accuracy", tf.keras.metrics.MeanSquaredError(name="mean_squared_error", dtype=None)]
Loss function name:  abs_loss_function
Csv file used:  black_background_500x500.csv
Verbose:  2
Unique name:  Adam_abs_loss_function_00005_amsgrad_false
Output folder:  iter3
 ################ MODEL ############### 
 
inputs = keras.Input(shape=(input_size, input_size, 1))
x = layers.Conv2D(filters=32, kernel_size=3, activation="relu")(inputs)
x = layers.Conv2D(filters=32, kernel_size=3, activation="relu")(x)
x = layers.MaxPooling2D(pool_size=4)(x)
x = layers.Conv2D(filters=32, kernel_size=3, activation="relu")(x)
x = layers.Conv2D(filters=32, kernel_size=3, activation="relu")(x)
x = layers.MaxPooling2D(pool_size=4)(x)
x = layers.Conv2D(filters=32, kernel_size=3, activation="relu")(x)
x = layers.Conv2D(filters=32, kernel_size=3, activation="relu")(x)
x = layers.MaxPooling2D(pool_size=4)(x)
x = layers.Flatten()(x)
x = layers.Dense(128, activation="relu")(x)
x = layers.Dense(16, activation="relu")(x)
outputs = layers.Dense(3)(x)


Model: "model"
_________________________________________________________________
 Layer (type)                Output Shape              Param #   
=================================================================
 input_1 (InputLayer)        [(None, 500, 500, 1)]     0         
                                                                 
 conv2d (Conv2D)             (None, 498, 498, 32)      320       
                                                                 
 conv2d_1 (Conv2D)           (None, 496, 496, 32)      9248      
                                                                 
 max_pooling2d (MaxPooling2D  (None, 124, 124, 32)     0         
 )                                                               
                                                                 
 conv2d_2 (Conv2D)           (None, 122, 122, 32)      9248      
                                                                 
 conv2d_3 (Conv2D)           (None, 120, 120, 32)      9248      
                                                                 
 max_pooling2d_1 (MaxPooling  (None, 30, 30, 32)       0         
 2D)                                                             
                                                                 
 conv2d_4 (Conv2D)           (None, 28, 28, 32)        9248      
                                                                 
 conv2d_5 (Conv2D)           (None, 26, 26, 32)        9248      
                                                                 
 max_pooling2d_2 (MaxPooling  (None, 6, 6, 32)         0         
 2D)                                                             
                                                                 
 flatten (Flatten)           (None, 1152)              0         
                                                                 
 dense (Dense)               (None, 128)               147584    
                                                                 
 dense_1 (Dense)             (None, 16)                2064      
                                                                 
 dense_2 (Dense)             (None, 3)                 51        
                                                                 
=================================================================
Total params: 196,259
Trainable params: 196,259
Non-trainable params: 0
_________________________________________________________________
/zhome/ab/7/153983/project/venv/lib/python3.10/site-packages/keras/utils/image_utils.py:409: UserWarning: grayscale is deprecated. Please use color_mode = "grayscale"
  warnings.warn(
Epoch 1/100
2023-01-19 07:07:47.355293: I tensorflow/compiler/xla/stream_executor/cuda/cuda_dnn.cc:428] Loaded cuDNN version 8302
273/273 - 71s - loss: 0.2399 - accuracy: 0.3143 - mean_squared_error: 0.3813 - val_loss: 0.2626 - val_accuracy: 0.2923 - val_mean_squared_error: 0.3025 - 71s/epoch - 260ms/step
Epoch 2/100
273/273 - 69s - loss: 0.2375 - accuracy: 0.3243 - mean_squared_error: 0.3462 - val_loss: 0.2399 - val_accuracy: 0.3800 - val_mean_squared_error: 0.3611 - 69s/epoch - 253ms/step
Epoch 3/100
273/273 - 68s - loss: 0.2457 - accuracy: 0.3507 - mean_squared_error: 0.3892 - val_loss: 0.2367 - val_accuracy: 0.2671 - val_mean_squared_error: 0.4417 - 68s/epoch - 251ms/step
Epoch 4/100
273/273 - 69s - loss: 0.2420 - accuracy: 0.3060 - mean_squared_error: 0.4122 - val_loss: 0.2604 - val_accuracy: 0.3488 - val_mean_squared_error: 0.3785 - 69s/epoch - 252ms/step
Epoch 5/100
273/273 - 69s - loss: 0.2453 - accuracy: 0.3095 - mean_squared_error: 0.4179 - val_loss: 0.2439 - val_accuracy: 0.4546 - val_mean_squared_error: 0.4421 - 69s/epoch - 251ms/step
Epoch 6/100
273/273 - 68s - loss: 0.2442 - accuracy: 0.3308 - mean_squared_error: 0.4137 - val_loss: 0.2492 - val_accuracy: 0.3014 - val_mean_squared_error: 0.4119 - 68s/epoch - 250ms/step
Epoch 7/100
273/273 - 68s - loss: 0.2402 - accuracy: 0.3415 - mean_squared_error: 0.4792 - val_loss: 0.2509 - val_accuracy: 0.2681 - val_mean_squared_error: 0.4432 - 68s/epoch - 250ms/step
Epoch 8/100
273/273 - 70s - loss: 0.2351 - accuracy: 0.3045 - mean_squared_error: 0.5029 - val_loss: 0.2455 - val_accuracy: 0.3780 - val_mean_squared_error: 0.5168 - 70s/epoch - 255ms/step
Epoch 9/100
273/273 - 70s - loss: 0.2439 - accuracy: 0.2640 - mean_squared_error: 0.6140 - val_loss: 0.2682 - val_accuracy: 0.3377 - val_mean_squared_error: 0.5911 - 70s/epoch - 255ms/step
Epoch 10/100
273/273 - 70s - loss: 0.2418 - accuracy: 0.3181 - mean_squared_error: 0.3537 - val_loss: 0.2554 - val_accuracy: 0.3357 - val_mean_squared_error: 0.2315 - 70s/epoch - 255ms/step
Epoch 11/100
273/273 - 68s - loss: 0.2468 - accuracy: 0.3177 - mean_squared_error: 0.2981 - val_loss: 0.2517 - val_accuracy: 0.2681 - val_mean_squared_error: 0.3353 - 68s/epoch - 250ms/step
Epoch 12/100
273/273 - 68s - loss: 0.2399 - accuracy: 0.3315 - mean_squared_error: 0.2805 - val_loss: 0.2529 - val_accuracy: 0.3569 - val_mean_squared_error: 0.3252 - 68s/epoch - 249ms/step
Epoch 13/100
273/273 - 68s - loss: 0.2423 - accuracy: 0.2873 - mean_squared_error: 0.2661 - val_loss: 0.2617 - val_accuracy: 0.4244 - val_mean_squared_error: 0.2043 - 68s/epoch - 249ms/step
Epoch 14/100
273/273 - 67s - loss: 0.2447 - accuracy: 0.3576 - mean_squared_error: 0.2498 - val_loss: 0.2422 - val_accuracy: 0.3871 - val_mean_squared_error: 0.1856 - 67s/epoch - 244ms/step
Epoch 15/100
273/273 - 69s - loss: 0.2411 - accuracy: 0.3502 - mean_squared_error: 0.2975 - val_loss: 0.2473 - val_accuracy: 0.3962 - val_mean_squared_error: 0.3008 - 69s/epoch - 254ms/step
Epoch 16/100
273/273 - 69s - loss: 0.2397 - accuracy: 0.3340 - mean_squared_error: 0.3038 - val_loss: 0.2611 - val_accuracy: 0.3296 - val_mean_squared_error: 0.3102 - 69s/epoch - 253ms/step
Epoch 17/100
273/273 - 69s - loss: 0.2378 - accuracy: 0.3163 - mean_squared_error: 0.2613 - val_loss: 0.2715 - val_accuracy: 0.4657 - val_mean_squared_error: 0.2522 - 69s/epoch - 252ms/step
Epoch 18/100
273/273 - 69s - loss: 0.2439 - accuracy: 0.3314 - mean_squared_error: 0.3647 - val_loss: 0.2473 - val_accuracy: 0.3165 - val_mean_squared_error: 0.4771 - 69s/epoch - 252ms/step
Epoch 19/100
273/273 - 69s - loss: 0.2365 - accuracy: 0.4198 - mean_squared_error: 0.4841 - val_loss: 0.2534 - val_accuracy: 0.3206 - val_mean_squared_error: 0.5643 - 69s/epoch - 253ms/step
Epoch 20/100
273/273 - 67s - loss: 0.2467 - accuracy: 0.3138 - mean_squared_error: 0.4251 - val_loss: 0.2526 - val_accuracy: 0.3256 - val_mean_squared_error: 0.4100 - 67s/epoch - 244ms/step
Epoch 21/100
273/273 - 66s - loss: 0.2339 - accuracy: 0.3684 - mean_squared_error: 0.4206 - val_loss: 0.2368 - val_accuracy: 0.3810 - val_mean_squared_error: 0.4372 - 66s/epoch - 243ms/step
Epoch 22/100
273/273 - 67s - loss: 0.2377 - accuracy: 0.3546 - mean_squared_error: 0.2745 - val_loss: 0.2399 - val_accuracy: 0.3861 - val_mean_squared_error: 0.2382 - 67s/epoch - 247ms/step
Epoch 23/100
273/273 - 67s - loss: 0.2089 - accuracy: 0.2869 - mean_squared_error: 0.4380 - val_loss: 0.2425 - val_accuracy: 0.3276 - val_mean_squared_error: 0.5580 - 67s/epoch - 244ms/step
Epoch 24/100
273/273 - 66s - loss: 0.1651 - accuracy: 0.2806 - mean_squared_error: 0.5741 - val_loss: 0.2642 - val_accuracy: 0.4395 - val_mean_squared_error: 0.5453 - 66s/epoch - 243ms/step
Epoch 25/100
273/273 - 68s - loss: 0.1332 - accuracy: 0.3591 - mean_squared_error: 0.4395 - val_loss: 0.2641 - val_accuracy: 0.3226 - val_mean_squared_error: 0.4853 - 68s/epoch - 248ms/step
Epoch 26/100
273/273 - 67s - loss: 0.1180 - accuracy: 0.3389 - mean_squared_error: 0.4099 - val_loss: 0.2523 - val_accuracy: 0.2702 - val_mean_squared_error: 0.2885 - 67s/epoch - 244ms/step
Epoch 27/100
273/273 - 66s - loss: 0.1159 - accuracy: 0.3455 - mean_squared_error: 0.3793 - val_loss: 0.2566 - val_accuracy: 0.4103 - val_mean_squared_error: 0.2872 - 66s/epoch - 240ms/step
Epoch 28/100
273/273 - 66s - loss: 0.1091 - accuracy: 0.3834 - mean_squared_error: 0.3360 - val_loss: 0.2437 - val_accuracy: 0.2601 - val_mean_squared_error: 0.3194 - 66s/epoch - 242ms/step
Epoch 29/100
273/273 - 68s - loss: 0.1102 - accuracy: 0.3533 - mean_squared_error: 0.3469 - val_loss: 0.2470 - val_accuracy: 0.3185 - val_mean_squared_error: 0.3212 - 68s/epoch - 247ms/step
Epoch 30/100
273/273 - 69s - loss: 0.1006 - accuracy: 0.3972 - mean_squared_error: 0.3574 - val_loss: 0.2522 - val_accuracy: 0.4204 - val_mean_squared_error: 0.3240 - 69s/epoch - 254ms/step
Epoch 31/100
273/273 - 68s - loss: 0.0969 - accuracy: 0.3615 - mean_squared_error: 0.3318 - val_loss: 0.2530 - val_accuracy: 0.3861 - val_mean_squared_error: 0.2461 - 68s/epoch - 250ms/step
Epoch 32/100
273/273 - 68s - loss: 0.0962 - accuracy: 0.3750 - mean_squared_error: 0.3471 - val_loss: 0.2743 - val_accuracy: 0.3175 - val_mean_squared_error: 0.2550 - 68s/epoch - 250ms/step
Epoch 33/100
273/273 - 68s - loss: 0.0994 - accuracy: 0.3336 - mean_squared_error: 0.3821 - val_loss: 0.2382 - val_accuracy: 0.1935 - val_mean_squared_error: 0.3519 - 68s/epoch - 250ms/step
Epoch 34/100
273/273 - 66s - loss: 0.0943 - accuracy: 0.4038 - mean_squared_error: 0.3583 - val_loss: 0.2424 - val_accuracy: 0.2359 - val_mean_squared_error: 0.3139 - 66s/epoch - 240ms/step
Epoch 35/100
273/273 - 66s - loss: 0.0963 - accuracy: 0.3898 - mean_squared_error: 0.3857 - val_loss: 0.2565 - val_accuracy: 0.3548 - val_mean_squared_error: 0.2957 - 66s/epoch - 240ms/step
Epoch 36/100
273/273 - 65s - loss: 0.0940 - accuracy: 0.4180 - mean_squared_error: 0.3365 - val_loss: 0.2505 - val_accuracy: 0.3206 - val_mean_squared_error: 0.3357 - 65s/epoch - 239ms/step
Epoch 37/100
273/273 - 65s - loss: 0.0977 - accuracy: 0.4040 - mean_squared_error: 0.3904 - val_loss: 0.2220 - val_accuracy: 0.3861 - val_mean_squared_error: 0.2721 - 65s/epoch - 239ms/step
Epoch 38/100
273/273 - 68s - loss: 0.0941 - accuracy: 0.3567 - mean_squared_error: 0.4036 - val_loss: 0.2418 - val_accuracy: 0.3821 - val_mean_squared_error: 0.2886 - 68s/epoch - 250ms/step
Epoch 39/100
273/273 - 67s - loss: 0.0921 - accuracy: 0.3717 - mean_squared_error: 0.3794 - val_loss: 0.2724 - val_accuracy: 0.4950 - val_mean_squared_error: 0.2537 - 67s/epoch - 247ms/step
Epoch 40/100
273/273 - 69s - loss: 0.0891 - accuracy: 0.3634 - mean_squared_error: 0.4084 - val_loss: 0.2553 - val_accuracy: 0.2349 - val_mean_squared_error: 0.3652 - 69s/epoch - 252ms/step
Epoch 41/100
273/273 - 66s - loss: 0.0886 - accuracy: 0.3617 - mean_squared_error: 0.3846 - val_loss: 0.2476 - val_accuracy: 0.3347 - val_mean_squared_error: 0.3174 - 66s/epoch - 242ms/step
Epoch 42/100
273/273 - 66s - loss: 0.0834 - accuracy: 0.3720 - mean_squared_error: 0.3811 - val_loss: 0.2206 - val_accuracy: 0.3105 - val_mean_squared_error: 0.3603 - 66s/epoch - 241ms/step
Epoch 43/100
273/273 - 68s - loss: 0.0885 - accuracy: 0.3664 - mean_squared_error: 0.4560 - val_loss: 0.2558 - val_accuracy: 0.2702 - val_mean_squared_error: 0.5010 - 68s/epoch - 248ms/step
Epoch 44/100
273/273 - 67s - loss: 0.0850 - accuracy: 0.3577 - mean_squared_error: 0.4281 - val_loss: 0.2552 - val_accuracy: 0.3155 - val_mean_squared_error: 0.4151 - 67s/epoch - 246ms/step
Epoch 45/100
273/273 - 68s - loss: 0.0873 - accuracy: 0.4048 - mean_squared_error: 0.3952 - val_loss: 0.2494 - val_accuracy: 0.1835 - val_mean_squared_error: 0.3532 - 68s/epoch - 250ms/step
Epoch 46/100
273/273 - 66s - loss: 0.0874 - accuracy: 0.3282 - mean_squared_error: 0.4092 - val_loss: 0.2374 - val_accuracy: 0.1835 - val_mean_squared_error: 0.3502 - 66s/epoch - 241ms/step
Epoch 47/100
273/273 - 69s - loss: 0.0880 - accuracy: 0.3819 - mean_squared_error: 0.4222 - val_loss: 0.2435 - val_accuracy: 0.3417 - val_mean_squared_error: 0.3575 - 69s/epoch - 253ms/step
Epoch 48/100
273/273 - 65s - loss: 0.0878 - accuracy: 0.3724 - mean_squared_error: 0.4322 - val_loss: 0.2584 - val_accuracy: 0.3095 - val_mean_squared_error: 0.3470 - 65s/epoch - 237ms/step
Epoch 49/100
273/273 - 69s - loss: 0.0865 - accuracy: 0.3654 - mean_squared_error: 0.3599 - val_loss: 0.2450 - val_accuracy: 0.2964 - val_mean_squared_error: 0.2512 - 69s/epoch - 251ms/step
Epoch 50/100
273/273 - 66s - loss: 0.0826 - accuracy: 0.4168 - mean_squared_error: 0.3795 - val_loss: 0.2329 - val_accuracy: 0.5373 - val_mean_squared_error: 0.2464 - 66s/epoch - 242ms/step
Epoch 51/100
273/273 - 66s - loss: 0.0855 - accuracy: 0.4344 - mean_squared_error: 0.3723 - val_loss: 0.2565 - val_accuracy: 0.3236 - val_mean_squared_error: 0.4389 - 66s/epoch - 241ms/step
Epoch 52/100
273/273 - 67s - loss: 0.0841 - accuracy: 0.4064 - mean_squared_error: 0.3914 - val_loss: 0.2534 - val_accuracy: 0.2833 - val_mean_squared_error: 0.2399 - 67s/epoch - 247ms/step
Epoch 53/100
273/273 - 66s - loss: 0.0835 - accuracy: 0.4382 - mean_squared_error: 0.3739 - val_loss: 0.2765 - val_accuracy: 0.3075 - val_mean_squared_error: 0.3073 - 66s/epoch - 241ms/step
Epoch 54/100
273/273 - 66s - loss: 0.0825 - accuracy: 0.3956 - mean_squared_error: 0.4151 - val_loss: 0.2512 - val_accuracy: 0.3075 - val_mean_squared_error: 0.4179 - 66s/epoch - 241ms/step
Epoch 55/100
273/273 - 66s - loss: 0.0835 - accuracy: 0.3993 - mean_squared_error: 0.3718 - val_loss: 0.2354 - val_accuracy: 0.2792 - val_mean_squared_error: 0.3472 - 66s/epoch - 244ms/step
Epoch 56/100
273/273 - 69s - loss: 0.0786 - accuracy: 0.4185 - mean_squared_error: 0.3861 - val_loss: 0.2535 - val_accuracy: 0.4385 - val_mean_squared_error: 0.2907 - 69s/epoch - 254ms/step
Epoch 57/100
273/273 - 68s - loss: 0.0796 - accuracy: 0.4051 - mean_squared_error: 0.3613 - val_loss: 0.2467 - val_accuracy: 0.3075 - val_mean_squared_error: 0.3042 - 68s/epoch - 248ms/step
Epoch 58/100
273/273 - 68s - loss: 0.0776 - accuracy: 0.4191 - mean_squared_error: 0.3812 - val_loss: 0.2445 - val_accuracy: 0.3972 - val_mean_squared_error: 0.3275 - 68s/epoch - 251ms/step
Epoch 59/100
273/273 - 67s - loss: 0.0807 - accuracy: 0.3749 - mean_squared_error: 0.4004 - val_loss: 0.2546 - val_accuracy: 0.2581 - val_mean_squared_error: 0.3689 - 67s/epoch - 247ms/step
Epoch 60/100
273/273 - 66s - loss: 0.0800 - accuracy: 0.3882 - mean_squared_error: 0.4095 - val_loss: 0.2674 - val_accuracy: 0.2974 - val_mean_squared_error: 0.3684 - 66s/epoch - 243ms/step
Epoch 61/100
273/273 - 66s - loss: 0.0792 - accuracy: 0.3934 - mean_squared_error: 0.4091 - val_loss: 0.2614 - val_accuracy: 0.3135 - val_mean_squared_error: 0.3307 - 66s/epoch - 242ms/step
Epoch 62/100
273/273 - 68s - loss: 0.0807 - accuracy: 0.4235 - mean_squared_error: 0.3473 - val_loss: 0.2326 - val_accuracy: 0.2379 - val_mean_squared_error: 0.2756 - 68s/epoch - 249ms/step
Epoch 63/100
273/273 - 68s - loss: 0.0786 - accuracy: 0.4291 - mean_squared_error: 0.3819 - val_loss: 0.2386 - val_accuracy: 0.3528 - val_mean_squared_error: 0.3316 - 68s/epoch - 248ms/step
Epoch 64/100
273/273 - 68s - loss: 0.0803 - accuracy: 0.4049 - mean_squared_error: 0.3975 - val_loss: 0.2272 - val_accuracy: 0.2782 - val_mean_squared_error: 0.3115 - 68s/epoch - 250ms/step
Epoch 65/100
273/273 - 65s - loss: 0.0796 - accuracy: 0.3816 - mean_squared_error: 0.3577 - val_loss: 0.2354 - val_accuracy: 0.2571 - val_mean_squared_error: 0.3589 - 65s/epoch - 240ms/step
Epoch 66/100
273/273 - 68s - loss: 0.0766 - accuracy: 0.4253 - mean_squared_error: 0.3350 - val_loss: 0.2615 - val_accuracy: 0.3599 - val_mean_squared_error: 0.2602 - 68s/epoch - 248ms/step
Epoch 67/100
273/273 - 68s - loss: 0.0829 - accuracy: 0.3988 - mean_squared_error: 0.3635 - val_loss: 0.2477 - val_accuracy: 0.3952 - val_mean_squared_error: 0.2817 - 68s/epoch - 248ms/step
Epoch 68/100
273/273 - 69s - loss: 0.0786 - accuracy: 0.4123 - mean_squared_error: 0.3696 - val_loss: 0.2698 - val_accuracy: 0.3256 - val_mean_squared_error: 0.3470 - 69s/epoch - 251ms/step
Epoch 69/100
273/273 - 69s - loss: 0.0782 - accuracy: 0.4345 - mean_squared_error: 0.3463 - val_loss: 0.2416 - val_accuracy: 0.3458 - val_mean_squared_error: 0.3238 - 69s/epoch - 251ms/step
Epoch 70/100
273/273 - 69s - loss: 0.0805 - accuracy: 0.4013 - mean_squared_error: 0.3805 - val_loss: 0.2483 - val_accuracy: 0.3105 - val_mean_squared_error: 0.3299 - 69s/epoch - 253ms/step
Epoch 71/100
273/273 - 66s - loss: 0.0781 - accuracy: 0.3592 - mean_squared_error: 0.3952 - val_loss: 0.2409 - val_accuracy: 0.3528 - val_mean_squared_error: 0.3624 - 66s/epoch - 241ms/step
Epoch 72/100
273/273 - 66s - loss: 0.0833 - accuracy: 0.3925 - mean_squared_error: 0.3748 - val_loss: 0.2668 - val_accuracy: 0.2581 - val_mean_squared_error: 0.3431 - 66s/epoch - 242ms/step
Epoch 73/100
273/273 - 66s - loss: 0.0813 - accuracy: 0.3998 - mean_squared_error: 0.3669 - val_loss: 0.2356 - val_accuracy: 0.2369 - val_mean_squared_error: 0.2418 - 66s/epoch - 242ms/step
Epoch 74/100
273/273 - 66s - loss: 0.0790 - accuracy: 0.4318 - mean_squared_error: 0.3512 - val_loss: 0.2493 - val_accuracy: 0.2379 - val_mean_squared_error: 0.3031 - 66s/epoch - 243ms/step
Epoch 75/100
273/273 - 66s - loss: 0.0771 - accuracy: 0.3852 - mean_squared_error: 0.3636 - val_loss: 0.2239 - val_accuracy: 0.1552 - val_mean_squared_error: 0.3407 - 66s/epoch - 243ms/step
Epoch 76/100
273/273 - 66s - loss: 0.0751 - accuracy: 0.3618 - mean_squared_error: 0.4393 - val_loss: 0.2702 - val_accuracy: 0.2954 - val_mean_squared_error: 0.3377 - 66s/epoch - 243ms/step
Epoch 77/100
273/273 - 65s - loss: 0.0819 - accuracy: 0.3735 - mean_squared_error: 0.3946 - val_loss: 0.2532 - val_accuracy: 0.2500 - val_mean_squared_error: 0.3161 - 65s/epoch - 237ms/step
Epoch 78/100
273/273 - 69s - loss: 0.0785 - accuracy: 0.3707 - mean_squared_error: 0.3900 - val_loss: 0.2406 - val_accuracy: 0.3105 - val_mean_squared_error: 0.2762 - 69s/epoch - 251ms/step
Epoch 79/100
273/273 - 65s - loss: 0.0744 - accuracy: 0.3771 - mean_squared_error: 0.3844 - val_loss: 0.2305 - val_accuracy: 0.3599 - val_mean_squared_error: 0.3139 - 65s/epoch - 239ms/step
Epoch 80/100
273/273 - 67s - loss: 0.0811 - accuracy: 0.3835 - mean_squared_error: 0.3720 - val_loss: 0.2558 - val_accuracy: 0.1774 - val_mean_squared_error: 0.3336 - 67s/epoch - 245ms/step
Epoch 81/100
273/273 - 69s - loss: 0.0782 - accuracy: 0.3868 - mean_squared_error: 0.4068 - val_loss: 0.2545 - val_accuracy: 0.2853 - val_mean_squared_error: 0.3523 - 69s/epoch - 252ms/step
Epoch 82/100
273/273 - 69s - loss: 0.0716 - accuracy: 0.3576 - mean_squared_error: 0.4007 - val_loss: 0.2604 - val_accuracy: 0.2752 - val_mean_squared_error: 0.2789 - 69s/epoch - 253ms/step
Epoch 83/100
273/273 - 66s - loss: 0.0722 - accuracy: 0.3774 - mean_squared_error: 0.3857 - val_loss: 0.2419 - val_accuracy: 0.2853 - val_mean_squared_error: 0.2745 - 66s/epoch - 240ms/step
Epoch 84/100
273/273 - 67s - loss: 0.0749 - accuracy: 0.3386 - mean_squared_error: 0.3925 - val_loss: 0.2597 - val_accuracy: 0.3690 - val_mean_squared_error: 0.2529 - 67s/epoch - 245ms/step
Epoch 85/100
273/273 - 69s - loss: 0.0724 - accuracy: 0.4029 - mean_squared_error: 0.4025 - val_loss: 0.2475 - val_accuracy: 0.2621 - val_mean_squared_error: 0.3215 - 69s/epoch - 251ms/step
Epoch 86/100
273/273 - 66s - loss: 0.0716 - accuracy: 0.3582 - mean_squared_error: 0.3870 - val_loss: 0.2401 - val_accuracy: 0.4567 - val_mean_squared_error: 0.2612 - 66s/epoch - 241ms/step
Epoch 87/100
273/273 - 68s - loss: 0.0752 - accuracy: 0.4098 - mean_squared_error: 0.3762 - val_loss: 0.2637 - val_accuracy: 0.3579 - val_mean_squared_error: 0.2835 - 68s/epoch - 249ms/step
Epoch 88/100
273/273 - 66s - loss: 0.0722 - accuracy: 0.3735 - mean_squared_error: 0.3666 - val_loss: 0.2434 - val_accuracy: 0.3518 - val_mean_squared_error: 0.3223 - 66s/epoch - 243ms/step
Epoch 89/100
273/273 - 66s - loss: 0.0757 - accuracy: 0.4119 - mean_squared_error: 0.3527 - val_loss: 0.2494 - val_accuracy: 0.3619 - val_mean_squared_error: 0.2843 - 66s/epoch - 243ms/step
Epoch 90/100
273/273 - 66s - loss: 0.0729 - accuracy: 0.4261 - mean_squared_error: 0.3633 - val_loss: 0.2535 - val_accuracy: 0.2016 - val_mean_squared_error: 0.2958 - 66s/epoch - 242ms/step
Epoch 91/100
273/273 - 68s - loss: 0.0729 - accuracy: 0.3914 - mean_squared_error: 0.4099 - val_loss: 0.2330 - val_accuracy: 0.3034 - val_mean_squared_error: 0.3487 - 68s/epoch - 250ms/step
Epoch 92/100
273/273 - 68s - loss: 0.0759 - accuracy: 0.3605 - mean_squared_error: 0.3989 - val_loss: 0.2475 - val_accuracy: 0.3478 - val_mean_squared_error: 0.3056 - 68s/epoch - 250ms/step
Epoch 93/100
273/273 - 67s - loss: 0.0768 - accuracy: 0.3255 - mean_squared_error: 0.3932 - val_loss: 0.2400 - val_accuracy: 0.2621 - val_mean_squared_error: 0.4124 - 67s/epoch - 247ms/step
Epoch 94/100
273/273 - 63s - loss: 0.0713 - accuracy: 0.4112 - mean_squared_error: 0.3757 - val_loss: 0.2745 - val_accuracy: 0.1694 - val_mean_squared_error: 0.3489 - 63s/epoch - 231ms/step
Epoch 95/100
273/273 - 67s - loss: 0.0726 - accuracy: 0.3684 - mean_squared_error: 0.3845 - val_loss: 0.2336 - val_accuracy: 0.4002 - val_mean_squared_error: 0.2519 - 67s/epoch - 246ms/step
Epoch 96/100
273/273 - 68s - loss: 0.0719 - accuracy: 0.3464 - mean_squared_error: 0.4275 - val_loss: 0.2784 - val_accuracy: 0.2571 - val_mean_squared_error: 0.3779 - 68s/epoch - 250ms/step
Epoch 97/100
273/273 - 69s - loss: 0.0710 - accuracy: 0.4317 - mean_squared_error: 0.3909 - val_loss: 0.2521 - val_accuracy: 0.3377 - val_mean_squared_error: 0.3085 - 69s/epoch - 254ms/step
Epoch 98/100
273/273 - 66s - loss: 0.0741 - accuracy: 0.3806 - mean_squared_error: 0.3878 - val_loss: 0.2386 - val_accuracy: 0.4143 - val_mean_squared_error: 0.2818 - 66s/epoch - 241ms/step
Epoch 99/100
273/273 - 66s - loss: 0.0725 - accuracy: 0.3978 - mean_squared_error: 0.3770 - val_loss: 0.2449 - val_accuracy: 0.2440 - val_mean_squared_error: 0.2853 - 66s/epoch - 242ms/step
Epoch 100/100
273/273 - 66s - loss: 0.0728 - accuracy: 0.3375 - mean_squared_error: 0.4148 - val_loss: 0.2479 - val_accuracy: 0.2560 - val_mean_squared_error: 0.3575 - 66s/epoch - 242ms/step
Traceback (most recent call last):
  File "/zhome/ab/7/153983/project/trainModelIter2.py", line 238, in <module>
    plt.savefig("{}/Graphs/{}_Image_{}.png".format(out_path, random_id_str, unique_name))
  File "/zhome/ab/7/153983/project/venv/lib/python3.10/site-packages/matplotlib/pyplot.py", line 944, in savefig
    res = fig.savefig(*args, **kwargs)
  File "/zhome/ab/7/153983/project/venv/lib/python3.10/site-packages/matplotlib/figure.py", line 3277, in savefig
    self.canvas.print_figure(fname, **kwargs)
  File "/zhome/ab/7/153983/project/venv/lib/python3.10/site-packages/matplotlib/backend_bases.py", line 2338, in print_figure
    result = print_method(
  File "/zhome/ab/7/153983/project/venv/lib/python3.10/site-packages/matplotlib/backend_bases.py", line 2204, in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
  File "/zhome/ab/7/153983/project/venv/lib/python3.10/site-packages/matplotlib/_api/deprecation.py", line 410, in wrapper
    return func(*inner_args, **inner_kwargs)
  File "/zhome/ab/7/153983/project/venv/lib/python3.10/site-packages/matplotlib/backends/backend_agg.py", line 520, in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
  File "/zhome/ab/7/153983/project/venv/lib/python3.10/site-packages/matplotlib/backends/backend_agg.py", line 467, in _print_pil
    mpl.image.imsave(
  File "/zhome/ab/7/153983/project/venv/lib/python3.10/site-packages/matplotlib/image.py", line 1656, in imsave
    image.save(fname, **pil_kwargs)
  File "/zhome/ab/7/153983/project/venv/lib/python3.10/site-packages/PIL/Image.py", line 2317, in save
    fp = builtins.open(filename, "w+b")
FileNotFoundError: [Errno 2] No such file or directory: 'iter3/Graphs/975f5f0497bf11ed93f9b883034fb9c2_Image_Adam_abs_loss_function_00005_amsgrad_false.png'

------------------------------------------------------------
Sender: LSF System <lsfadmin@hpc.dtu.dk>
Subject: Job 15213430: <s202741-train> in cluster <dcc> Exited

Job <s202741-train> was submitted from host <n-62-20-1> by user <s202741> in cluster <dcc> at Wed Jan 18 23:53:43 2023
Job was executed on host(s) <4*n-62-20-11>, in queue <gpuv100>, as user <s202741> in cluster <dcc> at Thu Jan 19 07:07:36 2023
</zhome/ab/7/153983> was used as the home directory.
</zhome/ab/7/153983/project/scripts> was used as the working directory.
Started at Thu Jan 19 07:07:36 2023
Terminated at Thu Jan 19 09:00:03 2023
Results reported at Thu Jan 19 09:00:03 2023

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#!/bin/bash
### General options
### -- specify queue --   NOTE: TitanX is significantly faster than K80
#BSUB -q gpuv100
#BSUB -gpu "num=1:mode=exclusive_process"
### -- set the job Name --
#BSUB -J s202741-train
### -- ask for number of cores (default: 1) --
#BSUB -n 4
#BSUB -R "span[hosts=1]"
### -- set walltime limit: hh:mm --  maximum 24 hours for GPU-queues right now
#BSUB -W 2:00
# request 5GB of memory
#BSUB -R "rusage[mem=5GB]"
### -- Specify the output and error file. %J is the job-id --
### -- -o and -e mean append, -oo and -eo mean overwrite --
#BSUB -o iter3/Logs/Adam_abs_loss_function_00005_amsgrad_false%J.out
# -- end of LSF options --

# Necessary modules
cd ..
source venv/bin/activate

python trainModelIter2.py 100 "Adam(learning_rate=0.0005, amsgrad=False)" "[\"accuracy\", tf.keras.metrics.MeanSquaredError(name=\"mean_squared_error\", dtype=None)]" "abs_loss_function" "black_background_500x500.csv" 2 "Adam_abs_loss_function_00005_amsgrad_false" "iter3"

    
------------------------------------------------------------

Exited with exit code 1.

Resource usage summary:

    CPU time :                                   8284.14 sec.
    Max Memory :                                 2941 MB
    Average Memory :                             2853.59 MB
    Total Requested Memory :                     20480.00 MB
    Delta Memory :                               17539.00 MB
    Max Swap :                                   2 MB
    Max Processes :                              4
    Max Threads :                                33
    Run time :                                   6748 sec.
    Turnaround time :                            32780 sec.

The output (if any) is above this job summary.

