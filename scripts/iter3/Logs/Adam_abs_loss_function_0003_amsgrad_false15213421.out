Loaded dependency [python3/3.10.7]: gcc/11.3.0-binutils-2.38
Loaded module: python3/3.10.7

Loading python3/3.10.7
  Loading requirement: gcc/11.3.0-binutils-2.38
Loaded module: cuda/11.6
Loaded module: cudnn/v8.3.2.44-prod-cuda-11.X
2023-01-19 03:12:04.223816: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2023-01-19 03:12:09.981343: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer.so.7'; dlerror: libnvinfer.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /appl/cudnn/v8.3.2.44-prod-cuda-11.5/lib:/appl/cuda/11.6.0/lib64:/appl/python/3.10.7/lib:/appl/gcc/11.3.0-binutils-2.38/lib64:/appl/gcc/11.3.0-binutils-2.38/lib:/lsf/10.1/linux3.10-glibc2.17-x86_64/lib
2023-01-19 03:12:09.982168: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer_plugin.so.7'; dlerror: libnvinfer_plugin.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /appl/cudnn/v8.3.2.44-prod-cuda-11.5/lib:/appl/cuda/11.6.0/lib64:/appl/python/3.10.7/lib:/appl/gcc/11.3.0-binutils-2.38/lib64:/appl/gcc/11.3.0-binutils-2.38/lib:/lsf/10.1/linux3.10-glibc2.17-x86_64/lib
2023-01-19 03:12:09.982180: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Cannot dlopen some TensorRT libraries. If you would like to use Nvidia GPU with TensorRT, please make sure the missing libraries mentioned above are installed properly.
2023-01-19 03:12:16.264651: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2023-01-19 03:12:18.912506: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1613] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 30961 MB memory:  -> device: 0, name: Tesla V100-SXM2-32GB, pci bus id: 0000:15:00.0, compute capability: 7.0
Epochs:  100
Optimizer:  Adam(learning_rate=0.003, amsgrad=False)
Metrics:  ["accuracy", tf.keras.metrics.MeanSquaredError(name="mean_squared_error", dtype=None)]
Loss function name:  abs_loss_function
Csv file used:  black_background_500x500.csv
Verbose:  2
Unique name:  Adam_abs_loss_function_0003_amsgrad_false
Output folder:  iter3
 ################ MODEL ############### 
 
inputs = keras.Input(shape=(input_size, input_size, 1))
x = layers.Conv2D(filters=32, kernel_size=3, activation="relu")(inputs)
x = layers.Conv2D(filters=32, kernel_size=3, activation="relu")(x)
x = layers.MaxPooling2D(pool_size=4)(x)
x = layers.Conv2D(filters=32, kernel_size=3, activation="relu")(x)
x = layers.Conv2D(filters=32, kernel_size=3, activation="relu")(x)
x = layers.MaxPooling2D(pool_size=4)(x)
x = layers.Conv2D(filters=32, kernel_size=3, activation="relu")(x)
x = layers.Conv2D(filters=32, kernel_size=3, activation="relu")(x)
x = layers.MaxPooling2D(pool_size=4)(x)
x = layers.Flatten()(x)
x = layers.Dense(128, activation="relu")(x)
x = layers.Dense(16, activation="relu")(x)
outputs = layers.Dense(3)(x)


Model: "model"
_________________________________________________________________
 Layer (type)                Output Shape              Param #   
=================================================================
 input_1 (InputLayer)        [(None, 500, 500, 1)]     0         
                                                                 
 conv2d (Conv2D)             (None, 498, 498, 32)      320       
                                                                 
 conv2d_1 (Conv2D)           (None, 496, 496, 32)      9248      
                                                                 
 max_pooling2d (MaxPooling2D  (None, 124, 124, 32)     0         
 )                                                               
                                                                 
 conv2d_2 (Conv2D)           (None, 122, 122, 32)      9248      
                                                                 
 conv2d_3 (Conv2D)           (None, 120, 120, 32)      9248      
                                                                 
 max_pooling2d_1 (MaxPooling  (None, 30, 30, 32)       0         
 2D)                                                             
                                                                 
 conv2d_4 (Conv2D)           (None, 28, 28, 32)        9248      
                                                                 
 conv2d_5 (Conv2D)           (None, 26, 26, 32)        9248      
                                                                 
 max_pooling2d_2 (MaxPooling  (None, 6, 6, 32)         0         
 2D)                                                             
                                                                 
 flatten (Flatten)           (None, 1152)              0         
                                                                 
 dense (Dense)               (None, 128)               147584    
                                                                 
 dense_1 (Dense)             (None, 16)                2064      
                                                                 
 dense_2 (Dense)             (None, 3)                 51        
                                                                 
=================================================================
Total params: 196,259
Trainable params: 196,259
Non-trainable params: 0
_________________________________________________________________
/zhome/ab/7/153983/project/venv/lib/python3.10/site-packages/keras/utils/image_utils.py:409: UserWarning: grayscale is deprecated. Please use color_mode = "grayscale"
  warnings.warn(
Epoch 1/100
2023-01-19 03:12:23.528877: I tensorflow/compiler/xla/stream_executor/cuda/cuda_dnn.cc:428] Loaded cuDNN version 8302
273/273 - 72s - loss: 0.2404 - accuracy: 0.3151 - mean_squared_error: 0.3073 - val_loss: 0.2579 - val_accuracy: 0.2923 - val_mean_squared_error: 0.2605 - 72s/epoch - 265ms/step
Epoch 2/100
273/273 - 71s - loss: 0.2412 - accuracy: 0.2968 - mean_squared_error: 0.3360 - val_loss: 0.2578 - val_accuracy: 0.3569 - val_mean_squared_error: 0.3158 - 71s/epoch - 261ms/step
Epoch 3/100
273/273 - 72s - loss: 0.2369 - accuracy: 0.2847 - mean_squared_error: 0.3960 - val_loss: 0.2573 - val_accuracy: 0.3397 - val_mean_squared_error: 0.4235 - 72s/epoch - 262ms/step
Epoch 4/100
273/273 - 68s - loss: 0.2457 - accuracy: 0.3479 - mean_squared_error: 0.4570 - val_loss: 0.2614 - val_accuracy: 0.3286 - val_mean_squared_error: 0.5007 - 68s/epoch - 248ms/step
Epoch 5/100
273/273 - 67s - loss: 0.2480 - accuracy: 0.3142 - mean_squared_error: 0.5512 - val_loss: 0.2334 - val_accuracy: 0.4698 - val_mean_squared_error: 0.6531 - 67s/epoch - 245ms/step
Epoch 6/100
273/273 - 66s - loss: 0.2429 - accuracy: 0.3091 - mean_squared_error: 0.6278 - val_loss: 0.2524 - val_accuracy: 0.4264 - val_mean_squared_error: 0.5825 - 66s/epoch - 243ms/step
Epoch 7/100
273/273 - 70s - loss: 0.2432 - accuracy: 0.3402 - mean_squared_error: 0.6713 - val_loss: 0.2195 - val_accuracy: 0.3730 - val_mean_squared_error: 0.7186 - 70s/epoch - 256ms/step
Epoch 8/100
273/273 - 67s - loss: 0.2488 - accuracy: 0.3499 - mean_squared_error: 0.6917 - val_loss: 0.2391 - val_accuracy: 0.3256 - val_mean_squared_error: 0.6920 - 67s/epoch - 245ms/step
Epoch 9/100
273/273 - 70s - loss: 0.2404 - accuracy: 0.3120 - mean_squared_error: 0.5860 - val_loss: 0.2349 - val_accuracy: 0.3659 - val_mean_squared_error: 0.5761 - 70s/epoch - 255ms/step
Epoch 10/100
273/273 - 69s - loss: 0.2545 - accuracy: 0.3592 - mean_squared_error: 0.6198 - val_loss: 0.2468 - val_accuracy: 0.4204 - val_mean_squared_error: 0.6332 - 69s/epoch - 252ms/step
Epoch 11/100
273/273 - 66s - loss: 0.2483 - accuracy: 0.3557 - mean_squared_error: 0.5619 - val_loss: 0.2609 - val_accuracy: 0.3296 - val_mean_squared_error: 0.4722 - 66s/epoch - 243ms/step
Epoch 12/100
273/273 - 69s - loss: 0.2417 - accuracy: 0.2945 - mean_squared_error: 0.5194 - val_loss: 0.2613 - val_accuracy: 0.3800 - val_mean_squared_error: 0.4449 - 69s/epoch - 252ms/step
Epoch 13/100
273/273 - 69s - loss: 0.2449 - accuracy: 0.3082 - mean_squared_error: 0.4237 - val_loss: 0.2286 - val_accuracy: 0.3831 - val_mean_squared_error: 0.5029 - 69s/epoch - 253ms/step
Epoch 14/100
273/273 - 66s - loss: 0.2451 - accuracy: 0.3118 - mean_squared_error: 0.4907 - val_loss: 0.2487 - val_accuracy: 0.4284 - val_mean_squared_error: 0.4561 - 66s/epoch - 244ms/step
Epoch 15/100
273/273 - 69s - loss: 0.2560 - accuracy: 0.3487 - mean_squared_error: 0.4847 - val_loss: 0.2700 - val_accuracy: 0.2712 - val_mean_squared_error: 0.5130 - 69s/epoch - 252ms/step
Epoch 16/100
273/273 - 69s - loss: 0.2391 - accuracy: 0.3401 - mean_squared_error: 0.5653 - val_loss: 0.2330 - val_accuracy: 0.4819 - val_mean_squared_error: 0.5886 - 69s/epoch - 254ms/step
Epoch 17/100
273/273 - 69s - loss: 0.2415 - accuracy: 0.3254 - mean_squared_error: 0.5687 - val_loss: 0.2405 - val_accuracy: 0.3488 - val_mean_squared_error: 0.6250 - 69s/epoch - 254ms/step
Epoch 18/100
273/273 - 67s - loss: 0.2463 - accuracy: 0.2954 - mean_squared_error: 0.5730 - val_loss: 0.2431 - val_accuracy: 0.4395 - val_mean_squared_error: 0.4971 - 67s/epoch - 245ms/step
Epoch 19/100
273/273 - 66s - loss: 0.2367 - accuracy: 0.3130 - mean_squared_error: 0.5615 - val_loss: 0.2592 - val_accuracy: 0.3054 - val_mean_squared_error: 0.5702 - 66s/epoch - 242ms/step
Epoch 20/100
273/273 - 66s - loss: 0.2475 - accuracy: 0.3323 - mean_squared_error: 0.5899 - val_loss: 0.2615 - val_accuracy: 0.4083 - val_mean_squared_error: 0.5269 - 66s/epoch - 241ms/step
Epoch 21/100
273/273 - 69s - loss: 0.2506 - accuracy: 0.2995 - mean_squared_error: 0.4955 - val_loss: 0.2668 - val_accuracy: 0.4022 - val_mean_squared_error: 0.3726 - 69s/epoch - 253ms/step
Epoch 22/100
273/273 - 69s - loss: 0.2364 - accuracy: 0.3194 - mean_squared_error: 0.3474 - val_loss: 0.2606 - val_accuracy: 0.3851 - val_mean_squared_error: 0.2705 - 69s/epoch - 254ms/step
Epoch 23/100
273/273 - 66s - loss: 0.2445 - accuracy: 0.3201 - mean_squared_error: 0.2761 - val_loss: 0.2497 - val_accuracy: 0.2913 - val_mean_squared_error: 0.2506 - 66s/epoch - 240ms/step
Epoch 24/100
273/273 - 69s - loss: 0.2420 - accuracy: 0.3119 - mean_squared_error: 0.2579 - val_loss: 0.2312 - val_accuracy: 0.3639 - val_mean_squared_error: 0.2179 - 69s/epoch - 253ms/step
Epoch 25/100
273/273 - 70s - loss: 0.2459 - accuracy: 0.3290 - mean_squared_error: 0.2259 - val_loss: 0.2396 - val_accuracy: 0.4435 - val_mean_squared_error: 0.1845 - 70s/epoch - 256ms/step
Epoch 26/100
273/273 - 66s - loss: 0.2453 - accuracy: 0.3125 - mean_squared_error: 0.2259 - val_loss: 0.2447 - val_accuracy: 0.3296 - val_mean_squared_error: 0.2470 - 66s/epoch - 242ms/step
Epoch 27/100
273/273 - 66s - loss: 0.2396 - accuracy: 0.3478 - mean_squared_error: 0.2775 - val_loss: 0.2561 - val_accuracy: 0.4385 - val_mean_squared_error: 0.3249 - 66s/epoch - 241ms/step
Epoch 28/100
273/273 - 66s - loss: 0.2399 - accuracy: 0.3381 - mean_squared_error: 0.3270 - val_loss: 0.2704 - val_accuracy: 0.3750 - val_mean_squared_error: 0.3045 - 66s/epoch - 243ms/step
Epoch 29/100
273/273 - 70s - loss: 0.2421 - accuracy: 0.3150 - mean_squared_error: 0.4013 - val_loss: 0.2573 - val_accuracy: 0.3982 - val_mean_squared_error: 0.3787 - 70s/epoch - 255ms/step
Epoch 30/100
273/273 - 69s - loss: 0.2472 - accuracy: 0.3550 - mean_squared_error: 0.2378 - val_loss: 0.2520 - val_accuracy: 0.3851 - val_mean_squared_error: 0.1892 - 69s/epoch - 252ms/step
Epoch 31/100
273/273 - 66s - loss: 0.2448 - accuracy: 0.3433 - mean_squared_error: 0.1994 - val_loss: 0.2352 - val_accuracy: 0.3085 - val_mean_squared_error: 0.2111 - 66s/epoch - 241ms/step
Epoch 32/100
273/273 - 65s - loss: 0.2472 - accuracy: 0.3407 - mean_squared_error: 0.2839 - val_loss: 0.2547 - val_accuracy: 0.3024 - val_mean_squared_error: 0.3191 - 65s/epoch - 239ms/step
Epoch 33/100
273/273 - 67s - loss: 0.2490 - accuracy: 0.3471 - mean_squared_error: 0.2520 - val_loss: 0.2488 - val_accuracy: 0.2762 - val_mean_squared_error: 0.2416 - 67s/epoch - 247ms/step
Epoch 34/100
273/273 - 69s - loss: 0.2433 - accuracy: 0.2796 - mean_squared_error: 0.2261 - val_loss: 0.2332 - val_accuracy: 0.3256 - val_mean_squared_error: 0.2192 - 69s/epoch - 251ms/step
Epoch 35/100
273/273 - 68s - loss: 0.2405 - accuracy: 0.3434 - mean_squared_error: 0.2193 - val_loss: 0.2525 - val_accuracy: 0.4516 - val_mean_squared_error: 0.2570 - 68s/epoch - 249ms/step
Epoch 36/100
273/273 - 66s - loss: 0.2452 - accuracy: 0.3284 - mean_squared_error: 0.2520 - val_loss: 0.2607 - val_accuracy: 0.3911 - val_mean_squared_error: 0.2395 - 66s/epoch - 243ms/step
Epoch 37/100
273/273 - 65s - loss: 0.2443 - accuracy: 0.3252 - mean_squared_error: 0.2377 - val_loss: 0.2623 - val_accuracy: 0.3226 - val_mean_squared_error: 0.2121 - 65s/epoch - 238ms/step
Epoch 38/100
273/273 - 68s - loss: 0.2410 - accuracy: 0.3495 - mean_squared_error: 0.1786 - val_loss: 0.2370 - val_accuracy: 0.4919 - val_mean_squared_error: 0.1621 - 68s/epoch - 249ms/step
Epoch 39/100
273/273 - 67s - loss: 0.2400 - accuracy: 0.3321 - mean_squared_error: 0.1602 - val_loss: 0.2614 - val_accuracy: 0.2651 - val_mean_squared_error: 0.1733 - 67s/epoch - 246ms/step
Epoch 40/100
273/273 - 65s - loss: 0.2377 - accuracy: 0.3389 - mean_squared_error: 0.2098 - val_loss: 0.2636 - val_accuracy: 0.2530 - val_mean_squared_error: 0.2513 - 65s/epoch - 238ms/step
Epoch 41/100
273/273 - 65s - loss: 0.2431 - accuracy: 0.3312 - mean_squared_error: 0.2502 - val_loss: 0.2586 - val_accuracy: 0.3427 - val_mean_squared_error: 0.2300 - 65s/epoch - 239ms/step
Epoch 42/100
273/273 - 65s - loss: 0.2451 - accuracy: 0.3114 - mean_squared_error: 0.3347 - val_loss: 0.2499 - val_accuracy: 0.4718 - val_mean_squared_error: 0.3452 - 65s/epoch - 239ms/step
Epoch 43/100
273/273 - 68s - loss: 0.2441 - accuracy: 0.2737 - mean_squared_error: 0.3764 - val_loss: 0.2402 - val_accuracy: 0.2873 - val_mean_squared_error: 0.3564 - 68s/epoch - 248ms/step
Epoch 44/100
273/273 - 68s - loss: 0.2449 - accuracy: 0.3095 - mean_squared_error: 0.5571 - val_loss: 0.2404 - val_accuracy: 0.3115 - val_mean_squared_error: 0.6503 - 68s/epoch - 247ms/step
Epoch 45/100
273/273 - 66s - loss: 0.2434 - accuracy: 0.3534 - mean_squared_error: 0.5822 - val_loss: 0.2318 - val_accuracy: 0.2409 - val_mean_squared_error: 0.6068 - 66s/epoch - 242ms/step
Epoch 46/100
273/273 - 63s - loss: 0.2402 - accuracy: 0.3175 - mean_squared_error: 0.5401 - val_loss: 0.2299 - val_accuracy: 0.2913 - val_mean_squared_error: 0.5541 - 63s/epoch - 232ms/step
Epoch 47/100
273/273 - 68s - loss: 0.2429 - accuracy: 0.3568 - mean_squared_error: 0.5763 - val_loss: 0.2399 - val_accuracy: 0.3659 - val_mean_squared_error: 0.6403 - 68s/epoch - 249ms/step
Epoch 48/100
273/273 - 64s - loss: 0.2405 - accuracy: 0.2976 - mean_squared_error: 0.6615 - val_loss: 0.2475 - val_accuracy: 0.3901 - val_mean_squared_error: 0.6043 - 64s/epoch - 235ms/step
Epoch 49/100
273/273 - 68s - loss: 0.2396 - accuracy: 0.2786 - mean_squared_error: 0.7301 - val_loss: 0.2564 - val_accuracy: 0.3821 - val_mean_squared_error: 0.7530 - 68s/epoch - 249ms/step
Epoch 50/100
273/273 - 68s - loss: 0.2379 - accuracy: 0.2891 - mean_squared_error: 0.7224 - val_loss: 0.2457 - val_accuracy: 0.2611 - val_mean_squared_error: 0.6609 - 68s/epoch - 248ms/step
Epoch 51/100
273/273 - 65s - loss: 0.2460 - accuracy: 0.2944 - mean_squared_error: 0.7769 - val_loss: 0.2374 - val_accuracy: 0.2470 - val_mean_squared_error: 0.8603 - 65s/epoch - 240ms/step
Epoch 52/100
273/273 - 66s - loss: 0.2439 - accuracy: 0.3134 - mean_squared_error: 0.7512 - val_loss: 0.2654 - val_accuracy: 0.3145 - val_mean_squared_error: 0.7568 - 66s/epoch - 241ms/step
Epoch 53/100
273/273 - 65s - loss: 0.2462 - accuracy: 0.3029 - mean_squared_error: 0.6381 - val_loss: 0.2499 - val_accuracy: 0.2087 - val_mean_squared_error: 0.6344 - 65s/epoch - 240ms/step
Epoch 54/100
273/273 - 66s - loss: 0.2497 - accuracy: 0.3670 - mean_squared_error: 0.4401 - val_loss: 0.2417 - val_accuracy: 0.2500 - val_mean_squared_error: 0.3780 - 66s/epoch - 243ms/step
Epoch 55/100
273/273 - 66s - loss: 0.2353 - accuracy: 0.3013 - mean_squared_error: 0.3698 - val_loss: 0.2376 - val_accuracy: 0.2782 - val_mean_squared_error: 0.3725 - 66s/epoch - 242ms/step
Epoch 56/100
273/273 - 66s - loss: 0.2401 - accuracy: 0.3275 - mean_squared_error: 0.4458 - val_loss: 0.2359 - val_accuracy: 0.3851 - val_mean_squared_error: 0.5256 - 66s/epoch - 242ms/step
Epoch 57/100
273/273 - 66s - loss: 0.2494 - accuracy: 0.3215 - mean_squared_error: 0.5302 - val_loss: 0.2451 - val_accuracy: 0.3780 - val_mean_squared_error: 0.5392 - 66s/epoch - 241ms/step
Epoch 58/100
273/273 - 66s - loss: 0.2428 - accuracy: 0.3631 - mean_squared_error: 0.4694 - val_loss: 0.2567 - val_accuracy: 0.2722 - val_mean_squared_error: 0.3399 - 66s/epoch - 241ms/step
Epoch 59/100
273/273 - 67s - loss: 0.2447 - accuracy: 0.3212 - mean_squared_error: 0.3958 - val_loss: 0.2558 - val_accuracy: 0.3639 - val_mean_squared_error: 0.3701 - 67s/epoch - 245ms/step
Epoch 60/100
273/273 - 66s - loss: 0.2439 - accuracy: 0.3172 - mean_squared_error: 0.3793 - val_loss: 0.2564 - val_accuracy: 0.3488 - val_mean_squared_error: 0.3499 - 66s/epoch - 242ms/step
Epoch 61/100
273/273 - 67s - loss: 0.2472 - accuracy: 0.3154 - mean_squared_error: 0.3901 - val_loss: 0.2470 - val_accuracy: 0.3710 - val_mean_squared_error: 0.4038 - 67s/epoch - 246ms/step
Epoch 62/100
273/273 - 67s - loss: 0.2454 - accuracy: 0.3772 - mean_squared_error: 0.4568 - val_loss: 0.2606 - val_accuracy: 0.3942 - val_mean_squared_error: 0.5479 - 67s/epoch - 247ms/step
Epoch 63/100
273/273 - 68s - loss: 0.2455 - accuracy: 0.3626 - mean_squared_error: 0.5422 - val_loss: 0.2545 - val_accuracy: 0.3165 - val_mean_squared_error: 0.5129 - 68s/epoch - 248ms/step
Epoch 64/100
273/273 - 68s - loss: 0.2411 - accuracy: 0.2940 - mean_squared_error: 0.4891 - val_loss: 0.2457 - val_accuracy: 0.4113 - val_mean_squared_error: 0.5121 - 68s/epoch - 248ms/step
Epoch 65/100
273/273 - 67s - loss: 0.2398 - accuracy: 0.3244 - mean_squared_error: 0.4666 - val_loss: 0.2551 - val_accuracy: 0.4677 - val_mean_squared_error: 0.4042 - 67s/epoch - 244ms/step
Epoch 66/100
273/273 - 67s - loss: 0.2433 - accuracy: 0.3284 - mean_squared_error: 0.4281 - val_loss: 0.2423 - val_accuracy: 0.1885 - val_mean_squared_error: 0.4897 - 67s/epoch - 244ms/step
Epoch 67/100
273/273 - 67s - loss: 0.2445 - accuracy: 0.2854 - mean_squared_error: 0.4304 - val_loss: 0.2378 - val_accuracy: 0.3256 - val_mean_squared_error: 0.3119 - 67s/epoch - 245ms/step
Epoch 68/100
273/273 - 69s - loss: 0.2364 - accuracy: 0.3542 - mean_squared_error: 0.4512 - val_loss: 0.2566 - val_accuracy: 0.3700 - val_mean_squared_error: 0.4400 - 69s/epoch - 253ms/step
Epoch 69/100
273/273 - 69s - loss: 0.2460 - accuracy: 0.3096 - mean_squared_error: 0.5412 - val_loss: 0.2364 - val_accuracy: 0.3669 - val_mean_squared_error: 0.5424 - 69s/epoch - 253ms/step
Epoch 70/100
273/273 - 66s - loss: 0.2417 - accuracy: 0.3230 - mean_squared_error: 0.5018 - val_loss: 0.2422 - val_accuracy: 0.3871 - val_mean_squared_error: 0.5140 - 66s/epoch - 240ms/step
Epoch 71/100
273/273 - 68s - loss: 0.2431 - accuracy: 0.3555 - mean_squared_error: 0.5134 - val_loss: 0.2506 - val_accuracy: 0.2893 - val_mean_squared_error: 0.5134 - 68s/epoch - 249ms/step
Epoch 72/100
273/273 - 64s - loss: 0.2446 - accuracy: 0.3272 - mean_squared_error: 0.5682 - val_loss: 0.2496 - val_accuracy: 0.2923 - val_mean_squared_error: 0.5725 - 64s/epoch - 234ms/step
Epoch 73/100
273/273 - 65s - loss: 0.2434 - accuracy: 0.3368 - mean_squared_error: 0.5498 - val_loss: 0.2479 - val_accuracy: 0.2812 - val_mean_squared_error: 0.5536 - 65s/epoch - 240ms/step
Epoch 74/100
273/273 - 65s - loss: 0.2404 - accuracy: 0.3148 - mean_squared_error: 0.5549 - val_loss: 0.2513 - val_accuracy: 0.3871 - val_mean_squared_error: 0.5798 - 65s/epoch - 239ms/step
Epoch 75/100
273/273 - 65s - loss: 0.2455 - accuracy: 0.3930 - mean_squared_error: 0.5842 - val_loss: 0.2438 - val_accuracy: 0.4244 - val_mean_squared_error: 0.6259 - 65s/epoch - 237ms/step
Epoch 76/100
273/273 - 64s - loss: 0.2487 - accuracy: 0.2990 - mean_squared_error: 0.6200 - val_loss: 0.2521 - val_accuracy: 0.2974 - val_mean_squared_error: 0.5317 - 64s/epoch - 235ms/step
Epoch 77/100
273/273 - 64s - loss: 0.2420 - accuracy: 0.3373 - mean_squared_error: 0.5759 - val_loss: 0.2469 - val_accuracy: 0.2601 - val_mean_squared_error: 0.5889 - 64s/epoch - 234ms/step
Epoch 78/100
273/273 - 67s - loss: 0.2452 - accuracy: 0.2839 - mean_squared_error: 0.5211 - val_loss: 0.2542 - val_accuracy: 0.2984 - val_mean_squared_error: 0.4038 - 67s/epoch - 247ms/step
Epoch 79/100
273/273 - 64s - loss: 0.2415 - accuracy: 0.3180 - mean_squared_error: 0.4424 - val_loss: 0.2318 - val_accuracy: 0.3639 - val_mean_squared_error: 0.4760 - 64s/epoch - 233ms/step
Epoch 80/100
273/273 - 65s - loss: 0.2410 - accuracy: 0.3283 - mean_squared_error: 0.4428 - val_loss: 0.2436 - val_accuracy: 0.3528 - val_mean_squared_error: 0.4135 - 65s/epoch - 238ms/step
Epoch 81/100
273/273 - 65s - loss: 0.2413 - accuracy: 0.3549 - mean_squared_error: 0.4854 - val_loss: 0.2476 - val_accuracy: 0.3014 - val_mean_squared_error: 0.5393 - 65s/epoch - 238ms/step
Epoch 82/100
273/273 - 65s - loss: 0.2449 - accuracy: 0.3250 - mean_squared_error: 0.4937 - val_loss: 0.2553 - val_accuracy: 0.3438 - val_mean_squared_error: 0.4643 - 65s/epoch - 237ms/step
Epoch 83/100
273/273 - 65s - loss: 0.2443 - accuracy: 0.3520 - mean_squared_error: 0.4698 - val_loss: 0.2481 - val_accuracy: 0.3357 - val_mean_squared_error: 0.4609 - 65s/epoch - 237ms/step
Epoch 84/100
273/273 - 65s - loss: 0.2518 - accuracy: 0.3183 - mean_squared_error: 0.5258 - val_loss: 0.2342 - val_accuracy: 0.4556 - val_mean_squared_error: 0.5655 - 65s/epoch - 238ms/step
Epoch 85/100
273/273 - 65s - loss: 0.2397 - accuracy: 0.3134 - mean_squared_error: 0.6277 - val_loss: 0.2374 - val_accuracy: 0.2480 - val_mean_squared_error: 0.6087 - 65s/epoch - 239ms/step
Epoch 86/100
273/273 - 65s - loss: 0.2394 - accuracy: 0.2745 - mean_squared_error: 0.5835 - val_loss: 0.2467 - val_accuracy: 0.3387 - val_mean_squared_error: 0.5242 - 65s/epoch - 239ms/step
Epoch 87/100
273/273 - 64s - loss: 0.2471 - accuracy: 0.3223 - mean_squared_error: 0.4849 - val_loss: 0.2685 - val_accuracy: 0.3357 - val_mean_squared_error: 0.4022 - 64s/epoch - 234ms/step
Epoch 88/100
273/273 - 65s - loss: 0.2404 - accuracy: 0.3102 - mean_squared_error: 0.4286 - val_loss: 0.2653 - val_accuracy: 0.4234 - val_mean_squared_error: 0.4035 - 65s/epoch - 239ms/step
Epoch 89/100
273/273 - 66s - loss: 0.2365 - accuracy: 0.3568 - mean_squared_error: 0.3975 - val_loss: 0.2445 - val_accuracy: 0.2026 - val_mean_squared_error: 0.4276 - 66s/epoch - 242ms/step
Epoch 90/100
273/273 - 67s - loss: 0.2488 - accuracy: 0.3174 - mean_squared_error: 0.3761 - val_loss: 0.2585 - val_accuracy: 0.3518 - val_mean_squared_error: 0.3687 - 67s/epoch - 247ms/step
Epoch 91/100
273/273 - 66s - loss: 0.2456 - accuracy: 0.3605 - mean_squared_error: 0.3296 - val_loss: 0.2618 - val_accuracy: 0.3377 - val_mean_squared_error: 0.2893 - 66s/epoch - 240ms/step
Epoch 92/100
273/273 - 69s - loss: 0.2509 - accuracy: 0.3254 - mean_squared_error: 0.3049 - val_loss: 0.2681 - val_accuracy: 0.2802 - val_mean_squared_error: 0.3334 - 69s/epoch - 251ms/step
Epoch 93/100
273/273 - 67s - loss: 0.2434 - accuracy: 0.3174 - mean_squared_error: 0.3414 - val_loss: 0.2503 - val_accuracy: 0.2974 - val_mean_squared_error: 0.3184 - 67s/epoch - 244ms/step
Epoch 94/100
273/273 - 65s - loss: 0.2514 - accuracy: 0.3429 - mean_squared_error: 0.3987 - val_loss: 0.2640 - val_accuracy: 0.3065 - val_mean_squared_error: 0.3737 - 65s/epoch - 240ms/step
Epoch 95/100
273/273 - 66s - loss: 0.2462 - accuracy: 0.3479 - mean_squared_error: 0.4418 - val_loss: 0.2439 - val_accuracy: 0.3397 - val_mean_squared_error: 0.4723 - 66s/epoch - 241ms/step
Epoch 96/100
273/273 - 69s - loss: 0.2498 - accuracy: 0.3318 - mean_squared_error: 0.4817 - val_loss: 0.2389 - val_accuracy: 0.4556 - val_mean_squared_error: 0.4435 - 69s/epoch - 254ms/step
Epoch 97/100
273/273 - 68s - loss: 0.2360 - accuracy: 0.3393 - mean_squared_error: 0.4680 - val_loss: 0.2322 - val_accuracy: 0.2157 - val_mean_squared_error: 0.5313 - 68s/epoch - 250ms/step
Epoch 98/100
273/273 - 66s - loss: 0.2488 - accuracy: 0.3397 - mean_squared_error: 0.4281 - val_loss: 0.2527 - val_accuracy: 0.1633 - val_mean_squared_error: 0.4340 - 66s/epoch - 242ms/step
Epoch 99/100
273/273 - 63s - loss: 0.2503 - accuracy: 0.3116 - mean_squared_error: 0.3944 - val_loss: 0.2674 - val_accuracy: 0.3115 - val_mean_squared_error: 0.3344 - 63s/epoch - 231ms/step
Epoch 100/100
273/273 - 66s - loss: 0.2478 - accuracy: 0.3417 - mean_squared_error: 0.4046 - val_loss: 0.2586 - val_accuracy: 0.5171 - val_mean_squared_error: 0.3996 - 66s/epoch - 242ms/step
Traceback (most recent call last):
  File "/zhome/ab/7/153983/project/trainModelIter2.py", line 238, in <module>
    plt.savefig("{}/Graphs/{}_Image_{}.png".format(out_path, random_id_str, unique_name))
  File "/zhome/ab/7/153983/project/venv/lib/python3.10/site-packages/matplotlib/pyplot.py", line 944, in savefig
    res = fig.savefig(*args, **kwargs)
  File "/zhome/ab/7/153983/project/venv/lib/python3.10/site-packages/matplotlib/figure.py", line 3277, in savefig
    self.canvas.print_figure(fname, **kwargs)
  File "/zhome/ab/7/153983/project/venv/lib/python3.10/site-packages/matplotlib/backend_bases.py", line 2338, in print_figure
    result = print_method(
  File "/zhome/ab/7/153983/project/venv/lib/python3.10/site-packages/matplotlib/backend_bases.py", line 2204, in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
  File "/zhome/ab/7/153983/project/venv/lib/python3.10/site-packages/matplotlib/_api/deprecation.py", line 410, in wrapper
    return func(*inner_args, **inner_kwargs)
  File "/zhome/ab/7/153983/project/venv/lib/python3.10/site-packages/matplotlib/backends/backend_agg.py", line 520, in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
  File "/zhome/ab/7/153983/project/venv/lib/python3.10/site-packages/matplotlib/backends/backend_agg.py", line 467, in _print_pil
    mpl.image.imsave(
  File "/zhome/ab/7/153983/project/venv/lib/python3.10/site-packages/matplotlib/image.py", line 1656, in imsave
    image.save(fname, **pil_kwargs)
  File "/zhome/ab/7/153983/project/venv/lib/python3.10/site-packages/PIL/Image.py", line 2317, in save
    fp = builtins.open(filename, "w+b")
FileNotFoundError: [Errno 2] No such file or directory: 'iter3/Graphs/b3a51896979e11edb3f708f1ea952f1a_Image_Adam_abs_loss_function_0003_amsgrad_false.png'

------------------------------------------------------------
Sender: LSF System <lsfadmin@hpc.dtu.dk>
Subject: Job 15213421: <s202741-train> in cluster <dcc> Exited

Job <s202741-train> was submitted from host <n-62-20-1> by user <s202741> in cluster <dcc> at Wed Jan 18 23:53:41 2023
Job was executed on host(s) <4*n-62-20-10>, in queue <gpuv100>, as user <s202741> in cluster <dcc> at Thu Jan 19 03:11:58 2023
</zhome/ab/7/153983> was used as the home directory.
</zhome/ab/7/153983/project/scripts> was used as the working directory.
Started at Thu Jan 19 03:11:58 2023
Terminated at Thu Jan 19 05:03:42 2023
Results reported at Thu Jan 19 05:03:42 2023

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#!/bin/bash
### General options
### -- specify queue --   NOTE: TitanX is significantly faster than K80
#BSUB -q gpuv100
#BSUB -gpu "num=1:mode=exclusive_process"
### -- set the job Name --
#BSUB -J s202741-train
### -- ask for number of cores (default: 1) --
#BSUB -n 4
#BSUB -R "span[hosts=1]"
### -- set walltime limit: hh:mm --  maximum 24 hours for GPU-queues right now
#BSUB -W 2:00
# request 5GB of memory
#BSUB -R "rusage[mem=5GB]"
### -- Specify the output and error file. %J is the job-id --
### -- -o and -e mean append, -oo and -eo mean overwrite --
#BSUB -o iter3/Logs/Adam_abs_loss_function_0003_amsgrad_false%J.out
# -- end of LSF options --

# Necessary modules
cd ..
source venv/bin/activate

python trainModelIter2.py 100 "Adam(learning_rate=0.003, amsgrad=False)" "[\"accuracy\", tf.keras.metrics.MeanSquaredError(name=\"mean_squared_error\", dtype=None)]" "abs_loss_function" "black_background_500x500.csv" 2 "Adam_abs_loss_function_0003_amsgrad_false" "iter3"

    
------------------------------------------------------------

Exited with exit code 1.

Resource usage summary:

    CPU time :                                   8255.41 sec.
    Max Memory :                                 3060 MB
    Average Memory :                             2891.95 MB
    Total Requested Memory :                     20480.00 MB
    Delta Memory :                               17420.00 MB
    Max Swap :                                   -
    Max Processes :                              4
    Max Threads :                                33
    Run time :                                   6706 sec.
    Turnaround time :                            18601 sec.

The output (if any) is above this job summary.

