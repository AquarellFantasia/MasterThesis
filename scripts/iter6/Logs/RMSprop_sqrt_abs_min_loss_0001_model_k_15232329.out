Loaded dependency [python3/3.10.7]: gcc/11.3.0-binutils-2.38
Loaded module: python3/3.10.7

Loading python3/3.10.7
  Loading requirement: gcc/11.3.0-binutils-2.38
Loaded module: cuda/11.6
Loaded module: cudnn/v8.3.2.44-prod-cuda-11.X
2023-01-22 15:29:55.753682: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2023-01-22 15:29:58.355048: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer.so.7'; dlerror: libnvinfer.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /appl/cudnn/v8.3.2.44-prod-cuda-11.5/lib:/appl/cuda/11.6.0/lib64:/appl/python/3.10.7/lib:/appl/gcc/11.3.0-binutils-2.38/lib64:/appl/gcc/11.3.0-binutils-2.38/lib:/lsf/10.1/linux3.10-glibc2.17-x86_64/lib
2023-01-22 15:29:58.355620: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer_plugin.so.7'; dlerror: libnvinfer_plugin.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /appl/cudnn/v8.3.2.44-prod-cuda-11.5/lib:/appl/cuda/11.6.0/lib64:/appl/python/3.10.7/lib:/appl/gcc/11.3.0-binutils-2.38/lib64:/appl/gcc/11.3.0-binutils-2.38/lib:/lsf/10.1/linux3.10-glibc2.17-x86_64/lib
2023-01-22 15:29:58.355633: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Cannot dlopen some TensorRT libraries. If you would like to use Nvidia GPU with TensorRT, please make sure the missing libraries mentioned above are installed properly.
2023-01-22 15:30:02.228689: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2023-01-22 15:30:03.583184: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1613] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 30960 MB memory:  -> device: 0, name: Tesla V100-PCIE-32GB, pci bus id: 0000:d8:00.0, compute capability: 7.0
Epochs:  100
Optimizer:  RMSprop(learning_rate=0.001)
Loss function name:  sqrt_abs_min_loss
Csv file used:  black_background_500x500.csv
Verbose:  2
Unique name:  RMSprop_sqrt_abs_min_loss_0001_model_k_
Output folder:  iter6
Model name:  load_model_k
 
        ################ MODEL ############### 

        inputs = keras.Input(shape=(input_size, input_size, 1))
        x = layers.Conv2D(filters=32, kernel_size=11, activation="relu")(inputs)
        x = layers.Conv2D(filters=32, kernel_size=11, activation="relu")(x)
        x = layers.Conv2D(filters=32, kernel_size=11, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=32, kernel_size=5, activation="relu")(x)
        x = layers.Conv2D(filters=32, kernel_size=5, activation="relu")(x)
        x = layers.Conv2D(filters=32, kernel_size=5, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=32, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=32, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=32, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=32, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=32, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=32, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=32, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=32, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=32, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=4)(x)
        x = layers.Flatten()(x)
        x = layers.Dense(210, activation="relu", kernel_regularizer=keras.regularizers.l2(0.01))(x)
        x = layers.Dense(210, activation="relu", kernel_regularizer=keras.regularizers.l2(0.01))(x)
        x = layers.Dense(210, activation="relu", kernel_regularizer=keras.regularizers.l2(0.01))(x)
        x = layers.Dense(32, activation="sigmoid", kernel_regularizer=keras.regularizers.l2(0.01))(x)
        outputs = layers.Dense(3)(x)
    
Model: "model"
_________________________________________________________________
 Layer (type)                Output Shape              Param #   
=================================================================
 input_1 (InputLayer)        [(None, 500, 500, 1)]     0         
                                                                 
 conv2d (Conv2D)             (None, 490, 490, 32)      3904      
                                                                 
 conv2d_1 (Conv2D)           (None, 480, 480, 32)      123936    
                                                                 
 conv2d_2 (Conv2D)           (None, 470, 470, 32)      123936    
                                                                 
 max_pooling2d (MaxPooling2D  (None, 235, 235, 32)     0         
 )                                                               
                                                                 
 conv2d_3 (Conv2D)           (None, 231, 231, 32)      25632     
                                                                 
 conv2d_4 (Conv2D)           (None, 227, 227, 32)      25632     
                                                                 
 conv2d_5 (Conv2D)           (None, 223, 223, 32)      25632     
                                                                 
 max_pooling2d_1 (MaxPooling  (None, 111, 111, 32)     0         
 2D)                                                             
                                                                 
 conv2d_6 (Conv2D)           (None, 109, 109, 32)      9248      
                                                                 
 conv2d_7 (Conv2D)           (None, 107, 107, 32)      9248      
                                                                 
 conv2d_8 (Conv2D)           (None, 105, 105, 32)      9248      
                                                                 
 max_pooling2d_2 (MaxPooling  (None, 52, 52, 32)       0         
 2D)                                                             
                                                                 
 conv2d_9 (Conv2D)           (None, 50, 50, 32)        9248      
                                                                 
 conv2d_10 (Conv2D)          (None, 48, 48, 32)        9248      
                                                                 
 conv2d_11 (Conv2D)          (None, 46, 46, 32)        9248      
                                                                 
 max_pooling2d_3 (MaxPooling  (None, 23, 23, 32)       0         
 2D)                                                             
                                                                 
 conv2d_12 (Conv2D)          (None, 21, 21, 32)        9248      
                                                                 
 conv2d_13 (Conv2D)          (None, 19, 19, 32)        9248      
                                                                 
 conv2d_14 (Conv2D)          (None, 17, 17, 32)        9248      
                                                                 
 max_pooling2d_4 (MaxPooling  (None, 4, 4, 32)         0         
 2D)                                                             
                                                                 
 flatten (Flatten)           (None, 512)               0         
                                                                 
 dense (Dense)               (None, 210)               107730    
                                                                 
 dense_1 (Dense)             (None, 210)               44310     
                                                                 
 dense_2 (Dense)             (None, 210)               44310     
                                                                 
 dense_3 (Dense)             (None, 32)                6752      
                                                                 
 dense_4 (Dense)             (None, 3)                 99        
                                                                 
=================================================================
Total params: 615,105
Trainable params: 615,105
Non-trainable params: 0
_________________________________________________________________
/zhome/ab/7/153983/project/venv/lib/python3.10/site-packages/keras/utils/image_utils.py:409: UserWarning: grayscale is deprecated. Please use color_mode = "grayscale"
  warnings.warn(
Epoch 1/100
2023-01-22 15:30:08.073168: I tensorflow/compiler/xla/stream_executor/cuda/cuda_dnn.cc:428] Loaded cuDNN version 8302
273/273 - 204s - loss: 1.3072 - sqrt_abs_min_loss: 0.4725 - accuracy: 0.3027 - val_loss: 0.4574 - val_sqrt_abs_min_loss: 0.4494 - val_accuracy: 0.3558 - 204s/epoch - 746ms/step
Epoch 2/100
273/273 - 182s - loss: 0.5095 - sqrt_abs_min_loss: 0.5058 - accuracy: 0.3337 - val_loss: 0.4874 - val_sqrt_abs_min_loss: 0.4863 - val_accuracy: 0.3306 - 182s/epoch - 665ms/step
Epoch 3/100
273/273 - 180s - loss: 0.5303 - sqrt_abs_min_loss: 0.5290 - accuracy: 0.3299 - val_loss: 0.5723 - val_sqrt_abs_min_loss: 0.5715 - val_accuracy: 0.3135 - 180s/epoch - 661ms/step
Epoch 4/100
273/273 - 179s - loss: 0.4858 - sqrt_abs_min_loss: 0.4846 - accuracy: 0.3107 - val_loss: 0.4719 - val_sqrt_abs_min_loss: 0.4714 - val_accuracy: 0.4506 - 179s/epoch - 656ms/step
Epoch 5/100
273/273 - 178s - loss: 0.4593 - sqrt_abs_min_loss: 0.4588 - accuracy: 0.3383 - val_loss: 0.4761 - val_sqrt_abs_min_loss: 0.4756 - val_accuracy: 0.2994 - 178s/epoch - 653ms/step
Epoch 6/100
273/273 - 177s - loss: 0.4678 - sqrt_abs_min_loss: 0.4673 - accuracy: 0.3752 - val_loss: 0.4824 - val_sqrt_abs_min_loss: 0.4819 - val_accuracy: 0.3538 - 177s/epoch - 650ms/step
Epoch 7/100
273/273 - 177s - loss: 0.4603 - sqrt_abs_min_loss: 0.4598 - accuracy: 0.3209 - val_loss: 0.4519 - val_sqrt_abs_min_loss: 0.4514 - val_accuracy: 0.2510 - 177s/epoch - 650ms/step
Epoch 8/100
273/273 - 177s - loss: 0.4606 - sqrt_abs_min_loss: 0.4601 - accuracy: 0.3086 - val_loss: 0.4772 - val_sqrt_abs_min_loss: 0.4767 - val_accuracy: 0.2107 - 177s/epoch - 649ms/step
Epoch 9/100
273/273 - 177s - loss: 0.4650 - sqrt_abs_min_loss: 0.4645 - accuracy: 0.3353 - val_loss: 0.4772 - val_sqrt_abs_min_loss: 0.4767 - val_accuracy: 0.3861 - 177s/epoch - 650ms/step
Epoch 10/100
273/273 - 183s - loss: 0.4642 - sqrt_abs_min_loss: 0.4637 - accuracy: 0.3318 - val_loss: 0.4566 - val_sqrt_abs_min_loss: 0.4561 - val_accuracy: 0.2067 - 183s/epoch - 672ms/step
Epoch 11/100
273/273 - 184s - loss: 0.4607 - sqrt_abs_min_loss: 0.4602 - accuracy: 0.3131 - val_loss: 0.5041 - val_sqrt_abs_min_loss: 0.5036 - val_accuracy: 0.3609 - 184s/epoch - 675ms/step
Epoch 12/100
273/273 - 185s - loss: 0.4677 - sqrt_abs_min_loss: 0.4672 - accuracy: 0.3125 - val_loss: 0.4760 - val_sqrt_abs_min_loss: 0.4755 - val_accuracy: 0.2762 - 185s/epoch - 677ms/step
Epoch 13/100
273/273 - 185s - loss: 0.4662 - sqrt_abs_min_loss: 0.4657 - accuracy: 0.3364 - val_loss: 0.4700 - val_sqrt_abs_min_loss: 0.4695 - val_accuracy: 0.2409 - 185s/epoch - 676ms/step
Epoch 14/100
273/273 - 185s - loss: 0.4594 - sqrt_abs_min_loss: 0.4589 - accuracy: 0.3193 - val_loss: 0.4749 - val_sqrt_abs_min_loss: 0.4744 - val_accuracy: 0.3175 - 185s/epoch - 676ms/step
Epoch 15/100
273/273 - 185s - loss: 0.4650 - sqrt_abs_min_loss: 0.4645 - accuracy: 0.3179 - val_loss: 0.4893 - val_sqrt_abs_min_loss: 0.4888 - val_accuracy: 0.4093 - 185s/epoch - 677ms/step
Epoch 16/100
273/273 - 185s - loss: 0.4577 - sqrt_abs_min_loss: 0.4572 - accuracy: 0.3109 - val_loss: 0.4412 - val_sqrt_abs_min_loss: 0.4407 - val_accuracy: 0.3962 - 185s/epoch - 676ms/step
Epoch 17/100
273/273 - 185s - loss: 0.4628 - sqrt_abs_min_loss: 0.4623 - accuracy: 0.2945 - val_loss: 0.4421 - val_sqrt_abs_min_loss: 0.4416 - val_accuracy: 0.3750 - 185s/epoch - 677ms/step
Epoch 18/100
273/273 - 185s - loss: 0.4596 - sqrt_abs_min_loss: 0.4591 - accuracy: 0.3127 - val_loss: 0.4401 - val_sqrt_abs_min_loss: 0.4396 - val_accuracy: 0.4627 - 185s/epoch - 677ms/step
Epoch 19/100
273/273 - 185s - loss: 0.4610 - sqrt_abs_min_loss: 0.4605 - accuracy: 0.3349 - val_loss: 0.4841 - val_sqrt_abs_min_loss: 0.4836 - val_accuracy: 0.3569 - 185s/epoch - 676ms/step
Epoch 20/100
273/273 - 184s - loss: 0.4580 - sqrt_abs_min_loss: 0.4575 - accuracy: 0.3380 - val_loss: 0.4819 - val_sqrt_abs_min_loss: 0.4814 - val_accuracy: 0.2923 - 184s/epoch - 675ms/step
Epoch 21/100
273/273 - 179s - loss: 0.4542 - sqrt_abs_min_loss: 0.4537 - accuracy: 0.3442 - val_loss: 0.4909 - val_sqrt_abs_min_loss: 0.4904 - val_accuracy: 0.2923 - 179s/epoch - 656ms/step
Epoch 22/100
273/273 - 177s - loss: 0.4708 - sqrt_abs_min_loss: 0.4703 - accuracy: 0.3671 - val_loss: 0.4862 - val_sqrt_abs_min_loss: 0.4857 - val_accuracy: 0.3367 - 177s/epoch - 649ms/step
Epoch 23/100
273/273 - 177s - loss: 0.4600 - sqrt_abs_min_loss: 0.4595 - accuracy: 0.3663 - val_loss: 0.4659 - val_sqrt_abs_min_loss: 0.4654 - val_accuracy: 0.3548 - 177s/epoch - 649ms/step
Epoch 24/100
273/273 - 177s - loss: 0.4634 - sqrt_abs_min_loss: 0.4629 - accuracy: 0.3513 - val_loss: 0.4922 - val_sqrt_abs_min_loss: 0.4917 - val_accuracy: 0.3448 - 177s/epoch - 648ms/step
Epoch 25/100
273/273 - 177s - loss: 0.4676 - sqrt_abs_min_loss: 0.4671 - accuracy: 0.3305 - val_loss: 0.4739 - val_sqrt_abs_min_loss: 0.4734 - val_accuracy: 0.2571 - 177s/epoch - 648ms/step
Epoch 26/100
273/273 - 177s - loss: 0.4624 - sqrt_abs_min_loss: 0.4619 - accuracy: 0.3182 - val_loss: 0.4627 - val_sqrt_abs_min_loss: 0.4622 - val_accuracy: 0.3286 - 177s/epoch - 650ms/step
Epoch 27/100
273/273 - 180s - loss: 0.4622 - sqrt_abs_min_loss: 0.4617 - accuracy: 0.3235 - val_loss: 0.4748 - val_sqrt_abs_min_loss: 0.4743 - val_accuracy: 0.3629 - 180s/epoch - 658ms/step
Epoch 28/100
273/273 - 177s - loss: 0.4663 - sqrt_abs_min_loss: 0.4658 - accuracy: 0.3138 - val_loss: 0.4650 - val_sqrt_abs_min_loss: 0.4645 - val_accuracy: 0.3579 - 177s/epoch - 648ms/step
Epoch 29/100
273/273 - 177s - loss: 0.4677 - sqrt_abs_min_loss: 0.4672 - accuracy: 0.2882 - val_loss: 0.4590 - val_sqrt_abs_min_loss: 0.4585 - val_accuracy: 0.3266 - 177s/epoch - 648ms/step
Epoch 30/100
273/273 - 177s - loss: 0.4637 - sqrt_abs_min_loss: 0.4632 - accuracy: 0.3148 - val_loss: 0.4722 - val_sqrt_abs_min_loss: 0.4717 - val_accuracy: 0.3589 - 177s/epoch - 648ms/step
Epoch 31/100
273/273 - 178s - loss: 0.4626 - sqrt_abs_min_loss: 0.4621 - accuracy: 0.3673 - val_loss: 0.4737 - val_sqrt_abs_min_loss: 0.4732 - val_accuracy: 0.2117 - 178s/epoch - 651ms/step
Epoch 32/100
273/273 - 177s - loss: 0.4588 - sqrt_abs_min_loss: 0.4583 - accuracy: 0.3498 - val_loss: 0.4639 - val_sqrt_abs_min_loss: 0.4634 - val_accuracy: 0.3458 - 177s/epoch - 648ms/step
Epoch 33/100
273/273 - 177s - loss: 0.4631 - sqrt_abs_min_loss: 0.4626 - accuracy: 0.3036 - val_loss: 0.4728 - val_sqrt_abs_min_loss: 0.4723 - val_accuracy: 0.1966 - 177s/epoch - 649ms/step
Epoch 34/100
273/273 - 177s - loss: 0.4660 - sqrt_abs_min_loss: 0.4655 - accuracy: 0.3268 - val_loss: 0.4897 - val_sqrt_abs_min_loss: 0.4892 - val_accuracy: 0.2147 - 177s/epoch - 648ms/step
Epoch 35/100
273/273 - 177s - loss: 0.4615 - sqrt_abs_min_loss: 0.4610 - accuracy: 0.3415 - val_loss: 0.4824 - val_sqrt_abs_min_loss: 0.4820 - val_accuracy: 0.3548 - 177s/epoch - 649ms/step
Epoch 36/100
273/273 - 177s - loss: 0.4623 - sqrt_abs_min_loss: 0.4618 - accuracy: 0.3150 - val_loss: 0.5036 - val_sqrt_abs_min_loss: 0.5031 - val_accuracy: 0.3357 - 177s/epoch - 648ms/step
Epoch 37/100
273/273 - 177s - loss: 0.4603 - sqrt_abs_min_loss: 0.4598 - accuracy: 0.3175 - val_loss: 0.4701 - val_sqrt_abs_min_loss: 0.4696 - val_accuracy: 0.3075 - 177s/epoch - 648ms/step
Epoch 38/100
273/273 - 177s - loss: 0.4708 - sqrt_abs_min_loss: 0.4703 - accuracy: 0.3297 - val_loss: 0.4523 - val_sqrt_abs_min_loss: 0.4518 - val_accuracy: 0.2097 - 177s/epoch - 649ms/step
Epoch 39/100
273/273 - 179s - loss: 0.4616 - sqrt_abs_min_loss: 0.4611 - accuracy: 0.3257 - val_loss: 0.4775 - val_sqrt_abs_min_loss: 0.4770 - val_accuracy: 0.3690 - 179s/epoch - 657ms/step
Epoch 40/100
273/273 - 177s - loss: 0.4590 - sqrt_abs_min_loss: 0.4585 - accuracy: 0.3013 - val_loss: 0.4578 - val_sqrt_abs_min_loss: 0.4573 - val_accuracy: 0.4294 - 177s/epoch - 648ms/step
Epoch 41/100
273/273 - 177s - loss: 0.4604 - sqrt_abs_min_loss: 0.4599 - accuracy: 0.3154 - val_loss: 0.4896 - val_sqrt_abs_min_loss: 0.4891 - val_accuracy: 0.2520 - 177s/epoch - 649ms/step
Epoch 42/100
273/273 - 177s - loss: 0.4593 - sqrt_abs_min_loss: 0.4588 - accuracy: 0.3349 - val_loss: 0.4867 - val_sqrt_abs_min_loss: 0.4862 - val_accuracy: 0.2480 - 177s/epoch - 650ms/step
Epoch 43/100
273/273 - 178s - loss: 0.4631 - sqrt_abs_min_loss: 0.4626 - accuracy: 0.3363 - val_loss: 0.4636 - val_sqrt_abs_min_loss: 0.4631 - val_accuracy: 0.3831 - 178s/epoch - 651ms/step
Epoch 44/100
273/273 - 178s - loss: 0.4722 - sqrt_abs_min_loss: 0.4717 - accuracy: 0.3724 - val_loss: 0.4685 - val_sqrt_abs_min_loss: 0.4680 - val_accuracy: 0.4365 - 178s/epoch - 652ms/step
Epoch 45/100
273/273 - 177s - loss: 0.4621 - sqrt_abs_min_loss: 0.4616 - accuracy: 0.3531 - val_loss: 0.4902 - val_sqrt_abs_min_loss: 0.4897 - val_accuracy: 0.3165 - 177s/epoch - 649ms/step
Epoch 46/100
273/273 - 177s - loss: 0.4623 - sqrt_abs_min_loss: 0.4618 - accuracy: 0.3405 - val_loss: 0.4843 - val_sqrt_abs_min_loss: 0.4838 - val_accuracy: 0.3488 - 177s/epoch - 649ms/step
Epoch 47/100
273/273 - 177s - loss: 0.4661 - sqrt_abs_min_loss: 0.4656 - accuracy: 0.3344 - val_loss: 0.4610 - val_sqrt_abs_min_loss: 0.4605 - val_accuracy: 0.2631 - 177s/epoch - 649ms/step
Epoch 48/100
273/273 - 177s - loss: 0.4629 - sqrt_abs_min_loss: 0.4624 - accuracy: 0.3544 - val_loss: 0.4617 - val_sqrt_abs_min_loss: 0.4612 - val_accuracy: 0.2077 - 177s/epoch - 649ms/step
Epoch 49/100
273/273 - 177s - loss: 0.4673 - sqrt_abs_min_loss: 0.4668 - accuracy: 0.3440 - val_loss: 0.4876 - val_sqrt_abs_min_loss: 0.4872 - val_accuracy: 0.2591 - 177s/epoch - 649ms/step
Epoch 50/100
273/273 - 177s - loss: 0.4643 - sqrt_abs_min_loss: 0.4638 - accuracy: 0.3472 - val_loss: 0.4846 - val_sqrt_abs_min_loss: 0.4841 - val_accuracy: 0.3377 - 177s/epoch - 650ms/step
Epoch 51/100
273/273 - 177s - loss: 0.4632 - sqrt_abs_min_loss: 0.4627 - accuracy: 0.2548 - val_loss: 0.4599 - val_sqrt_abs_min_loss: 0.4594 - val_accuracy: 0.3871 - 177s/epoch - 649ms/step
Epoch 52/100
273/273 - 177s - loss: 0.4670 - sqrt_abs_min_loss: 0.4665 - accuracy: 0.3603 - val_loss: 0.4716 - val_sqrt_abs_min_loss: 0.4711 - val_accuracy: 0.3276 - 177s/epoch - 648ms/step
Epoch 53/100
273/273 - 177s - loss: 0.4589 - sqrt_abs_min_loss: 0.4584 - accuracy: 0.3322 - val_loss: 0.4877 - val_sqrt_abs_min_loss: 0.4872 - val_accuracy: 0.3427 - 177s/epoch - 648ms/step
Epoch 54/100
273/273 - 177s - loss: 0.4713 - sqrt_abs_min_loss: 0.4708 - accuracy: 0.3173 - val_loss: 0.4924 - val_sqrt_abs_min_loss: 0.4919 - val_accuracy: 0.3054 - 177s/epoch - 648ms/step
Epoch 55/100
273/273 - 177s - loss: 0.4673 - sqrt_abs_min_loss: 0.4668 - accuracy: 0.3443 - val_loss: 0.4738 - val_sqrt_abs_min_loss: 0.4734 - val_accuracy: 0.2470 - 177s/epoch - 649ms/step
Epoch 56/100
273/273 - 177s - loss: 0.4581 - sqrt_abs_min_loss: 0.4576 - accuracy: 0.3489 - val_loss: 0.4559 - val_sqrt_abs_min_loss: 0.4554 - val_accuracy: 0.2702 - 177s/epoch - 648ms/step
Epoch 57/100
273/273 - 177s - loss: 0.4677 - sqrt_abs_min_loss: 0.4672 - accuracy: 0.3441 - val_loss: 0.4616 - val_sqrt_abs_min_loss: 0.4611 - val_accuracy: 0.2611 - 177s/epoch - 649ms/step
Epoch 58/100
273/273 - 177s - loss: 0.4584 - sqrt_abs_min_loss: 0.4579 - accuracy: 0.3252 - val_loss: 0.4702 - val_sqrt_abs_min_loss: 0.4697 - val_accuracy: 0.3165 - 177s/epoch - 649ms/step
Epoch 59/100
273/273 - 177s - loss: 0.4682 - sqrt_abs_min_loss: 0.4677 - accuracy: 0.3222 - val_loss: 0.4770 - val_sqrt_abs_min_loss: 0.4765 - val_accuracy: 0.3599 - 177s/epoch - 649ms/step
Epoch 60/100
273/273 - 177s - loss: 0.4687 - sqrt_abs_min_loss: 0.4682 - accuracy: 0.3175 - val_loss: 0.4787 - val_sqrt_abs_min_loss: 0.4783 - val_accuracy: 0.4143 - 177s/epoch - 648ms/step
Epoch 61/100
273/273 - 177s - loss: 0.4673 - sqrt_abs_min_loss: 0.4668 - accuracy: 0.3264 - val_loss: 0.4779 - val_sqrt_abs_min_loss: 0.4774 - val_accuracy: 0.2651 - 177s/epoch - 648ms/step
Epoch 62/100
273/273 - 177s - loss: 0.4572 - sqrt_abs_min_loss: 0.4567 - accuracy: 0.3157 - val_loss: 0.4553 - val_sqrt_abs_min_loss: 0.4548 - val_accuracy: 0.2742 - 177s/epoch - 648ms/step
Epoch 63/100
273/273 - 177s - loss: 0.4641 - sqrt_abs_min_loss: 0.4636 - accuracy: 0.3215 - val_loss: 0.4880 - val_sqrt_abs_min_loss: 0.4875 - val_accuracy: 0.4768 - 177s/epoch - 648ms/step
Epoch 64/100
273/273 - 177s - loss: 0.4571 - sqrt_abs_min_loss: 0.4566 - accuracy: 0.2806 - val_loss: 0.4805 - val_sqrt_abs_min_loss: 0.4800 - val_accuracy: 0.3085 - 177s/epoch - 649ms/step
Epoch 65/100
273/273 - 177s - loss: 0.4630 - sqrt_abs_min_loss: 0.4625 - accuracy: 0.3155 - val_loss: 0.4778 - val_sqrt_abs_min_loss: 0.4773 - val_accuracy: 0.3095 - 177s/epoch - 649ms/step
Epoch 66/100
273/273 - 177s - loss: 0.4694 - sqrt_abs_min_loss: 0.4689 - accuracy: 0.3265 - val_loss: 0.4671 - val_sqrt_abs_min_loss: 0.4666 - val_accuracy: 0.2601 - 177s/epoch - 648ms/step
Epoch 67/100
273/273 - 177s - loss: 0.4639 - sqrt_abs_min_loss: 0.4634 - accuracy: 0.3581 - val_loss: 0.4612 - val_sqrt_abs_min_loss: 0.4607 - val_accuracy: 0.3024 - 177s/epoch - 649ms/step
Epoch 68/100
273/273 - 177s - loss: 0.4593 - sqrt_abs_min_loss: 0.4588 - accuracy: 0.3158 - val_loss: 0.4696 - val_sqrt_abs_min_loss: 0.4691 - val_accuracy: 0.4103 - 177s/epoch - 648ms/step
Epoch 69/100
273/273 - 177s - loss: 0.4621 - sqrt_abs_min_loss: 0.4616 - accuracy: 0.3326 - val_loss: 0.4780 - val_sqrt_abs_min_loss: 0.4775 - val_accuracy: 0.4264 - 177s/epoch - 649ms/step
Epoch 70/100
273/273 - 177s - loss: 0.4565 - sqrt_abs_min_loss: 0.4560 - accuracy: 0.3456 - val_loss: 0.4799 - val_sqrt_abs_min_loss: 0.4794 - val_accuracy: 0.3770 - 177s/epoch - 649ms/step
Epoch 71/100
273/273 - 177s - loss: 0.4628 - sqrt_abs_min_loss: 0.4623 - accuracy: 0.2916 - val_loss: 0.4492 - val_sqrt_abs_min_loss: 0.4487 - val_accuracy: 0.2107 - 177s/epoch - 649ms/step
Epoch 72/100
273/273 - 177s - loss: 0.4645 - sqrt_abs_min_loss: 0.4640 - accuracy: 0.3475 - val_loss: 0.4978 - val_sqrt_abs_min_loss: 0.4973 - val_accuracy: 0.3659 - 177s/epoch - 648ms/step
Epoch 73/100
273/273 - 177s - loss: 0.4637 - sqrt_abs_min_loss: 0.4632 - accuracy: 0.3226 - val_loss: 0.4963 - val_sqrt_abs_min_loss: 0.4958 - val_accuracy: 0.4244 - 177s/epoch - 648ms/step
Epoch 74/100
273/273 - 177s - loss: 0.4602 - sqrt_abs_min_loss: 0.4597 - accuracy: 0.3035 - val_loss: 0.4665 - val_sqrt_abs_min_loss: 0.4660 - val_accuracy: 0.3508 - 177s/epoch - 648ms/step
Epoch 75/100
273/273 - 177s - loss: 0.4730 - sqrt_abs_min_loss: 0.4725 - accuracy: 0.3694 - val_loss: 0.4723 - val_sqrt_abs_min_loss: 0.4718 - val_accuracy: 0.3044 - 177s/epoch - 649ms/step
Epoch 76/100
273/273 - 177s - loss: 0.4658 - sqrt_abs_min_loss: 0.4653 - accuracy: 0.3370 - val_loss: 0.4974 - val_sqrt_abs_min_loss: 0.4969 - val_accuracy: 0.3669 - 177s/epoch - 649ms/step
Epoch 77/100
273/273 - 177s - loss: 0.4634 - sqrt_abs_min_loss: 0.4629 - accuracy: 0.3384 - val_loss: 0.4499 - val_sqrt_abs_min_loss: 0.4494 - val_accuracy: 0.3871 - 177s/epoch - 649ms/step
Epoch 78/100
273/273 - 177s - loss: 0.4646 - sqrt_abs_min_loss: 0.4641 - accuracy: 0.3285 - val_loss: 0.4753 - val_sqrt_abs_min_loss: 0.4748 - val_accuracy: 0.4446 - 177s/epoch - 648ms/step
Epoch 79/100
273/273 - 177s - loss: 0.4630 - sqrt_abs_min_loss: 0.4625 - accuracy: 0.3266 - val_loss: 0.4836 - val_sqrt_abs_min_loss: 0.4831 - val_accuracy: 0.2903 - 177s/epoch - 649ms/step
Epoch 80/100
273/273 - 177s - loss: 0.4637 - sqrt_abs_min_loss: 0.4632 - accuracy: 0.3417 - val_loss: 0.4761 - val_sqrt_abs_min_loss: 0.4756 - val_accuracy: 0.3599 - 177s/epoch - 648ms/step
Epoch 81/100
273/273 - 177s - loss: 0.4622 - sqrt_abs_min_loss: 0.4617 - accuracy: 0.3128 - val_loss: 0.4726 - val_sqrt_abs_min_loss: 0.4721 - val_accuracy: 0.3236 - 177s/epoch - 648ms/step
Epoch 82/100
273/273 - 177s - loss: 0.4645 - sqrt_abs_min_loss: 0.4640 - accuracy: 0.3310 - val_loss: 0.4692 - val_sqrt_abs_min_loss: 0.4687 - val_accuracy: 0.2127 - 177s/epoch - 648ms/step
Epoch 83/100
273/273 - 177s - loss: 0.4631 - sqrt_abs_min_loss: 0.4626 - accuracy: 0.3007 - val_loss: 0.4846 - val_sqrt_abs_min_loss: 0.4841 - val_accuracy: 0.2792 - 177s/epoch - 648ms/step
Epoch 84/100
273/273 - 177s - loss: 0.4604 - sqrt_abs_min_loss: 0.4599 - accuracy: 0.3152 - val_loss: 0.4892 - val_sqrt_abs_min_loss: 0.4887 - val_accuracy: 0.2258 - 177s/epoch - 648ms/step
Epoch 85/100
273/273 - 177s - loss: 0.4563 - sqrt_abs_min_loss: 0.4558 - accuracy: 0.3337 - val_loss: 0.4519 - val_sqrt_abs_min_loss: 0.4514 - val_accuracy: 0.3448 - 177s/epoch - 649ms/step
Epoch 86/100
273/273 - 177s - loss: 0.4567 - sqrt_abs_min_loss: 0.4562 - accuracy: 0.2999 - val_loss: 0.4697 - val_sqrt_abs_min_loss: 0.4692 - val_accuracy: 0.2772 - 177s/epoch - 648ms/step
Epoch 87/100
273/273 - 177s - loss: 0.4636 - sqrt_abs_min_loss: 0.4631 - accuracy: 0.3059 - val_loss: 0.4678 - val_sqrt_abs_min_loss: 0.4673 - val_accuracy: 0.2974 - 177s/epoch - 648ms/step
Epoch 88/100
273/273 - 177s - loss: 0.4656 - sqrt_abs_min_loss: 0.4651 - accuracy: 0.3181 - val_loss: 0.4830 - val_sqrt_abs_min_loss: 0.4825 - val_accuracy: 0.2732 - 177s/epoch - 649ms/step
Epoch 89/100
273/273 - 177s - loss: 0.4662 - sqrt_abs_min_loss: 0.4657 - accuracy: 0.3458 - val_loss: 0.4745 - val_sqrt_abs_min_loss: 0.4740 - val_accuracy: 0.3004 - 177s/epoch - 648ms/step
Epoch 90/100
273/273 - 177s - loss: 0.4669 - sqrt_abs_min_loss: 0.4664 - accuracy: 0.3544 - val_loss: 0.4826 - val_sqrt_abs_min_loss: 0.4821 - val_accuracy: 0.3468 - 177s/epoch - 649ms/step
Epoch 91/100
273/273 - 177s - loss: 0.4706 - sqrt_abs_min_loss: 0.4701 - accuracy: 0.3060 - val_loss: 0.4680 - val_sqrt_abs_min_loss: 0.4675 - val_accuracy: 0.3317 - 177s/epoch - 648ms/step
Epoch 92/100
273/273 - 178s - loss: 0.4701 - sqrt_abs_min_loss: 0.4696 - accuracy: 0.3806 - val_loss: 0.4664 - val_sqrt_abs_min_loss: 0.4659 - val_accuracy: 0.3690 - 178s/epoch - 651ms/step
Epoch 93/100
273/273 - 177s - loss: 0.4681 - sqrt_abs_min_loss: 0.4676 - accuracy: 0.3483 - val_loss: 0.4733 - val_sqrt_abs_min_loss: 0.4728 - val_accuracy: 0.4052 - 177s/epoch - 650ms/step
Epoch 94/100
273/273 - 177s - loss: 0.4677 - sqrt_abs_min_loss: 0.4672 - accuracy: 0.3364 - val_loss: 0.4696 - val_sqrt_abs_min_loss: 0.4691 - val_accuracy: 0.2802 - 177s/epoch - 649ms/step
Epoch 95/100
273/273 - 177s - loss: 0.4598 - sqrt_abs_min_loss: 0.4593 - accuracy: 0.3156 - val_loss: 0.4827 - val_sqrt_abs_min_loss: 0.4822 - val_accuracy: 0.3679 - 177s/epoch - 648ms/step
Epoch 96/100
273/273 - 177s - loss: 0.4676 - sqrt_abs_min_loss: 0.4671 - accuracy: 0.3244 - val_loss: 0.4558 - val_sqrt_abs_min_loss: 0.4553 - val_accuracy: 0.3276 - 177s/epoch - 649ms/step
Epoch 97/100
273/273 - 177s - loss: 0.4626 - sqrt_abs_min_loss: 0.4621 - accuracy: 0.3519 - val_loss: 0.4529 - val_sqrt_abs_min_loss: 0.4524 - val_accuracy: 0.4073 - 177s/epoch - 650ms/step
Epoch 98/100
273/273 - 177s - loss: 0.4665 - sqrt_abs_min_loss: 0.4660 - accuracy: 0.3569 - val_loss: 0.4810 - val_sqrt_abs_min_loss: 0.4805 - val_accuracy: 0.3155 - 177s/epoch - 649ms/step
Epoch 99/100
273/273 - 177s - loss: 0.4628 - sqrt_abs_min_loss: 0.4623 - accuracy: 0.3071 - val_loss: 0.4587 - val_sqrt_abs_min_loss: 0.4582 - val_accuracy: 0.3034 - 177s/epoch - 648ms/step
Epoch 100/100
273/273 - 177s - loss: 0.4638 - sqrt_abs_min_loss: 0.4633 - accuracy: 0.3439 - val_loss: 0.4917 - val_sqrt_abs_min_loss: 0.4912 - val_accuracy: 0.3750 - 177s/epoch - 648ms/step
############### PREDICTIONS ###############
----------0----------
phi1 54.7
PHI 36.1
phi2 23.5
1/1 [==============================] - ETA: 0s1/1 [==============================] - 1s 776ms/step
predicted values [[108.408775 -12.759614  89.90669 ]]
----------1----------
phi1 76.0
PHI 83.7
phi2 2.9
1/1 [==============================] - ETA: 0s1/1 [==============================] - 0s 29ms/step
predicted values [[108.408775 -12.759614  89.90669 ]]
----------2----------
phi1 17.8
PHI 63.8
phi2 50.8
1/1 [==============================] - ETA: 0s1/1 [==============================] - 0s 29ms/step
predicted values [[108.408775 -12.759614  89.90669 ]]
----------3----------
phi1 17.5
PHI 15.5
phi2 50.4
1/1 [==============================] - ETA: 0s1/1 [==============================] - 0s 25ms/step
predicted values [[108.408775 -12.759614  89.90669 ]]
----------4----------
phi1 47.5
PHI 32.6
phi2 29.8
1/1 [==============================] - ETA: 0s1/1 [==============================] - 0s 28ms/step
predicted values [[108.408775 -12.759614  89.90669 ]]
----------5----------
phi1 33.3
PHI 39.6
phi2 28.5
1/1 [==============================] - ETA: 0s1/1 [==============================] - 0s 26ms/step
predicted values [[108.408775 -12.759614  89.90669 ]]
----------6----------
phi1 60.8
PHI 28.2
phi2 9.9
1/1 [==============================] - ETA: 0s1/1 [==============================] - 0s 26ms/step
predicted values [[108.408775 -12.759614  89.90669 ]]
----------7----------
phi1 26.6
PHI 6.8
phi2 75.8
1/1 [==============================] - ETA: 0s1/1 [==============================] - 0s 26ms/step
predicted values [[108.408775 -12.759614  89.90669 ]]
----------8----------
phi1 39.3
PHI 40.9
phi2 7.6
1/1 [==============================] - ETA: 0s1/1 [==============================] - 0s 30ms/step
predicted values [[108.408775 -12.759614  89.90669 ]]
----------9----------
phi1 3.9
PHI 87.4
phi2 25.8
1/1 [==============================] - ETA: 0s1/1 [==============================] - 0s 27ms/step
predicted values [[108.408775 -12.759614  89.90669 ]]
############### PREDICTIONS ###############
 1/31 [..............................] - ETA: 10s - loss: 0.4899 - sqrt_abs_min_loss: 0.4894 - accuracy: 0.1875 2/31 [>.............................] - ETA: 6s - loss: 0.4896 - sqrt_abs_min_loss: 0.4891 - accuracy: 0.1875  3/31 [=>............................] - ETA: 6s - loss: 0.4916 - sqrt_abs_min_loss: 0.4911 - accuracy: 0.1875 4/31 [==>...........................] - ETA: 5s - loss: 0.4931 - sqrt_abs_min_loss: 0.4926 - accuracy: 0.1953 5/31 [===>..........................] - ETA: 5s - loss: 0.4943 - sqrt_abs_min_loss: 0.4938 - accuracy: 0.2000 6/31 [====>.........................] - ETA: 5s - loss: 0.4941 - sqrt_abs_min_loss: 0.4936 - accuracy: 0.1979 7/31 [=====>........................] - ETA: 5s - loss: 0.4942 - sqrt_abs_min_loss: 0.4937 - accuracy: 0.2009 8/31 [======>.......................] - ETA: 4s - loss: 0.4936 - sqrt_abs_min_loss: 0.4931 - accuracy: 0.1992 9/31 [=======>......................] - ETA: 4s - loss: 0.4941 - sqrt_abs_min_loss: 0.4936 - accuracy: 0.201410/31 [========>.....................] - ETA: 4s - loss: 0.4938 - sqrt_abs_min_loss: 0.4933 - accuracy: 0.206211/31 [=========>....................] - ETA: 4s - loss: 0.4936 - sqrt_abs_min_loss: 0.4931 - accuracy: 0.210212/31 [==========>...................] - ETA: 4s - loss: 0.4937 - sqrt_abs_min_loss: 0.4932 - accuracy: 0.213513/31 [===========>..................] - ETA: 3s - loss: 0.4936 - sqrt_abs_min_loss: 0.4931 - accuracy: 0.216314/31 [============>.................] - ETA: 3s - loss: 0.4939 - sqrt_abs_min_loss: 0.4934 - accuracy: 0.218815/31 [=============>................] - ETA: 3s - loss: 0.4940 - sqrt_abs_min_loss: 0.4935 - accuracy: 0.220816/31 [==============>...............] - ETA: 3s - loss: 0.4939 - sqrt_abs_min_loss: 0.4934 - accuracy: 0.224617/31 [===============>..............] - ETA: 3s - loss: 0.4936 - sqrt_abs_min_loss: 0.4931 - accuracy: 0.226118/31 [================>.............] - ETA: 2s - loss: 0.4933 - sqrt_abs_min_loss: 0.4928 - accuracy: 0.227419/31 [=================>............] - ETA: 2s - loss: 0.4931 - sqrt_abs_min_loss: 0.4926 - accuracy: 0.230320/31 [==================>...........] - ETA: 2s - loss: 0.4928 - sqrt_abs_min_loss: 0.4923 - accuracy: 0.232821/31 [===================>..........] - ETA: 2s - loss: 0.4924 - sqrt_abs_min_loss: 0.4919 - accuracy: 0.235122/31 [====================>.........] - ETA: 1s - loss: 0.4923 - sqrt_abs_min_loss: 0.4918 - accuracy: 0.238623/31 [=====================>........] - ETA: 1s - loss: 0.4923 - sqrt_abs_min_loss: 0.4918 - accuracy: 0.243224/31 [======================>.......] - ETA: 1s - loss: 0.4923 - sqrt_abs_min_loss: 0.4918 - accuracy: 0.247425/31 [=======================>......] - ETA: 1s - loss: 0.4922 - sqrt_abs_min_loss: 0.4917 - accuracy: 0.251226/31 [========================>.....] - ETA: 1s - loss: 0.4921 - sqrt_abs_min_loss: 0.4916 - accuracy: 0.254827/31 [=========================>....] - ETA: 0s - loss: 0.4918 - sqrt_abs_min_loss: 0.4913 - accuracy: 0.256928/31 [==========================>...] - ETA: 0s - loss: 0.4916 - sqrt_abs_min_loss: 0.4911 - accuracy: 0.258929/31 [===========================>..] - ETA: 0s - loss: 0.4915 - sqrt_abs_min_loss: 0.4910 - accuracy: 0.261930/31 [============================>.] - ETA: 0s - loss: 0.4912 - sqrt_abs_min_loss: 0.4907 - accuracy: 0.264631/31 [==============================] - ETA: 0s - loss: 0.4909 - sqrt_abs_min_loss: 0.4904 - accuracy: 0.267131/31 [==============================] - 7s 218ms/step - loss: 0.4909 - sqrt_abs_min_loss: 0.4904 - accuracy: 0.2671
test loss, test acc: [0.4909195303916931, 0.4904235005378723, 0.2671371102333069]

------------------------------------------------------------
Sender: LSF System <lsfadmin@hpc.dtu.dk>
Subject: Job 15232329: <s202741-train> in cluster <dcc> Done

Job <s202741-train> was submitted from host <n-62-20-1> by user <s202741> in cluster <dcc> at Sun Jan 22 12:32:29 2023
Job was executed on host(s) <4*n-62-20-13>, in queue <gpuv100>, as user <s202741> in cluster <dcc> at Sun Jan 22 15:29:52 2023
</zhome/ab/7/153983> was used as the home directory.
</zhome/ab/7/153983/project/scripts> was used as the working directory.
Started at Sun Jan 22 15:29:52 2023
Terminated at Sun Jan 22 20:27:34 2023
Results reported at Sun Jan 22 20:27:34 2023

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#!/bin/bash
### General options
### -- specify queue --   NOTE: TitanX is significantly faster than K80
#BSUB -q gpuv100
#BSUB -gpu "num=1:mode=exclusive_process"
### -- set the job Name --
#BSUB -J s202741-train
### -- ask for number of cores (default: 1) --
#BSUB -n 4
#BSUB -R "span[hosts=1]"
### -- set walltime limit: hh:mm --  maximum 24 hours for GPU-queues right now
#BSUB -W 5:00
# request 5GB of memory
#BSUB -R "rusage[mem=5GB]"
### -- Specify the output and error file. %J is the job-id --
### -- -o and -e mean append, -oo and -eo mean overwrite --
#BSUB -o iter6/Logs/RMSprop_sqrt_abs_min_loss_0001_model_k_%J.out
# -- end of LSF options --

# Necessary modules
cd ..
source venv/bin/activate

python trainModelIter3.py 100 "RMSprop(learning_rate=0.001)" "sqrt_abs_min_loss" "black_background_500x500.csv" 2 "RMSprop_sqrt_abs_min_loss_0001_model_k_" "iter6" "load_model_k"

    
------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   22353.61 sec.
    Max Memory :                                 3014 MB
    Average Memory :                             2907.00 MB
    Total Requested Memory :                     20480.00 MB
    Delta Memory :                               17466.00 MB
    Max Swap :                                   -
    Max Processes :                              4
    Max Threads :                                33
    Run time :                                   17862 sec.
    Turnaround time :                            28505 sec.

The output (if any) is above this job summary.

