Loaded dependency [python3/3.10.7]: gcc/11.3.0-binutils-2.38
Loaded module: python3/3.10.7

Loading python3/3.10.7
  Loading requirement: gcc/11.3.0-binutils-2.38
Loaded module: cuda/11.6
Loaded module: cudnn/v8.3.2.44-prod-cuda-11.X
2023-01-24 16:23:04.505269: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F AVX512_VNNI FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2023-01-24 16:23:04.641041: I tensorflow/core/util/port.cc:104] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2023-01-24 16:23:06.447946: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer.so.7'; dlerror: libnvinfer.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /appl/cudnn/v8.3.2.44-prod-cuda-11.5/lib:/appl/cuda/11.6.0/lib64:/appl/python/3.10.7/lib:/appl/gcc/11.3.0-binutils-2.38/lib64:/appl/gcc/11.3.0-binutils-2.38/lib:/lsf/10.1/linux3.10-glibc2.17-x86_64/lib
2023-01-24 16:23:06.448535: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer_plugin.so.7'; dlerror: libnvinfer_plugin.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /appl/cudnn/v8.3.2.44-prod-cuda-11.5/lib:/appl/cuda/11.6.0/lib64:/appl/python/3.10.7/lib:/appl/gcc/11.3.0-binutils-2.38/lib64:/appl/gcc/11.3.0-binutils-2.38/lib:/lsf/10.1/linux3.10-glibc2.17-x86_64/lib
2023-01-24 16:23:06.448545: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Cannot dlopen some TensorRT libraries. If you would like to use Nvidia GPU with TensorRT, please make sure the missing libraries mentioned above are installed properly.
2023-01-24 16:23:11.581020: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F AVX512_VNNI FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2023-01-24 16:23:12.183063: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1613] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 30960 MB memory:  -> device: 0, name: Tesla V100-PCIE-32GB, pci bus id: 0000:d8:00.0, compute capability: 7.0
Epochs:  100
Optimizer:  RMSprop(learning_rate=0.002)
Loss function name:  abs_loss_function
Csv file used:  black_background_500x500.csv
Verbose:  2
Unique name:  RMSprop_abs_loss_function_0002_model_e_
Output folder:  iter6
Model name:  load_model_e
 
        ################ MODEL ############### 
 
        inputs = keras.Input(shape=(input_size, input_size, 1))
        x = layers.Conv2D(filters=16, kernel_size=11, activation="relu")(inputs)
        x = layers.Conv2D(filters=16, kernel_size=7, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=16, kernel_size=5, activation="relu")(x)
        x = layers.Conv2D(filters=16, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=16, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=16, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=16, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=16, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=16, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=16, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Flatten()(x)
        x = layers.Dense(128, activation="relu", kernel_regularizer=keras.regularizers.l1(0.01))(x)
        x = layers.Dense(16, activation="sigmoid", kernel_regularizer=keras.regularizers.l1(0.01))(x) 
        outputs = layers.Dense(3)(x)

        model = keras.Model(inputs=inputs, outputs=outputs)
    
Model: "model"
_________________________________________________________________
 Layer (type)                Output Shape              Param #   
=================================================================
 input_1 (InputLayer)        [(None, 500, 500, 1)]     0         
                                                                 
 conv2d (Conv2D)             (None, 490, 490, 16)      1952      
                                                                 
 conv2d_1 (Conv2D)           (None, 484, 484, 16)      12560     
                                                                 
 max_pooling2d (MaxPooling2D  (None, 242, 242, 16)     0         
 )                                                               
                                                                 
 conv2d_2 (Conv2D)           (None, 238, 238, 16)      6416      
                                                                 
 conv2d_3 (Conv2D)           (None, 236, 236, 16)      2320      
                                                                 
 max_pooling2d_1 (MaxPooling  (None, 118, 118, 16)     0         
 2D)                                                             
                                                                 
 conv2d_4 (Conv2D)           (None, 116, 116, 16)      2320      
                                                                 
 conv2d_5 (Conv2D)           (None, 114, 114, 16)      2320      
                                                                 
 max_pooling2d_2 (MaxPooling  (None, 57, 57, 16)       0         
 2D)                                                             
                                                                 
 conv2d_6 (Conv2D)           (None, 55, 55, 16)        2320      
                                                                 
 conv2d_7 (Conv2D)           (None, 53, 53, 16)        2320      
                                                                 
 max_pooling2d_3 (MaxPooling  (None, 26, 26, 16)       0         
 2D)                                                             
                                                                 
 conv2d_8 (Conv2D)           (None, 24, 24, 16)        2320      
                                                                 
 conv2d_9 (Conv2D)           (None, 22, 22, 16)        2320      
                                                                 
 max_pooling2d_4 (MaxPooling  (None, 11, 11, 16)       0         
 2D)                                                             
                                                                 
 flatten (Flatten)           (None, 1936)              0         
                                                                 
 dense (Dense)               (None, 128)               247936    
                                                                 
 dense_1 (Dense)             (None, 16)                2064      
                                                                 
 dense_2 (Dense)             (None, 3)                 51        
                                                                 
=================================================================
Total params: 287,219
Trainable params: 287,219
Non-trainable params: 0
_________________________________________________________________
/zhome/ab/7/153983/project/venv/lib/python3.10/site-packages/keras/utils/image_utils.py:409: UserWarning: grayscale is deprecated. Please use color_mode = "grayscale"
  warnings.warn(
Epoch 1/100
2023-01-24 16:23:15.139794: I tensorflow/compiler/xla/stream_executor/cuda/cuda_dnn.cc:428] Loaded cuDNN version 8302
273/273 - 66s - loss: 4.0563 - abs_loss_function: 0.2592 - accuracy: 0.3326 - val_loss: 2.8056 - val_abs_loss_function: 0.2551 - val_accuracy: 0.2923 - 66s/epoch - 242ms/step
Epoch 2/100
273/273 - 61s - loss: 2.7079 - abs_loss_function: 0.2648 - accuracy: 0.3362 - val_loss: 2.9034 - val_abs_loss_function: 0.2657 - val_accuracy: 0.3175 - 61s/epoch - 223ms/step
Epoch 3/100
273/273 - 61s - loss: 2.5985 - abs_loss_function: 0.2498 - accuracy: 0.3452 - val_loss: 2.4596 - val_abs_loss_function: 0.2910 - val_accuracy: 0.3054 - 61s/epoch - 224ms/step
Epoch 4/100
273/273 - 61s - loss: 2.4185 - abs_loss_function: 0.2496 - accuracy: 0.3298 - val_loss: 2.3389 - val_abs_loss_function: 0.2686 - val_accuracy: 0.4274 - 61s/epoch - 224ms/step
Epoch 5/100
273/273 - 61s - loss: 2.5721 - abs_loss_function: 0.2552 - accuracy: 0.3433 - val_loss: 2.9070 - val_abs_loss_function: 0.2564 - val_accuracy: 0.3982 - 61s/epoch - 224ms/step
Epoch 6/100
273/273 - 60s - loss: 2.5562 - abs_loss_function: 0.2500 - accuracy: 0.3281 - val_loss: 2.3814 - val_abs_loss_function: 0.2678 - val_accuracy: 0.3075 - 60s/epoch - 220ms/step
Epoch 7/100
273/273 - 61s - loss: 2.4590 - abs_loss_function: 0.2496 - accuracy: 0.3330 - val_loss: 2.5169 - val_abs_loss_function: 0.2561 - val_accuracy: 0.2843 - 61s/epoch - 222ms/step
Epoch 8/100
273/273 - 61s - loss: 2.5089 - abs_loss_function: 0.2500 - accuracy: 0.3142 - val_loss: 2.3282 - val_abs_loss_function: 0.2612 - val_accuracy: 0.3306 - 61s/epoch - 223ms/step
Epoch 9/100
273/273 - 63s - loss: 2.5094 - abs_loss_function: 0.2495 - accuracy: 0.3298 - val_loss: 2.3784 - val_abs_loss_function: 0.2675 - val_accuracy: 0.3579 - 63s/epoch - 229ms/step
Epoch 10/100
273/273 - 61s - loss: 2.4651 - abs_loss_function: 0.2489 - accuracy: 0.3249 - val_loss: 2.5087 - val_abs_loss_function: 0.2491 - val_accuracy: 0.2712 - 61s/epoch - 223ms/step
Epoch 11/100
273/273 - 61s - loss: 2.4387 - abs_loss_function: 0.2443 - accuracy: 0.3340 - val_loss: 2.3899 - val_abs_loss_function: 0.2576 - val_accuracy: 0.2994 - 61s/epoch - 224ms/step
Epoch 12/100
273/273 - 60s - loss: 2.5815 - abs_loss_function: 0.2520 - accuracy: 0.3306 - val_loss: 2.3215 - val_abs_loss_function: 0.2489 - val_accuracy: 0.4214 - 60s/epoch - 221ms/step
Epoch 13/100
273/273 - 60s - loss: 2.5307 - abs_loss_function: 0.2472 - accuracy: 0.3318 - val_loss: 2.3836 - val_abs_loss_function: 0.2443 - val_accuracy: 0.2440 - 60s/epoch - 220ms/step
Epoch 14/100
273/273 - 60s - loss: 2.3629 - abs_loss_function: 0.2474 - accuracy: 0.3420 - val_loss: 2.3348 - val_abs_loss_function: 0.2430 - val_accuracy: 0.2974 - 60s/epoch - 221ms/step
Epoch 15/100
273/273 - 61s - loss: 2.3553 - abs_loss_function: 0.2400 - accuracy: 0.3410 - val_loss: 2.4012 - val_abs_loss_function: 0.2623 - val_accuracy: 0.3730 - 61s/epoch - 224ms/step
Epoch 16/100
273/273 - 61s - loss: 2.3564 - abs_loss_function: 0.2410 - accuracy: 0.3386 - val_loss: 2.3344 - val_abs_loss_function: 0.2426 - val_accuracy: 0.3569 - 61s/epoch - 224ms/step
Epoch 17/100
273/273 - 61s - loss: 2.3485 - abs_loss_function: 0.2332 - accuracy: 0.3354 - val_loss: 2.3858 - val_abs_loss_function: 0.2469 - val_accuracy: 0.3236 - 61s/epoch - 223ms/step
Epoch 18/100
273/273 - 61s - loss: 2.3615 - abs_loss_function: 0.2461 - accuracy: 0.3054 - val_loss: 2.3344 - val_abs_loss_function: 0.2426 - val_accuracy: 0.3720 - 61s/epoch - 222ms/step
Epoch 19/100
273/273 - 61s - loss: 2.3607 - abs_loss_function: 0.2454 - accuracy: 0.3387 - val_loss: 2.3871 - val_abs_loss_function: 0.2482 - val_accuracy: 0.3528 - 61s/epoch - 223ms/step
Epoch 20/100
273/273 - 61s - loss: 2.3574 - abs_loss_function: 0.2420 - accuracy: 0.3211 - val_loss: 2.3408 - val_abs_loss_function: 0.2490 - val_accuracy: 0.2923 - 61s/epoch - 224ms/step
Epoch 21/100
273/273 - 59s - loss: 2.3585 - abs_loss_function: 0.2433 - accuracy: 0.3353 - val_loss: 2.3761 - val_abs_loss_function: 0.2371 - val_accuracy: 0.3478 - 59s/epoch - 216ms/step
Epoch 22/100
273/273 - 61s - loss: 2.3542 - abs_loss_function: 0.2387 - accuracy: 0.3637 - val_loss: 2.3272 - val_abs_loss_function: 0.2354 - val_accuracy: 0.4718 - 61s/epoch - 223ms/step
Epoch 23/100
273/273 - 61s - loss: 2.3573 - abs_loss_function: 0.2420 - accuracy: 0.3521 - val_loss: 2.4146 - val_abs_loss_function: 0.2757 - val_accuracy: 0.3196 - 61s/epoch - 224ms/step
Epoch 24/100
273/273 - 61s - loss: 2.3528 - abs_loss_function: 0.2373 - accuracy: 0.3088 - val_loss: 2.3346 - val_abs_loss_function: 0.2428 - val_accuracy: 0.3085 - 61s/epoch - 224ms/step
Epoch 25/100
273/273 - 61s - loss: 2.3622 - abs_loss_function: 0.2469 - accuracy: 0.3146 - val_loss: 2.3828 - val_abs_loss_function: 0.2439 - val_accuracy: 0.2994 - 61s/epoch - 222ms/step
Epoch 26/100
273/273 - 61s - loss: 2.3492 - abs_loss_function: 0.2338 - accuracy: 0.3449 - val_loss: 2.3372 - val_abs_loss_function: 0.2453 - val_accuracy: 0.3599 - 61s/epoch - 224ms/step
Epoch 27/100
273/273 - 62s - loss: 2.3522 - abs_loss_function: 0.2369 - accuracy: 0.3597 - val_loss: 2.3959 - val_abs_loss_function: 0.2570 - val_accuracy: 0.3942 - 62s/epoch - 227ms/step
Epoch 28/100
273/273 - 62s - loss: 2.3650 - abs_loss_function: 0.2495 - accuracy: 0.3777 - val_loss: 2.3500 - val_abs_loss_function: 0.2582 - val_accuracy: 0.3931 - 62s/epoch - 225ms/step
Epoch 29/100
273/273 - 60s - loss: 2.3605 - abs_loss_function: 0.2453 - accuracy: 0.3407 - val_loss: 2.3885 - val_abs_loss_function: 0.2495 - val_accuracy: 0.4345 - 60s/epoch - 221ms/step
Epoch 30/100
273/273 - 63s - loss: 2.3607 - abs_loss_function: 0.2452 - accuracy: 0.3508 - val_loss: 2.3246 - val_abs_loss_function: 0.2328 - val_accuracy: 0.4738 - 63s/epoch - 231ms/step
Epoch 31/100
273/273 - 62s - loss: 2.3584 - abs_loss_function: 0.2431 - accuracy: 0.3474 - val_loss: 2.3925 - val_abs_loss_function: 0.2535 - val_accuracy: 0.3629 - 62s/epoch - 227ms/step
Epoch 32/100
273/273 - 63s - loss: 2.3567 - abs_loss_function: 0.2412 - accuracy: 0.3880 - val_loss: 2.3588 - val_abs_loss_function: 0.2670 - val_accuracy: 0.2933 - 63s/epoch - 229ms/step
Epoch 33/100
273/273 - 63s - loss: 2.3544 - abs_loss_function: 0.2392 - accuracy: 0.3510 - val_loss: 2.3965 - val_abs_loss_function: 0.2576 - val_accuracy: 0.2329 - 63s/epoch - 229ms/step
Epoch 34/100
273/273 - 62s - loss: 2.3604 - abs_loss_function: 0.2449 - accuracy: 0.3515 - val_loss: 2.3558 - val_abs_loss_function: 0.2639 - val_accuracy: 0.2591 - 62s/epoch - 228ms/step
Epoch 35/100
273/273 - 62s - loss: 2.3556 - abs_loss_function: 0.2403 - accuracy: 0.3401 - val_loss: 2.3975 - val_abs_loss_function: 0.2586 - val_accuracy: 0.3317 - 62s/epoch - 226ms/step
Epoch 36/100
273/273 - 62s - loss: 2.3526 - abs_loss_function: 0.2371 - accuracy: 0.3391 - val_loss: 2.3482 - val_abs_loss_function: 0.2564 - val_accuracy: 0.3942 - 62s/epoch - 226ms/step
Epoch 37/100
273/273 - 62s - loss: 2.3494 - abs_loss_function: 0.2341 - accuracy: 0.3486 - val_loss: 2.3860 - val_abs_loss_function: 0.2471 - val_accuracy: 0.3226 - 62s/epoch - 228ms/step
Epoch 38/100
273/273 - 63s - loss: 2.3589 - abs_loss_function: 0.2435 - accuracy: 0.3236 - val_loss: 2.3616 - val_abs_loss_function: 0.2697 - val_accuracy: 0.4002 - 63s/epoch - 230ms/step
Epoch 39/100
273/273 - 61s - loss: 2.3590 - abs_loss_function: 0.2437 - accuracy: 0.3181 - val_loss: 2.3919 - val_abs_loss_function: 0.2530 - val_accuracy: 0.2167 - 61s/epoch - 223ms/step
Epoch 40/100
273/273 - 63s - loss: 2.3675 - abs_loss_function: 0.2521 - accuracy: 0.3426 - val_loss: 2.3480 - val_abs_loss_function: 0.2561 - val_accuracy: 0.2238 - 63s/epoch - 231ms/step
Epoch 41/100
273/273 - 62s - loss: 2.3630 - abs_loss_function: 0.2478 - accuracy: 0.3528 - val_loss: 2.3922 - val_abs_loss_function: 0.2533 - val_accuracy: 0.1724 - 62s/epoch - 226ms/step
Epoch 42/100
273/273 - 62s - loss: 2.3583 - abs_loss_function: 0.2429 - accuracy: 0.3537 - val_loss: 2.3700 - val_abs_loss_function: 0.2782 - val_accuracy: 0.3276 - 62s/epoch - 225ms/step
Epoch 43/100
