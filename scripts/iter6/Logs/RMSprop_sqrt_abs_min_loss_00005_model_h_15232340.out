Loaded dependency [python3/3.10.7]: gcc/11.3.0-binutils-2.38
Loaded module: python3/3.10.7

Loading python3/3.10.7
  Loading requirement: gcc/11.3.0-binutils-2.38
Loaded module: cuda/11.6
Loaded module: cudnn/v8.3.2.44-prod-cuda-11.X
2023-01-22 22:00:43.237763: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2023-01-22 22:00:48.993441: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer.so.7'; dlerror: libnvinfer.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /appl/cudnn/v8.3.2.44-prod-cuda-11.5/lib:/appl/cuda/11.6.0/lib64:/appl/python/3.10.7/lib:/appl/gcc/11.3.0-binutils-2.38/lib64:/appl/gcc/11.3.0-binutils-2.38/lib:/lsf/10.1/linux3.10-glibc2.17-x86_64/lib
2023-01-22 22:00:48.994634: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer_plugin.so.7'; dlerror: libnvinfer_plugin.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /appl/cudnn/v8.3.2.44-prod-cuda-11.5/lib:/appl/cuda/11.6.0/lib64:/appl/python/3.10.7/lib:/appl/gcc/11.3.0-binutils-2.38/lib64:/appl/gcc/11.3.0-binutils-2.38/lib:/lsf/10.1/linux3.10-glibc2.17-x86_64/lib
2023-01-22 22:00:48.994646: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Cannot dlopen some TensorRT libraries. If you would like to use Nvidia GPU with TensorRT, please make sure the missing libraries mentioned above are installed properly.
2023-01-22 22:00:56.807286: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2023-01-22 22:00:58.492227: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1613] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 30961 MB memory:  -> device: 0, name: Tesla V100-SXM2-32GB, pci bus id: 0000:3a:00.0, compute capability: 7.0
Epochs:  100
Optimizer:  RMSprop(learning_rate=0.0005)
Loss function name:  sqrt_abs_min_loss
Csv file used:  black_background_500x500.csv
Verbose:  2
Unique name:  RMSprop_sqrt_abs_min_loss_00005_model_h_
Output folder:  iter6
Model name:  load_model_h
 
        ################ MODEL ############### 

        inputs = keras.Input(shape=(input_size, input_size, 1))
        x = layers.Conv2D(filters=64, kernel_size=11, activation="relu")(inputs)
        x = layers.Conv2D(filters=64, kernel_size=11, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=5, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=5, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Flatten()(x)
        x = layers.Dense(210, activation="relu")(x)
        x = layers.Dense(210, activation="relu")(x)
        x = layers.Dense(210, activation="relu")(x)
        x = layers.Dense(32, activation="sigmoid")(x)
        outputs = layers.Dense(3)(x)

        model = keras.Model(inputs=inputs, outputs=outputs)
    
Model: "model"
_________________________________________________________________
 Layer (type)                Output Shape              Param #   
=================================================================
 input_1 (InputLayer)        [(None, 500, 500, 1)]     0         
                                                                 
 conv2d (Conv2D)             (None, 490, 490, 64)      7808      
                                                                 
 conv2d_1 (Conv2D)           (None, 480, 480, 64)      495680    
                                                                 
 max_pooling2d (MaxPooling2D  (None, 240, 240, 64)     0         
 )                                                               
                                                                 
 conv2d_2 (Conv2D)           (None, 236, 236, 64)      102464    
                                                                 
 conv2d_3 (Conv2D)           (None, 232, 232, 64)      102464    
                                                                 
 max_pooling2d_1 (MaxPooling  (None, 116, 116, 64)     0         
 2D)                                                             
                                                                 
 conv2d_4 (Conv2D)           (None, 114, 114, 64)      36928     
                                                                 
 conv2d_5 (Conv2D)           (None, 112, 112, 64)      36928     
                                                                 
 max_pooling2d_2 (MaxPooling  (None, 56, 56, 64)       0         
 2D)                                                             
                                                                 
 conv2d_6 (Conv2D)           (None, 54, 54, 64)        36928     
                                                                 
 conv2d_7 (Conv2D)           (None, 52, 52, 64)        36928     
                                                                 
 max_pooling2d_3 (MaxPooling  (None, 26, 26, 64)       0         
 2D)                                                             
                                                                 
 conv2d_8 (Conv2D)           (None, 24, 24, 64)        36928     
                                                                 
 conv2d_9 (Conv2D)           (None, 22, 22, 64)        36928     
                                                                 
 max_pooling2d_4 (MaxPooling  (None, 11, 11, 64)       0         
 2D)                                                             
                                                                 
 conv2d_10 (Conv2D)          (None, 9, 9, 64)          36928     
                                                                 
 conv2d_11 (Conv2D)          (None, 7, 7, 64)          36928     
                                                                 
 max_pooling2d_5 (MaxPooling  (None, 3, 3, 64)         0         
 2D)                                                             
                                                                 
 flatten (Flatten)           (None, 576)               0         
                                                                 
 dense (Dense)               (None, 210)               121170    
                                                                 
 dense_1 (Dense)             (None, 210)               44310     
                                                                 
 dense_2 (Dense)             (None, 210)               44310     
                                                                 
 dense_3 (Dense)             (None, 32)                6752      
                                                                 
 dense_4 (Dense)             (None, 3)                 99        
                                                                 
=================================================================
Total params: 1,220,481
Trainable params: 1,220,481
Non-trainable params: 0
_________________________________________________________________
/zhome/ab/7/153983/project/venv/lib/python3.10/site-packages/keras/utils/image_utils.py:409: UserWarning: grayscale is deprecated. Please use color_mode = "grayscale"
  warnings.warn(
Epoch 1/100
2023-01-22 22:01:04.008679: I tensorflow/compiler/xla/stream_executor/cuda/cuda_dnn.cc:428] Loaded cuDNN version 8302
273/273 - 253s - loss: 0.4782 - sqrt_abs_min_loss: 0.4782 - accuracy: 0.2976 - val_loss: 0.4759 - val_sqrt_abs_min_loss: 0.4759 - val_accuracy: 0.3558 - 253s/epoch - 927ms/step
Epoch 2/100
273/273 - 223s - loss: 0.4654 - sqrt_abs_min_loss: 0.4654 - accuracy: 0.3195 - val_loss: 0.4697 - val_sqrt_abs_min_loss: 0.4697 - val_accuracy: 0.2823 - 223s/epoch - 816ms/step
Epoch 3/100
273/273 - 222s - loss: 0.4664 - sqrt_abs_min_loss: 0.4664 - accuracy: 0.3371 - val_loss: 0.4671 - val_sqrt_abs_min_loss: 0.4671 - val_accuracy: 0.2571 - 222s/epoch - 815ms/step
Epoch 4/100
273/273 - 222s - loss: 0.4682 - sqrt_abs_min_loss: 0.4682 - accuracy: 0.3524 - val_loss: 0.4618 - val_sqrt_abs_min_loss: 0.4618 - val_accuracy: 0.3790 - 222s/epoch - 815ms/step
Epoch 5/100
273/273 - 223s - loss: 0.4664 - sqrt_abs_min_loss: 0.4664 - accuracy: 0.3025 - val_loss: 0.4836 - val_sqrt_abs_min_loss: 0.4836 - val_accuracy: 0.3397 - 223s/epoch - 815ms/step
Epoch 6/100
273/273 - 222s - loss: 0.4747 - sqrt_abs_min_loss: 0.4747 - accuracy: 0.2911 - val_loss: 0.4652 - val_sqrt_abs_min_loss: 0.4652 - val_accuracy: 0.3921 - 222s/epoch - 814ms/step
Epoch 7/100
273/273 - 222s - loss: 0.4675 - sqrt_abs_min_loss: 0.4675 - accuracy: 0.3213 - val_loss: 0.4723 - val_sqrt_abs_min_loss: 0.4723 - val_accuracy: 0.3629 - 222s/epoch - 814ms/step
Epoch 8/100
273/273 - 223s - loss: 0.4682 - sqrt_abs_min_loss: 0.4682 - accuracy: 0.3315 - val_loss: 0.4750 - val_sqrt_abs_min_loss: 0.4750 - val_accuracy: 0.3236 - 223s/epoch - 815ms/step
Epoch 9/100
273/273 - 222s - loss: 0.4678 - sqrt_abs_min_loss: 0.4678 - accuracy: 0.2663 - val_loss: 0.4691 - val_sqrt_abs_min_loss: 0.4691 - val_accuracy: 0.2873 - 222s/epoch - 815ms/step
Epoch 10/100
273/273 - 223s - loss: 0.4611 - sqrt_abs_min_loss: 0.4611 - accuracy: 0.3225 - val_loss: 0.4764 - val_sqrt_abs_min_loss: 0.4764 - val_accuracy: 0.4597 - 223s/epoch - 815ms/step
Epoch 11/100
273/273 - 222s - loss: 0.4710 - sqrt_abs_min_loss: 0.4710 - accuracy: 0.2761 - val_loss: 0.4670 - val_sqrt_abs_min_loss: 0.4670 - val_accuracy: 0.3246 - 222s/epoch - 815ms/step
Epoch 12/100
273/273 - 222s - loss: 0.4752 - sqrt_abs_min_loss: 0.4752 - accuracy: 0.3909 - val_loss: 0.4815 - val_sqrt_abs_min_loss: 0.4815 - val_accuracy: 0.2893 - 222s/epoch - 815ms/step
Epoch 13/100
273/273 - 222s - loss: 0.4657 - sqrt_abs_min_loss: 0.4657 - accuracy: 0.3605 - val_loss: 0.4431 - val_sqrt_abs_min_loss: 0.4431 - val_accuracy: 0.3790 - 222s/epoch - 815ms/step
Epoch 14/100
273/273 - 223s - loss: 0.4801 - sqrt_abs_min_loss: 0.4801 - accuracy: 0.3474 - val_loss: 0.4571 - val_sqrt_abs_min_loss: 0.4571 - val_accuracy: 0.3417 - 223s/epoch - 816ms/step
Epoch 15/100
273/273 - 222s - loss: 0.4685 - sqrt_abs_min_loss: 0.4685 - accuracy: 0.3620 - val_loss: 0.4563 - val_sqrt_abs_min_loss: 0.4563 - val_accuracy: 0.3649 - 222s/epoch - 815ms/step
Epoch 16/100
273/273 - 222s - loss: 0.4697 - sqrt_abs_min_loss: 0.4697 - accuracy: 0.3340 - val_loss: 0.4770 - val_sqrt_abs_min_loss: 0.4770 - val_accuracy: 0.2530 - 222s/epoch - 814ms/step
Epoch 17/100
273/273 - 223s - loss: 0.4676 - sqrt_abs_min_loss: 0.4676 - accuracy: 0.3339 - val_loss: 0.4946 - val_sqrt_abs_min_loss: 0.4946 - val_accuracy: 0.2127 - 223s/epoch - 815ms/step
Epoch 18/100
273/273 - 223s - loss: 0.4614 - sqrt_abs_min_loss: 0.4614 - accuracy: 0.3132 - val_loss: 0.4868 - val_sqrt_abs_min_loss: 0.4868 - val_accuracy: 0.3407 - 223s/epoch - 816ms/step
Epoch 19/100
273/273 - 223s - loss: 0.4646 - sqrt_abs_min_loss: 0.4646 - accuracy: 0.3411 - val_loss: 0.4829 - val_sqrt_abs_min_loss: 0.4829 - val_accuracy: 0.3105 - 223s/epoch - 815ms/step
Epoch 20/100
273/273 - 222s - loss: 0.4745 - sqrt_abs_min_loss: 0.4745 - accuracy: 0.3502 - val_loss: 0.4635 - val_sqrt_abs_min_loss: 0.4635 - val_accuracy: 0.3901 - 222s/epoch - 814ms/step
Epoch 21/100
273/273 - 222s - loss: 0.4685 - sqrt_abs_min_loss: 0.4685 - accuracy: 0.3283 - val_loss: 0.4810 - val_sqrt_abs_min_loss: 0.4810 - val_accuracy: 0.4032 - 222s/epoch - 814ms/step
Epoch 22/100
273/273 - 222s - loss: 0.4666 - sqrt_abs_min_loss: 0.4666 - accuracy: 0.3242 - val_loss: 0.4597 - val_sqrt_abs_min_loss: 0.4597 - val_accuracy: 0.3085 - 222s/epoch - 815ms/step
Epoch 23/100
273/273 - 223s - loss: 0.4638 - sqrt_abs_min_loss: 0.4638 - accuracy: 0.2894 - val_loss: 0.4701 - val_sqrt_abs_min_loss: 0.4701 - val_accuracy: 0.3740 - 223s/epoch - 815ms/step
Epoch 24/100
273/273 - 222s - loss: 0.4537 - sqrt_abs_min_loss: 0.4537 - accuracy: 0.3139 - val_loss: 0.4757 - val_sqrt_abs_min_loss: 0.4757 - val_accuracy: 0.3286 - 222s/epoch - 815ms/step
Epoch 25/100
273/273 - 222s - loss: 0.4623 - sqrt_abs_min_loss: 0.4623 - accuracy: 0.3243 - val_loss: 0.4689 - val_sqrt_abs_min_loss: 0.4689 - val_accuracy: 0.2903 - 222s/epoch - 815ms/step
Epoch 26/100
273/273 - 222s - loss: 0.4664 - sqrt_abs_min_loss: 0.4664 - accuracy: 0.3372 - val_loss: 0.4674 - val_sqrt_abs_min_loss: 0.4674 - val_accuracy: 0.2823 - 222s/epoch - 815ms/step
Epoch 27/100
273/273 - 223s - loss: 0.4659 - sqrt_abs_min_loss: 0.4659 - accuracy: 0.3704 - val_loss: 0.4666 - val_sqrt_abs_min_loss: 0.4666 - val_accuracy: 0.3165 - 223s/epoch - 817ms/step
Epoch 28/100
273/273 - 222s - loss: 0.4596 - sqrt_abs_min_loss: 0.4596 - accuracy: 0.2890 - val_loss: 0.4527 - val_sqrt_abs_min_loss: 0.4527 - val_accuracy: 0.3700 - 222s/epoch - 814ms/step
Epoch 29/100
273/273 - 227s - loss: 0.4620 - sqrt_abs_min_loss: 0.4620 - accuracy: 0.3300 - val_loss: 0.4664 - val_sqrt_abs_min_loss: 0.4664 - val_accuracy: 0.3347 - 227s/epoch - 833ms/step
Epoch 30/100
273/273 - 223s - loss: 0.4674 - sqrt_abs_min_loss: 0.4674 - accuracy: 0.3285 - val_loss: 0.4704 - val_sqrt_abs_min_loss: 0.4704 - val_accuracy: 0.2510 - 223s/epoch - 815ms/step
Epoch 31/100
273/273 - 222s - loss: 0.4637 - sqrt_abs_min_loss: 0.4637 - accuracy: 0.3463 - val_loss: 0.4804 - val_sqrt_abs_min_loss: 0.4804 - val_accuracy: 0.3841 - 222s/epoch - 814ms/step
Epoch 32/100
273/273 - 222s - loss: 0.4611 - sqrt_abs_min_loss: 0.4611 - accuracy: 0.3648 - val_loss: 0.4821 - val_sqrt_abs_min_loss: 0.4821 - val_accuracy: 0.3226 - 222s/epoch - 814ms/step
Epoch 33/100
273/273 - 223s - loss: 0.4657 - sqrt_abs_min_loss: 0.4657 - accuracy: 0.3392 - val_loss: 0.4780 - val_sqrt_abs_min_loss: 0.4780 - val_accuracy: 0.3649 - 223s/epoch - 815ms/step
Epoch 34/100
273/273 - 223s - loss: 0.4627 - sqrt_abs_min_loss: 0.4627 - accuracy: 0.3408 - val_loss: 0.4860 - val_sqrt_abs_min_loss: 0.4860 - val_accuracy: 0.2863 - 223s/epoch - 815ms/step
Epoch 35/100
273/273 - 223s - loss: 0.4576 - sqrt_abs_min_loss: 0.4576 - accuracy: 0.3679 - val_loss: 0.4799 - val_sqrt_abs_min_loss: 0.4799 - val_accuracy: 0.4677 - 223s/epoch - 815ms/step
Epoch 36/100
273/273 - 223s - loss: 0.4577 - sqrt_abs_min_loss: 0.4577 - accuracy: 0.3140 - val_loss: 0.4746 - val_sqrt_abs_min_loss: 0.4746 - val_accuracy: 0.3609 - 223s/epoch - 815ms/step
Epoch 37/100
273/273 - 223s - loss: 0.4680 - sqrt_abs_min_loss: 0.4680 - accuracy: 0.2962 - val_loss: 0.4642 - val_sqrt_abs_min_loss: 0.4642 - val_accuracy: 0.3286 - 223s/epoch - 817ms/step
Epoch 38/100
273/273 - 223s - loss: 0.4554 - sqrt_abs_min_loss: 0.4554 - accuracy: 0.3909 - val_loss: 0.4592 - val_sqrt_abs_min_loss: 0.4592 - val_accuracy: 0.2782 - 223s/epoch - 816ms/step
Epoch 39/100
273/273 - 223s - loss: 0.4645 - sqrt_abs_min_loss: 0.4645 - accuracy: 0.2540 - val_loss: 0.4755 - val_sqrt_abs_min_loss: 0.4755 - val_accuracy: 0.3669 - 223s/epoch - 815ms/step
Epoch 40/100
273/273 - 223s - loss: 0.4712 - sqrt_abs_min_loss: 0.4712 - accuracy: 0.3102 - val_loss: 0.4545 - val_sqrt_abs_min_loss: 0.4545 - val_accuracy: 0.3065 - 223s/epoch - 815ms/step
Epoch 41/100
273/273 - 223s - loss: 0.4667 - sqrt_abs_min_loss: 0.4667 - accuracy: 0.3377 - val_loss: 0.4666 - val_sqrt_abs_min_loss: 0.4666 - val_accuracy: 0.2913 - 223s/epoch - 815ms/step
Epoch 42/100
273/273 - 223s - loss: 0.4650 - sqrt_abs_min_loss: 0.4650 - accuracy: 0.2966 - val_loss: 0.4731 - val_sqrt_abs_min_loss: 0.4731 - val_accuracy: 0.3145 - 223s/epoch - 817ms/step
Epoch 43/100
273/273 - 223s - loss: 0.4639 - sqrt_abs_min_loss: 0.4639 - accuracy: 0.3728 - val_loss: 0.4561 - val_sqrt_abs_min_loss: 0.4561 - val_accuracy: 0.3075 - 223s/epoch - 816ms/step
Epoch 44/100
273/273 - 223s - loss: 0.4586 - sqrt_abs_min_loss: 0.4586 - accuracy: 0.3288 - val_loss: 0.4878 - val_sqrt_abs_min_loss: 0.4878 - val_accuracy: 0.3609 - 223s/epoch - 815ms/step
Epoch 45/100
273/273 - 222s - loss: 0.4671 - sqrt_abs_min_loss: 0.4671 - accuracy: 0.3085 - val_loss: 0.4754 - val_sqrt_abs_min_loss: 0.4754 - val_accuracy: 0.3790 - 222s/epoch - 814ms/step
Epoch 46/100
273/273 - 223s - loss: 0.4684 - sqrt_abs_min_loss: 0.4684 - accuracy: 0.3155 - val_loss: 0.4709 - val_sqrt_abs_min_loss: 0.4709 - val_accuracy: 0.3427 - 223s/epoch - 815ms/step
Epoch 47/100
273/273 - 222s - loss: 0.4675 - sqrt_abs_min_loss: 0.4675 - accuracy: 0.2952 - val_loss: 0.4801 - val_sqrt_abs_min_loss: 0.4801 - val_accuracy: 0.4355 - 222s/epoch - 814ms/step
Epoch 48/100
273/273 - 222s - loss: 0.4653 - sqrt_abs_min_loss: 0.4653 - accuracy: 0.3458 - val_loss: 0.4745 - val_sqrt_abs_min_loss: 0.4745 - val_accuracy: 0.2339 - 222s/epoch - 814ms/step
Epoch 49/100
273/273 - 222s - loss: 0.4797 - sqrt_abs_min_loss: 0.4797 - accuracy: 0.3278 - val_loss: 0.4931 - val_sqrt_abs_min_loss: 0.4931 - val_accuracy: 0.4627 - 222s/epoch - 815ms/step
Epoch 50/100
273/273 - 223s - loss: 0.4694 - sqrt_abs_min_loss: 0.4694 - accuracy: 0.3067 - val_loss: 0.4867 - val_sqrt_abs_min_loss: 0.4867 - val_accuracy: 0.4869 - 223s/epoch - 816ms/step
Epoch 51/100
273/273 - 223s - loss: 0.4665 - sqrt_abs_min_loss: 0.4665 - accuracy: 0.3475 - val_loss: 0.4851 - val_sqrt_abs_min_loss: 0.4851 - val_accuracy: 0.3448 - 223s/epoch - 816ms/step
Epoch 52/100
273/273 - 222s - loss: 0.4651 - sqrt_abs_min_loss: 0.4651 - accuracy: 0.3136 - val_loss: 0.4699 - val_sqrt_abs_min_loss: 0.4699 - val_accuracy: 0.5262 - 222s/epoch - 814ms/step
Epoch 53/100
273/273 - 222s - loss: 0.4641 - sqrt_abs_min_loss: 0.4641 - accuracy: 0.3325 - val_loss: 0.4530 - val_sqrt_abs_min_loss: 0.4530 - val_accuracy: 0.2389 - 222s/epoch - 814ms/step
Epoch 54/100
273/273 - 223s - loss: 0.4671 - sqrt_abs_min_loss: 0.4671 - accuracy: 0.3486 - val_loss: 0.4787 - val_sqrt_abs_min_loss: 0.4787 - val_accuracy: 0.3337 - 223s/epoch - 816ms/step
Epoch 55/100
273/273 - 223s - loss: 0.4638 - sqrt_abs_min_loss: 0.4638 - accuracy: 0.3892 - val_loss: 0.4613 - val_sqrt_abs_min_loss: 0.4613 - val_accuracy: 0.3155 - 223s/epoch - 816ms/step
Epoch 56/100
273/273 - 222s - loss: 0.4674 - sqrt_abs_min_loss: 0.4674 - accuracy: 0.3138 - val_loss: 0.4571 - val_sqrt_abs_min_loss: 0.4571 - val_accuracy: 0.3952 - 222s/epoch - 814ms/step
Epoch 57/100
273/273 - 222s - loss: 0.4609 - sqrt_abs_min_loss: 0.4609 - accuracy: 0.3530 - val_loss: 0.4794 - val_sqrt_abs_min_loss: 0.4794 - val_accuracy: 0.2500 - 222s/epoch - 814ms/step
Epoch 58/100
273/273 - 223s - loss: 0.4611 - sqrt_abs_min_loss: 0.4611 - accuracy: 0.3439 - val_loss: 0.4834 - val_sqrt_abs_min_loss: 0.4834 - val_accuracy: 0.4002 - 223s/epoch - 816ms/step
Epoch 59/100
273/273 - 222s - loss: 0.4645 - sqrt_abs_min_loss: 0.4645 - accuracy: 0.3376 - val_loss: 0.4771 - val_sqrt_abs_min_loss: 0.4771 - val_accuracy: 0.2853 - 222s/epoch - 814ms/step
Epoch 60/100
273/273 - 223s - loss: 0.4749 - sqrt_abs_min_loss: 0.4749 - accuracy: 0.3443 - val_loss: 0.4880 - val_sqrt_abs_min_loss: 0.4880 - val_accuracy: 0.3327 - 223s/epoch - 816ms/step
Epoch 61/100
273/273 - 222s - loss: 0.4579 - sqrt_abs_min_loss: 0.4579 - accuracy: 0.3261 - val_loss: 0.4487 - val_sqrt_abs_min_loss: 0.4487 - val_accuracy: 0.3488 - 222s/epoch - 814ms/step
Epoch 62/100
273/273 - 223s - loss: 0.4653 - sqrt_abs_min_loss: 0.4653 - accuracy: 0.3454 - val_loss: 0.4721 - val_sqrt_abs_min_loss: 0.4721 - val_accuracy: 0.4254 - 223s/epoch - 816ms/step
Epoch 63/100
273/273 - 222s - loss: 0.4687 - sqrt_abs_min_loss: 0.4687 - accuracy: 0.2785 - val_loss: 0.4768 - val_sqrt_abs_min_loss: 0.4768 - val_accuracy: 0.2470 - 222s/epoch - 815ms/step
Epoch 64/100
273/273 - 223s - loss: 0.4645 - sqrt_abs_min_loss: 0.4645 - accuracy: 0.3520 - val_loss: 0.4682 - val_sqrt_abs_min_loss: 0.4682 - val_accuracy: 0.3780 - 223s/epoch - 815ms/step
Epoch 65/100
273/273 - 222s - loss: 0.4633 - sqrt_abs_min_loss: 0.4633 - accuracy: 0.2914 - val_loss: 0.4738 - val_sqrt_abs_min_loss: 0.4738 - val_accuracy: 0.3034 - 222s/epoch - 815ms/step
Epoch 66/100
273/273 - 223s - loss: 0.4665 - sqrt_abs_min_loss: 0.4665 - accuracy: 0.3512 - val_loss: 0.4554 - val_sqrt_abs_min_loss: 0.4554 - val_accuracy: 0.3569 - 223s/epoch - 816ms/step
Epoch 67/100
273/273 - 222s - loss: 0.4625 - sqrt_abs_min_loss: 0.4625 - accuracy: 0.3696 - val_loss: 0.4687 - val_sqrt_abs_min_loss: 0.4687 - val_accuracy: 0.2681 - 222s/epoch - 814ms/step
Epoch 68/100
273/273 - 223s - loss: 0.4701 - sqrt_abs_min_loss: 0.4701 - accuracy: 0.3513 - val_loss: 0.4459 - val_sqrt_abs_min_loss: 0.4459 - val_accuracy: 0.2843 - 223s/epoch - 815ms/step
Epoch 69/100
273/273 - 223s - loss: 0.4651 - sqrt_abs_min_loss: 0.4651 - accuracy: 0.3329 - val_loss: 0.4732 - val_sqrt_abs_min_loss: 0.4732 - val_accuracy: 0.2984 - 223s/epoch - 815ms/step
Epoch 70/100
273/273 - 223s - loss: 0.4742 - sqrt_abs_min_loss: 0.4742 - accuracy: 0.3044 - val_loss: 0.4759 - val_sqrt_abs_min_loss: 0.4759 - val_accuracy: 0.4335 - 223s/epoch - 816ms/step
Epoch 71/100
273/273 - 223s - loss: 0.4623 - sqrt_abs_min_loss: 0.4623 - accuracy: 0.3466 - val_loss: 0.4739 - val_sqrt_abs_min_loss: 0.4739 - val_accuracy: 0.4476 - 223s/epoch - 815ms/step
Epoch 72/100
273/273 - 222s - loss: 0.4584 - sqrt_abs_min_loss: 0.4584 - accuracy: 0.3578 - val_loss: 0.4687 - val_sqrt_abs_min_loss: 0.4687 - val_accuracy: 0.3881 - 222s/epoch - 815ms/step
Epoch 73/100
273/273 - 223s - loss: 0.4695 - sqrt_abs_min_loss: 0.4695 - accuracy: 0.3093 - val_loss: 0.4693 - val_sqrt_abs_min_loss: 0.4693 - val_accuracy: 0.3478 - 223s/epoch - 816ms/step
Epoch 74/100
273/273 - 223s - loss: 0.4627 - sqrt_abs_min_loss: 0.4627 - accuracy: 0.3219 - val_loss: 0.4610 - val_sqrt_abs_min_loss: 0.4610 - val_accuracy: 0.2359 - 223s/epoch - 816ms/step
Epoch 75/100
273/273 - 222s - loss: 0.4714 - sqrt_abs_min_loss: 0.4714 - accuracy: 0.3316 - val_loss: 0.4815 - val_sqrt_abs_min_loss: 0.4815 - val_accuracy: 0.2208 - 222s/epoch - 815ms/step
Epoch 76/100
273/273 - 222s - loss: 0.4608 - sqrt_abs_min_loss: 0.4608 - accuracy: 0.3464 - val_loss: 0.4662 - val_sqrt_abs_min_loss: 0.4662 - val_accuracy: 0.2853 - 222s/epoch - 815ms/step
Epoch 77/100
273/273 - 222s - loss: 0.4700 - sqrt_abs_min_loss: 0.4700 - accuracy: 0.3478 - val_loss: 0.4940 - val_sqrt_abs_min_loss: 0.4940 - val_accuracy: 0.4143 - 222s/epoch - 815ms/step
Epoch 78/100
273/273 - 222s - loss: 0.4559 - sqrt_abs_min_loss: 0.4559 - accuracy: 0.2867 - val_loss: 0.4672 - val_sqrt_abs_min_loss: 0.4672 - val_accuracy: 0.2692 - 222s/epoch - 815ms/step
Epoch 79/100
273/273 - 223s - loss: 0.4617 - sqrt_abs_min_loss: 0.4617 - accuracy: 0.3152 - val_loss: 0.4708 - val_sqrt_abs_min_loss: 0.4708 - val_accuracy: 0.2974 - 223s/epoch - 816ms/step
Epoch 80/100
273/273 - 223s - loss: 0.4623 - sqrt_abs_min_loss: 0.4623 - accuracy: 0.3471 - val_loss: 0.4712 - val_sqrt_abs_min_loss: 0.4712 - val_accuracy: 0.4758 - 223s/epoch - 815ms/step
Epoch 81/100
273/273 - 222s - loss: 0.4600 - sqrt_abs_min_loss: 0.4600 - accuracy: 0.2446 - val_loss: 0.4817 - val_sqrt_abs_min_loss: 0.4817 - val_accuracy: 0.4183 - 222s/epoch - 815ms/step
Epoch 82/100
User defined signal 2

------------------------------------------------------------
Sender: LSF System <lsfadmin@hpc.dtu.dk>
Subject: Job 15232340: <s202741-train> in cluster <dcc> Exited

Job <s202741-train> was submitted from host <n-62-20-1> by user <s202741> in cluster <dcc> at Sun Jan 22 12:32:32 2023
Job was executed on host(s) <4*n-62-20-10>, in queue <gpuv100>, as user <s202741> in cluster <dcc> at Sun Jan 22 22:00:38 2023
</zhome/ab/7/153983> was used as the home directory.
</zhome/ab/7/153983/project/scripts> was used as the working directory.
Started at Sun Jan 22 22:00:38 2023
Terminated at Mon Jan 23 03:02:20 2023
Results reported at Mon Jan 23 03:02:20 2023

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#!/bin/bash
### General options
### -- specify queue --   NOTE: TitanX is significantly faster than K80
#BSUB -q gpuv100
#BSUB -gpu "num=1:mode=exclusive_process"
### -- set the job Name --
#BSUB -J s202741-train
### -- ask for number of cores (default: 1) --
#BSUB -n 4
#BSUB -R "span[hosts=1]"
### -- set walltime limit: hh:mm --  maximum 24 hours for GPU-queues right now
#BSUB -W 5:00
# request 5GB of memory
#BSUB -R "rusage[mem=5GB]"
### -- Specify the output and error file. %J is the job-id --
### -- -o and -e mean append, -oo and -eo mean overwrite --
#BSUB -o iter6/Logs/RMSprop_sqrt_abs_min_loss_00005_model_h_%J.out
# -- end of LSF options --

# Necessary modules
cd ..
source venv/bin/activate

python trainModelIter3.py 100 "RMSprop(learning_rate=0.0005)" "sqrt_abs_min_loss" "black_background_500x500.csv" 2 "RMSprop_sqrt_abs_min_loss_00005_model_h_" "iter6" "load_model_h"

    
------------------------------------------------------------

TERM_RUNLIMIT: job killed after reaching LSF run time limit.
Exited with exit code 140.

Resource usage summary:

    CPU time :                                   20561.00 sec.
    Max Memory :                                 3098 MB
    Average Memory :                             2988.75 MB
    Total Requested Memory :                     20480.00 MB
    Delta Memory :                               17382.00 MB
    Max Swap :                                   -
    Max Processes :                              4
    Max Threads :                                33
    Run time :                                   18103 sec.
    Turnaround time :                            52188 sec.

The output (if any) is above this job summary.

