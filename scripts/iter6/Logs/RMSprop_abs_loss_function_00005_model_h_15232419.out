Loaded dependency [python3/3.10.7]: gcc/11.3.0-binutils-2.38
Loaded module: python3/3.10.7

Loading python3/3.10.7
  Loading requirement: gcc/11.3.0-binutils-2.38
Loaded module: cuda/11.6
Loaded module: cudnn/v8.3.2.44-prod-cuda-11.X
2023-01-25 09:20:09.004492: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2023-01-25 09:20:14.020457: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer.so.7'; dlerror: libnvinfer.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /appl/cudnn/v8.3.2.44-prod-cuda-11.5/lib:/appl/cuda/11.6.0/lib64:/appl/python/3.10.7/lib:/appl/gcc/11.3.0-binutils-2.38/lib64:/appl/gcc/11.3.0-binutils-2.38/lib:/lsf/10.1/linux3.10-glibc2.17-x86_64/lib
2023-01-25 09:20:14.021154: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer_plugin.so.7'; dlerror: libnvinfer_plugin.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /appl/cudnn/v8.3.2.44-prod-cuda-11.5/lib:/appl/cuda/11.6.0/lib64:/appl/python/3.10.7/lib:/appl/gcc/11.3.0-binutils-2.38/lib64:/appl/gcc/11.3.0-binutils-2.38/lib:/lsf/10.1/linux3.10-glibc2.17-x86_64/lib
2023-01-25 09:20:14.021167: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Cannot dlopen some TensorRT libraries. If you would like to use Nvidia GPU with TensorRT, please make sure the missing libraries mentioned above are installed properly.
2023-01-25 09:20:18.669095: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2023-01-25 09:20:21.511597: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1613] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 30961 MB memory:  -> device: 0, name: Tesla V100-SXM2-32GB, pci bus id: 0000:3b:00.0, compute capability: 7.0
Epochs:  100
Optimizer:  RMSprop(learning_rate=0.0005)
Loss function name:  abs_loss_function
Csv file used:  black_background_500x500.csv
Verbose:  2
Unique name:  RMSprop_abs_loss_function_00005_model_h_
Output folder:  iter6
Model name:  load_model_h
 
        ################ MODEL ############### 

        inputs = keras.Input(shape=(input_size, input_size, 1))
        x = layers.Conv2D(filters=64, kernel_size=11, activation="relu")(inputs)
        x = layers.Conv2D(filters=64, kernel_size=11, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=5, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=5, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Flatten()(x)
        x = layers.Dense(210, activation="relu")(x)
        x = layers.Dense(210, activation="relu")(x)
        x = layers.Dense(210, activation="relu")(x)
        x = layers.Dense(32, activation="sigmoid")(x)
        outputs = layers.Dense(3)(x)

        model = keras.Model(inputs=inputs, outputs=outputs)
    
Model: "model"
_________________________________________________________________
 Layer (type)                Output Shape              Param #   
=================================================================
 input_1 (InputLayer)        [(None, 500, 500, 1)]     0         
                                                                 
 conv2d (Conv2D)             (None, 490, 490, 64)      7808      
                                                                 
 conv2d_1 (Conv2D)           (None, 480, 480, 64)      495680    
                                                                 
 max_pooling2d (MaxPooling2D  (None, 240, 240, 64)     0         
 )                                                               
                                                                 
 conv2d_2 (Conv2D)           (None, 236, 236, 64)      102464    
                                                                 
 conv2d_3 (Conv2D)           (None, 232, 232, 64)      102464    
                                                                 
 max_pooling2d_1 (MaxPooling  (None, 116, 116, 64)     0         
 2D)                                                             
                                                                 
 conv2d_4 (Conv2D)           (None, 114, 114, 64)      36928     
                                                                 
 conv2d_5 (Conv2D)           (None, 112, 112, 64)      36928     
                                                                 
 max_pooling2d_2 (MaxPooling  (None, 56, 56, 64)       0         
 2D)                                                             
                                                                 
 conv2d_6 (Conv2D)           (None, 54, 54, 64)        36928     
                                                                 
 conv2d_7 (Conv2D)           (None, 52, 52, 64)        36928     
                                                                 
 max_pooling2d_3 (MaxPooling  (None, 26, 26, 64)       0         
 2D)                                                             
                                                                 
 conv2d_8 (Conv2D)           (None, 24, 24, 64)        36928     
                                                                 
 conv2d_9 (Conv2D)           (None, 22, 22, 64)        36928     
                                                                 
 max_pooling2d_4 (MaxPooling  (None, 11, 11, 64)       0         
 2D)                                                             
                                                                 
 conv2d_10 (Conv2D)          (None, 9, 9, 64)          36928     
                                                                 
 conv2d_11 (Conv2D)          (None, 7, 7, 64)          36928     
                                                                 
 max_pooling2d_5 (MaxPooling  (None, 3, 3, 64)         0         
 2D)                                                             
                                                                 
 flatten (Flatten)           (None, 576)               0         
                                                                 
 dense (Dense)               (None, 210)               121170    
                                                                 
 dense_1 (Dense)             (None, 210)               44310     
                                                                 
 dense_2 (Dense)             (None, 210)               44310     
                                                                 
 dense_3 (Dense)             (None, 32)                6752      
                                                                 
 dense_4 (Dense)             (None, 3)                 99        
                                                                 
=================================================================
Total params: 1,220,481
Trainable params: 1,220,481
Non-trainable params: 0
_________________________________________________________________
/zhome/ab/7/153983/project/venv/lib/python3.10/site-packages/keras/utils/image_utils.py:409: UserWarning: grayscale is deprecated. Please use color_mode = "grayscale"
  warnings.warn(
Epoch 1/100
2023-01-25 09:20:26.324628: I tensorflow/compiler/xla/stream_executor/cuda/cuda_dnn.cc:428] Loaded cuDNN version 8302
273/273 - 264s - loss: 0.2527 - abs_loss_function: 0.2527 - accuracy: 0.3623 - val_loss: 0.2482 - val_abs_loss_function: 0.2482 - val_accuracy: 0.3518 - 264s/epoch - 966ms/step
Epoch 2/100
273/273 - 234s - loss: 0.2396 - abs_loss_function: 0.2396 - accuracy: 0.3646 - val_loss: 0.2424 - val_abs_loss_function: 0.2424 - val_accuracy: 0.3004 - 234s/epoch - 858ms/step
Epoch 3/100
273/273 - 235s - loss: 0.2425 - abs_loss_function: 0.2425 - accuracy: 0.3261 - val_loss: 0.2581 - val_abs_loss_function: 0.2581 - val_accuracy: 0.3710 - 235s/epoch - 861ms/step
Epoch 4/100
273/273 - 234s - loss: 0.2386 - abs_loss_function: 0.2386 - accuracy: 0.3138 - val_loss: 0.2401 - val_abs_loss_function: 0.2401 - val_accuracy: 0.2369 - 234s/epoch - 858ms/step
Epoch 5/100
273/273 - 234s - loss: 0.2429 - abs_loss_function: 0.2429 - accuracy: 0.3236 - val_loss: 0.2381 - val_abs_loss_function: 0.2381 - val_accuracy: 0.2389 - 234s/epoch - 856ms/step
Epoch 6/100
273/273 - 235s - loss: 0.2449 - abs_loss_function: 0.2449 - accuracy: 0.3388 - val_loss: 0.2535 - val_abs_loss_function: 0.2535 - val_accuracy: 0.2651 - 235s/epoch - 859ms/step
Epoch 7/100
273/273 - 232s - loss: 0.2344 - abs_loss_function: 0.2344 - accuracy: 0.3387 - val_loss: 0.2531 - val_abs_loss_function: 0.2531 - val_accuracy: 0.2661 - 232s/epoch - 850ms/step
Epoch 8/100
273/273 - 236s - loss: 0.2408 - abs_loss_function: 0.2408 - accuracy: 0.3149 - val_loss: 0.2449 - val_abs_loss_function: 0.2449 - val_accuracy: 0.2409 - 236s/epoch - 863ms/step
Epoch 9/100
273/273 - 231s - loss: 0.2398 - abs_loss_function: 0.2398 - accuracy: 0.3223 - val_loss: 0.2448 - val_abs_loss_function: 0.2448 - val_accuracy: 0.3679 - 231s/epoch - 847ms/step
Epoch 10/100
273/273 - 233s - loss: 0.2497 - abs_loss_function: 0.2497 - accuracy: 0.3605 - val_loss: 0.2383 - val_abs_loss_function: 0.2383 - val_accuracy: 0.3528 - 233s/epoch - 852ms/step
Epoch 11/100
273/273 - 234s - loss: 0.2402 - abs_loss_function: 0.2402 - accuracy: 0.3732 - val_loss: 0.2438 - val_abs_loss_function: 0.2438 - val_accuracy: 0.3216 - 234s/epoch - 857ms/step
Epoch 12/100
273/273 - 231s - loss: 0.2439 - abs_loss_function: 0.2439 - accuracy: 0.2982 - val_loss: 0.2099 - val_abs_loss_function: 0.2099 - val_accuracy: 0.3317 - 231s/epoch - 848ms/step
Epoch 13/100
273/273 - 232s - loss: 0.2366 - abs_loss_function: 0.2366 - accuracy: 0.3917 - val_loss: 0.2829 - val_abs_loss_function: 0.2829 - val_accuracy: 0.3306 - 232s/epoch - 851ms/step
Epoch 14/100
273/273 - 231s - loss: 0.2343 - abs_loss_function: 0.2343 - accuracy: 0.3569 - val_loss: 0.2472 - val_abs_loss_function: 0.2472 - val_accuracy: 0.2883 - 231s/epoch - 846ms/step
Epoch 15/100
273/273 - 236s - loss: 0.2366 - abs_loss_function: 0.2366 - accuracy: 0.3755 - val_loss: 0.2529 - val_abs_loss_function: 0.2529 - val_accuracy: 0.2399 - 236s/epoch - 864ms/step
Epoch 16/100
273/273 - 231s - loss: 0.2410 - abs_loss_function: 0.2410 - accuracy: 0.3109 - val_loss: 0.2586 - val_abs_loss_function: 0.2586 - val_accuracy: 0.3690 - 231s/epoch - 846ms/step
Epoch 17/100
273/273 - 234s - loss: 0.2467 - abs_loss_function: 0.2467 - accuracy: 0.3237 - val_loss: 0.2621 - val_abs_loss_function: 0.2621 - val_accuracy: 0.2913 - 234s/epoch - 857ms/step
Epoch 18/100
273/273 - 234s - loss: 0.2442 - abs_loss_function: 0.2442 - accuracy: 0.3370 - val_loss: 0.2368 - val_abs_loss_function: 0.2368 - val_accuracy: 0.3548 - 234s/epoch - 856ms/step
Epoch 19/100
273/273 - 232s - loss: 0.2445 - abs_loss_function: 0.2445 - accuracy: 0.3080 - val_loss: 0.2286 - val_abs_loss_function: 0.2286 - val_accuracy: 0.2782 - 232s/epoch - 850ms/step
Epoch 20/100
273/273 - 233s - loss: 0.2422 - abs_loss_function: 0.2422 - accuracy: 0.3241 - val_loss: 0.2276 - val_abs_loss_function: 0.2276 - val_accuracy: 0.3488 - 233s/epoch - 854ms/step
Epoch 21/100
273/273 - 234s - loss: 0.2392 - abs_loss_function: 0.2392 - accuracy: 0.3344 - val_loss: 0.2513 - val_abs_loss_function: 0.2513 - val_accuracy: 0.3327 - 234s/epoch - 857ms/step
Epoch 22/100
273/273 - 233s - loss: 0.2350 - abs_loss_function: 0.2350 - accuracy: 0.2933 - val_loss: 0.2620 - val_abs_loss_function: 0.2620 - val_accuracy: 0.2752 - 233s/epoch - 852ms/step
Epoch 23/100
273/273 - 230s - loss: 0.2370 - abs_loss_function: 0.2370 - accuracy: 0.3380 - val_loss: 0.2411 - val_abs_loss_function: 0.2411 - val_accuracy: 0.3891 - 230s/epoch - 842ms/step
Epoch 24/100
273/273 - 231s - loss: 0.2422 - abs_loss_function: 0.2422 - accuracy: 0.2887 - val_loss: 0.2633 - val_abs_loss_function: 0.2633 - val_accuracy: 0.4002 - 231s/epoch - 847ms/step
Epoch 25/100
273/273 - 232s - loss: 0.2389 - abs_loss_function: 0.2389 - accuracy: 0.2899 - val_loss: 0.2685 - val_abs_loss_function: 0.2685 - val_accuracy: 0.4183 - 232s/epoch - 849ms/step
Epoch 26/100
273/273 - 231s - loss: 0.2439 - abs_loss_function: 0.2439 - accuracy: 0.3215 - val_loss: 0.2646 - val_abs_loss_function: 0.2646 - val_accuracy: 0.4002 - 231s/epoch - 845ms/step
Epoch 27/100
273/273 - 233s - loss: 0.2485 - abs_loss_function: 0.2485 - accuracy: 0.3340 - val_loss: 0.2711 - val_abs_loss_function: 0.2711 - val_accuracy: 0.4647 - 233s/epoch - 854ms/step
Epoch 28/100
273/273 - 231s - loss: 0.2427 - abs_loss_function: 0.2427 - accuracy: 0.3460 - val_loss: 0.2552 - val_abs_loss_function: 0.2552 - val_accuracy: 0.2621 - 231s/epoch - 844ms/step
Epoch 29/100
273/273 - 232s - loss: 0.2356 - abs_loss_function: 0.2356 - accuracy: 0.3705 - val_loss: 0.2574 - val_abs_loss_function: 0.2574 - val_accuracy: 0.2903 - 232s/epoch - 849ms/step
Epoch 30/100
273/273 - 233s - loss: 0.2415 - abs_loss_function: 0.2415 - accuracy: 0.3301 - val_loss: 0.2533 - val_abs_loss_function: 0.2533 - val_accuracy: 0.2550 - 233s/epoch - 852ms/step
Epoch 31/100
273/273 - 230s - loss: 0.2390 - abs_loss_function: 0.2390 - accuracy: 0.3158 - val_loss: 0.2360 - val_abs_loss_function: 0.2360 - val_accuracy: 0.2389 - 230s/epoch - 844ms/step
Epoch 32/100
273/273 - 234s - loss: 0.2453 - abs_loss_function: 0.2453 - accuracy: 0.3222 - val_loss: 0.2584 - val_abs_loss_function: 0.2584 - val_accuracy: 0.2621 - 234s/epoch - 856ms/step
Epoch 33/100
273/273 - 232s - loss: 0.2368 - abs_loss_function: 0.2368 - accuracy: 0.3323 - val_loss: 0.2475 - val_abs_loss_function: 0.2475 - val_accuracy: 0.2692 - 232s/epoch - 850ms/step
Epoch 34/100
273/273 - 230s - loss: 0.2423 - abs_loss_function: 0.2423 - accuracy: 0.3294 - val_loss: 0.2353 - val_abs_loss_function: 0.2353 - val_accuracy: 0.2641 - 230s/epoch - 843ms/step
Epoch 35/100
273/273 - 232s - loss: 0.2434 - abs_loss_function: 0.2434 - accuracy: 0.3049 - val_loss: 0.2342 - val_abs_loss_function: 0.2342 - val_accuracy: 0.2772 - 232s/epoch - 849ms/step
Epoch 36/100
273/273 - 231s - loss: 0.2452 - abs_loss_function: 0.2452 - accuracy: 0.3360 - val_loss: 0.2314 - val_abs_loss_function: 0.2314 - val_accuracy: 0.2681 - 231s/epoch - 846ms/step
Epoch 37/100
273/273 - 235s - loss: 0.2515 - abs_loss_function: 0.2515 - accuracy: 0.3507 - val_loss: 0.2471 - val_abs_loss_function: 0.2471 - val_accuracy: 0.4284 - 235s/epoch - 860ms/step
Epoch 38/100
273/273 - 232s - loss: 0.2447 - abs_loss_function: 0.2447 - accuracy: 0.3237 - val_loss: 0.2590 - val_abs_loss_function: 0.2590 - val_accuracy: 0.3710 - 232s/epoch - 848ms/step
Epoch 39/100
273/273 - 236s - loss: 0.2414 - abs_loss_function: 0.2414 - accuracy: 0.3498 - val_loss: 0.2405 - val_abs_loss_function: 0.2405 - val_accuracy: 0.2903 - 236s/epoch - 865ms/step
Epoch 40/100
273/273 - 230s - loss: 0.2392 - abs_loss_function: 0.2392 - accuracy: 0.2706 - val_loss: 0.2244 - val_abs_loss_function: 0.2244 - val_accuracy: 0.3871 - 230s/epoch - 842ms/step
Epoch 41/100
273/273 - 231s - loss: 0.2302 - abs_loss_function: 0.2302 - accuracy: 0.2928 - val_loss: 0.2484 - val_abs_loss_function: 0.2484 - val_accuracy: 0.3669 - 231s/epoch - 844ms/step
Epoch 42/100
273/273 - 234s - loss: 0.2414 - abs_loss_function: 0.2414 - accuracy: 0.2843 - val_loss: 0.2418 - val_abs_loss_function: 0.2418 - val_accuracy: 0.2954 - 234s/epoch - 858ms/step
Epoch 43/100
273/273 - 232s - loss: 0.2472 - abs_loss_function: 0.2472 - accuracy: 0.3741 - val_loss: 0.2510 - val_abs_loss_function: 0.2510 - val_accuracy: 0.3750 - 232s/epoch - 850ms/step
Epoch 44/100
273/273 - 236s - loss: 0.2403 - abs_loss_function: 0.2403 - accuracy: 0.3598 - val_loss: 0.2458 - val_abs_loss_function: 0.2458 - val_accuracy: 0.3780 - 236s/epoch - 866ms/step
Epoch 45/100
273/273 - 230s - loss: 0.2493 - abs_loss_function: 0.2493 - accuracy: 0.3735 - val_loss: 0.2481 - val_abs_loss_function: 0.2481 - val_accuracy: 0.3972 - 230s/epoch - 842ms/step
Epoch 46/100
273/273 - 230s - loss: 0.2431 - abs_loss_function: 0.2431 - accuracy: 0.3139 - val_loss: 0.2762 - val_abs_loss_function: 0.2762 - val_accuracy: 0.4859 - 230s/epoch - 843ms/step
Epoch 47/100
273/273 - 234s - loss: 0.2472 - abs_loss_function: 0.2472 - accuracy: 0.3201 - val_loss: 0.2597 - val_abs_loss_function: 0.2597 - val_accuracy: 0.2954 - 234s/epoch - 857ms/step
Epoch 48/100
273/273 - 231s - loss: 0.2359 - abs_loss_function: 0.2359 - accuracy: 0.3028 - val_loss: 0.2498 - val_abs_loss_function: 0.2498 - val_accuracy: 0.3548 - 231s/epoch - 847ms/step
Epoch 49/100
273/273 - 234s - loss: 0.2449 - abs_loss_function: 0.2449 - accuracy: 0.3294 - val_loss: 0.2688 - val_abs_loss_function: 0.2688 - val_accuracy: 0.3155 - 234s/epoch - 856ms/step
Epoch 50/100
273/273 - 230s - loss: 0.2383 - abs_loss_function: 0.2383 - accuracy: 0.3693 - val_loss: 0.2640 - val_abs_loss_function: 0.2640 - val_accuracy: 0.3296 - 230s/epoch - 843ms/step
Epoch 51/100
273/273 - 230s - loss: 0.2306 - abs_loss_function: 0.2306 - accuracy: 0.3784 - val_loss: 0.2610 - val_abs_loss_function: 0.2610 - val_accuracy: 0.5232 - 230s/epoch - 844ms/step
Epoch 52/100
273/273 - 234s - loss: 0.2397 - abs_loss_function: 0.2397 - accuracy: 0.3392 - val_loss: 0.2508 - val_abs_loss_function: 0.2508 - val_accuracy: 0.2812 - 234s/epoch - 856ms/step
Epoch 53/100
273/273 - 231s - loss: 0.2405 - abs_loss_function: 0.2405 - accuracy: 0.3803 - val_loss: 0.2607 - val_abs_loss_function: 0.2607 - val_accuracy: 0.3327 - 231s/epoch - 847ms/step
Epoch 54/100
273/273 - 231s - loss: 0.2457 - abs_loss_function: 0.2457 - accuracy: 0.2904 - val_loss: 0.2342 - val_abs_loss_function: 0.2342 - val_accuracy: 0.1855 - 231s/epoch - 847ms/step
Epoch 55/100
273/273 - 232s - loss: 0.2424 - abs_loss_function: 0.2424 - accuracy: 0.3810 - val_loss: 0.2531 - val_abs_loss_function: 0.2531 - val_accuracy: 0.3105 - 232s/epoch - 850ms/step
Epoch 56/100
273/273 - 229s - loss: 0.2452 - abs_loss_function: 0.2452 - accuracy: 0.3085 - val_loss: 0.2624 - val_abs_loss_function: 0.2624 - val_accuracy: 0.6089 - 229s/epoch - 838ms/step
Epoch 57/100
273/273 - 233s - loss: 0.2424 - abs_loss_function: 0.2424 - accuracy: 0.3203 - val_loss: 0.2574 - val_abs_loss_function: 0.2574 - val_accuracy: 0.2964 - 233s/epoch - 855ms/step
Epoch 58/100
273/273 - 230s - loss: 0.2413 - abs_loss_function: 0.2413 - accuracy: 0.3474 - val_loss: 0.2441 - val_abs_loss_function: 0.2441 - val_accuracy: 0.2944 - 230s/epoch - 844ms/step
Epoch 59/100
273/273 - 232s - loss: 0.2513 - abs_loss_function: 0.2513 - accuracy: 0.3332 - val_loss: 0.2469 - val_abs_loss_function: 0.2469 - val_accuracy: 0.3417 - 232s/epoch - 849ms/step
Epoch 60/100
273/273 - 230s - loss: 0.2431 - abs_loss_function: 0.2431 - accuracy: 0.3041 - val_loss: 0.2479 - val_abs_loss_function: 0.2479 - val_accuracy: 0.4859 - 230s/epoch - 841ms/step
Epoch 61/100
273/273 - 227s - loss: 0.2400 - abs_loss_function: 0.2400 - accuracy: 0.3118 - val_loss: 0.2598 - val_abs_loss_function: 0.2598 - val_accuracy: 0.4214 - 227s/epoch - 831ms/step
Epoch 62/100
273/273 - 229s - loss: 0.2456 - abs_loss_function: 0.2456 - accuracy: 0.3110 - val_loss: 0.2270 - val_abs_loss_function: 0.2270 - val_accuracy: 0.4113 - 229s/epoch - 840ms/step
Epoch 63/100
273/273 - 230s - loss: 0.2377 - abs_loss_function: 0.2377 - accuracy: 0.2851 - val_loss: 0.2615 - val_abs_loss_function: 0.2615 - val_accuracy: 0.3044 - 230s/epoch - 844ms/step
Epoch 64/100
273/273 - 231s - loss: 0.2451 - abs_loss_function: 0.2451 - accuracy: 0.3325 - val_loss: 0.2423 - val_abs_loss_function: 0.2423 - val_accuracy: 0.3821 - 231s/epoch - 847ms/step
Epoch 65/100
273/273 - 230s - loss: 0.2418 - abs_loss_function: 0.2418 - accuracy: 0.3544 - val_loss: 0.2596 - val_abs_loss_function: 0.2596 - val_accuracy: 0.3488 - 230s/epoch - 842ms/step
Epoch 66/100
273/273 - 229s - loss: 0.2403 - abs_loss_function: 0.2403 - accuracy: 0.3510 - val_loss: 0.2726 - val_abs_loss_function: 0.2726 - val_accuracy: 0.4264 - 229s/epoch - 839ms/step
Epoch 67/100
273/273 - 232s - loss: 0.2365 - abs_loss_function: 0.2365 - accuracy: 0.3889 - val_loss: 0.2713 - val_abs_loss_function: 0.2713 - val_accuracy: 0.3125 - 232s/epoch - 849ms/step
Epoch 68/100
273/273 - 230s - loss: 0.2371 - abs_loss_function: 0.2371 - accuracy: 0.3369 - val_loss: 0.2667 - val_abs_loss_function: 0.2667 - val_accuracy: 0.3115 - 230s/epoch - 843ms/step
Epoch 69/100
273/273 - 230s - loss: 0.2455 - abs_loss_function: 0.2455 - accuracy: 0.3593 - val_loss: 0.2667 - val_abs_loss_function: 0.2667 - val_accuracy: 0.5645 - 230s/epoch - 842ms/step
Epoch 70/100
273/273 - 228s - loss: 0.2448 - abs_loss_function: 0.2448 - accuracy: 0.3130 - val_loss: 0.2376 - val_abs_loss_function: 0.2376 - val_accuracy: 0.2490 - 228s/epoch - 837ms/step
Epoch 71/100
273/273 - 230s - loss: 0.2322 - abs_loss_function: 0.2322 - accuracy: 0.3194 - val_loss: 0.2459 - val_abs_loss_function: 0.2459 - val_accuracy: 0.3700 - 230s/epoch - 843ms/step
Epoch 72/100
273/273 - 232s - loss: 0.2358 - abs_loss_function: 0.2358 - accuracy: 0.3290 - val_loss: 0.2510 - val_abs_loss_function: 0.2510 - val_accuracy: 0.3679 - 232s/epoch - 849ms/step
Epoch 73/100
273/273 - 232s - loss: 0.2407 - abs_loss_function: 0.2407 - accuracy: 0.3522 - val_loss: 0.2375 - val_abs_loss_function: 0.2375 - val_accuracy: 0.4093 - 232s/epoch - 849ms/step
Epoch 74/100
273/273 - 230s - loss: 0.2450 - abs_loss_function: 0.2450 - accuracy: 0.3214 - val_loss: 0.2492 - val_abs_loss_function: 0.2492 - val_accuracy: 0.3458 - 230s/epoch - 844ms/step
Epoch 75/100
273/273 - 229s - loss: 0.2374 - abs_loss_function: 0.2374 - accuracy: 0.3204 - val_loss: 0.2592 - val_abs_loss_function: 0.2592 - val_accuracy: 0.2984 - 229s/epoch - 840ms/step
Epoch 76/100
273/273 - 229s - loss: 0.2379 - abs_loss_function: 0.2379 - accuracy: 0.3419 - val_loss: 0.2588 - val_abs_loss_function: 0.2588 - val_accuracy: 0.3871 - 229s/epoch - 838ms/step
Epoch 77/100
273/273 - 225s - loss: 0.2423 - abs_loss_function: 0.2423 - accuracy: 0.3309 - val_loss: 0.2514 - val_abs_loss_function: 0.2514 - val_accuracy: 0.4456 - 225s/epoch - 823ms/step
Epoch 78/100
User defined signal 2

------------------------------------------------------------
Sender: LSF System <lsfadmin@hpc.dtu.dk>
Subject: Job 15232419: <s202741-train> in cluster <dcc> Exited

Job <s202741-train> was submitted from host <n-62-20-1> by user <s202741> in cluster <dcc> at Sun Jan 22 12:32:54 2023
Job was executed on host(s) <4*n-62-20-12>, in queue <gpuv100>, as user <s202741> in cluster <dcc> at Wed Jan 25 09:20:05 2023
</zhome/ab/7/153983> was used as the home directory.
</zhome/ab/7/153983/project/scripts> was used as the working directory.
Started at Wed Jan 25 09:20:05 2023
Terminated at Wed Jan 25 14:19:45 2023
Results reported at Wed Jan 25 14:19:45 2023

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#!/bin/bash
### General options
### -- specify queue --   NOTE: TitanX is significantly faster than K80
#BSUB -q gpuv100
#BSUB -gpu "num=1:mode=exclusive_process"
### -- set the job Name --
#BSUB -J s202741-train
### -- ask for number of cores (default: 1) --
#BSUB -n 4
#BSUB -R "span[hosts=1]"
### -- set walltime limit: hh:mm --  maximum 24 hours for GPU-queues right now
#BSUB -W 5:00
# request 5GB of memory
#BSUB -R "rusage[mem=5GB]"
### -- Specify the output and error file. %J is the job-id --
### -- -o and -e mean append, -oo and -eo mean overwrite --
#BSUB -o iter6/Logs/RMSprop_abs_loss_function_00005_model_h_%J.out
# -- end of LSF options --

# Necessary modules
cd ..
source venv/bin/activate

python trainModelIter3.py 100 "RMSprop(learning_rate=0.0005)" "abs_loss_function" "black_background_500x500.csv" 2 "RMSprop_abs_loss_function_00005_model_h_" "iter6" "load_model_h"

    
------------------------------------------------------------

TERM_RUNLIMIT: job killed after reaching LSF run time limit.
Exited with exit code 140.

Resource usage summary:

    CPU time :                                   20811.00 sec.
    Max Memory :                                 3133 MB
    Average Memory :                             2978.52 MB
    Total Requested Memory :                     20480.00 MB
    Delta Memory :                               17347.00 MB
    Max Swap :                                   -
    Max Processes :                              4
    Max Threads :                                33
    Run time :                                   18081 sec.
    Turnaround time :                            265611 sec.

The output (if any) is above this job summary.

