Loaded dependency [python3/3.10.7]: gcc/11.3.0-binutils-2.38
Loaded module: python3/3.10.7

Loading python3/3.10.7
  Loading requirement: gcc/11.3.0-binutils-2.38
Loaded module: cuda/11.6
Loaded module: cudnn/v8.3.2.44-prod-cuda-11.X
2023-01-23 07:51:01.729594: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2023-01-23 07:51:05.724671: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer.so.7'; dlerror: libnvinfer.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /appl/cudnn/v8.3.2.44-prod-cuda-11.5/lib:/appl/cuda/11.6.0/lib64:/appl/python/3.10.7/lib:/appl/gcc/11.3.0-binutils-2.38/lib64:/appl/gcc/11.3.0-binutils-2.38/lib:/lsf/10.1/linux3.10-glibc2.17-x86_64/lib
2023-01-23 07:51:05.725312: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer_plugin.so.7'; dlerror: libnvinfer_plugin.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /appl/cudnn/v8.3.2.44-prod-cuda-11.5/lib:/appl/cuda/11.6.0/lib64:/appl/python/3.10.7/lib:/appl/gcc/11.3.0-binutils-2.38/lib64:/appl/gcc/11.3.0-binutils-2.38/lib:/lsf/10.1/linux3.10-glibc2.17-x86_64/lib
2023-01-23 07:51:05.725325: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Cannot dlopen some TensorRT libraries. If you would like to use Nvidia GPU with TensorRT, please make sure the missing libraries mentioned above are installed properly.
2023-01-23 07:51:10.709466: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2023-01-23 07:51:13.575248: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1613] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 30961 MB memory:  -> device: 0, name: Tesla V100-SXM2-32GB, pci bus id: 0000:3a:00.0, compute capability: 7.0
Epochs:  100
Optimizer:  RMSprop(learning_rate=0.002)
Loss function name:  smart_sqrt_abs_min_loss
Csv file used:  black_background_500x500.csv
Verbose:  2
Unique name:  RMSprop_smart_sqrt_abs_min_loss_0002_model_h_
Output folder:  iter6
Model name:  load_model_h
 
        ################ MODEL ############### 

        inputs = keras.Input(shape=(input_size, input_size, 1))
        x = layers.Conv2D(filters=64, kernel_size=11, activation="relu")(inputs)
        x = layers.Conv2D(filters=64, kernel_size=11, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=5, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=5, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Flatten()(x)
        x = layers.Dense(210, activation="relu")(x)
        x = layers.Dense(210, activation="relu")(x)
        x = layers.Dense(210, activation="relu")(x)
        x = layers.Dense(32, activation="sigmoid")(x)
        outputs = layers.Dense(3)(x)

        model = keras.Model(inputs=inputs, outputs=outputs)
    
Model: "model"
_________________________________________________________________
 Layer (type)                Output Shape              Param #   
=================================================================
 input_1 (InputLayer)        [(None, 500, 500, 1)]     0         
                                                                 
 conv2d (Conv2D)             (None, 490, 490, 64)      7808      
                                                                 
 conv2d_1 (Conv2D)           (None, 480, 480, 64)      495680    
                                                                 
 max_pooling2d (MaxPooling2D  (None, 240, 240, 64)     0         
 )                                                               
                                                                 
 conv2d_2 (Conv2D)           (None, 236, 236, 64)      102464    
                                                                 
 conv2d_3 (Conv2D)           (None, 232, 232, 64)      102464    
                                                                 
 max_pooling2d_1 (MaxPooling  (None, 116, 116, 64)     0         
 2D)                                                             
                                                                 
 conv2d_4 (Conv2D)           (None, 114, 114, 64)      36928     
                                                                 
 conv2d_5 (Conv2D)           (None, 112, 112, 64)      36928     
                                                                 
 max_pooling2d_2 (MaxPooling  (None, 56, 56, 64)       0         
 2D)                                                             
                                                                 
 conv2d_6 (Conv2D)           (None, 54, 54, 64)        36928     
                                                                 
 conv2d_7 (Conv2D)           (None, 52, 52, 64)        36928     
                                                                 
 max_pooling2d_3 (MaxPooling  (None, 26, 26, 64)       0         
 2D)                                                             
                                                                 
 conv2d_8 (Conv2D)           (None, 24, 24, 64)        36928     
                                                                 
 conv2d_9 (Conv2D)           (None, 22, 22, 64)        36928     
                                                                 
 max_pooling2d_4 (MaxPooling  (None, 11, 11, 64)       0         
 2D)                                                             
                                                                 
 conv2d_10 (Conv2D)          (None, 9, 9, 64)          36928     
                                                                 
 conv2d_11 (Conv2D)          (None, 7, 7, 64)          36928     
                                                                 
 max_pooling2d_5 (MaxPooling  (None, 3, 3, 64)         0         
 2D)                                                             
                                                                 
 flatten (Flatten)           (None, 576)               0         
                                                                 
 dense (Dense)               (None, 210)               121170    
                                                                 
 dense_1 (Dense)             (None, 210)               44310     
                                                                 
 dense_2 (Dense)             (None, 210)               44310     
                                                                 
 dense_3 (Dense)             (None, 32)                6752      
                                                                 
 dense_4 (Dense)             (None, 3)                 99        
                                                                 
=================================================================
Total params: 1,220,481
Trainable params: 1,220,481
Non-trainable params: 0
_________________________________________________________________
/zhome/ab/7/153983/project/venv/lib/python3.10/site-packages/keras/utils/image_utils.py:409: UserWarning: grayscale is deprecated. Please use color_mode = "grayscale"
  warnings.warn(
Epoch 1/100
2023-01-23 07:51:17.656481: I tensorflow/compiler/xla/stream_executor/cuda/cuda_dnn.cc:428] Loaded cuDNN version 8302
273/273 - 254s - loss: 0.2629 - smart_sqrt_abs_min_loss: 0.2629 - accuracy: 0.2925 - val_loss: 0.2594 - val_smart_sqrt_abs_min_loss: 0.2594 - val_accuracy: 0.3558 - 254s/epoch - 931ms/step
Epoch 2/100
273/273 - 224s - loss: 0.2475 - smart_sqrt_abs_min_loss: 0.2475 - accuracy: 0.2946 - val_loss: 0.2577 - val_smart_sqrt_abs_min_loss: 0.2577 - val_accuracy: 0.3639 - 224s/epoch - 820ms/step
Epoch 3/100
273/273 - 225s - loss: 0.2440 - smart_sqrt_abs_min_loss: 0.2440 - accuracy: 0.3649 - val_loss: 0.2335 - val_smart_sqrt_abs_min_loss: 0.2335 - val_accuracy: 0.3075 - 225s/epoch - 824ms/step
Epoch 4/100
273/273 - 225s - loss: 0.2893 - smart_sqrt_abs_min_loss: 0.2893 - accuracy: 0.3416 - val_loss: 0.2627 - val_smart_sqrt_abs_min_loss: 0.2627 - val_accuracy: 0.2127 - 225s/epoch - 823ms/step
Epoch 5/100
273/273 - 226s - loss: 0.2879 - smart_sqrt_abs_min_loss: 0.2879 - accuracy: 0.3323 - val_loss: 0.2408 - val_smart_sqrt_abs_min_loss: 0.2408 - val_accuracy: 0.2349 - 226s/epoch - 828ms/step
Epoch 6/100
273/273 - 226s - loss: 0.2554 - smart_sqrt_abs_min_loss: 0.2554 - accuracy: 0.3514 - val_loss: 0.2632 - val_smart_sqrt_abs_min_loss: 0.2632 - val_accuracy: 0.2823 - 226s/epoch - 828ms/step
Epoch 7/100
273/273 - 224s - loss: 0.2700 - smart_sqrt_abs_min_loss: 0.2700 - accuracy: 0.3387 - val_loss: 0.2565 - val_smart_sqrt_abs_min_loss: 0.2565 - val_accuracy: 0.3306 - 224s/epoch - 820ms/step
Epoch 8/100
273/273 - 223s - loss: 0.2921 - smart_sqrt_abs_min_loss: 0.2921 - accuracy: 0.3140 - val_loss: 0.2536 - val_smart_sqrt_abs_min_loss: 0.2536 - val_accuracy: 0.2923 - 223s/epoch - 819ms/step
Epoch 9/100
273/273 - 224s - loss: 0.2617 - smart_sqrt_abs_min_loss: 0.2617 - accuracy: 0.3792 - val_loss: 0.2463 - val_smart_sqrt_abs_min_loss: 0.2463 - val_accuracy: 0.3498 - 224s/epoch - 819ms/step
Epoch 10/100
273/273 - 225s - loss: 0.2511 - smart_sqrt_abs_min_loss: 0.2511 - accuracy: 0.3486 - val_loss: 0.2373 - val_smart_sqrt_abs_min_loss: 0.2373 - val_accuracy: 0.2732 - 225s/epoch - 823ms/step
Epoch 11/100
273/273 - 225s - loss: 0.2458 - smart_sqrt_abs_min_loss: 0.2458 - accuracy: 0.3272 - val_loss: 0.2506 - val_smart_sqrt_abs_min_loss: 0.2506 - val_accuracy: 0.2742 - 225s/epoch - 824ms/step
Epoch 12/100
273/273 - 228s - loss: 0.2424 - smart_sqrt_abs_min_loss: 0.2424 - accuracy: 0.3519 - val_loss: 0.2667 - val_smart_sqrt_abs_min_loss: 0.2667 - val_accuracy: 0.2823 - 228s/epoch - 834ms/step
Epoch 13/100
273/273 - 228s - loss: 0.2464 - smart_sqrt_abs_min_loss: 0.2464 - accuracy: 0.3394 - val_loss: 0.2521 - val_smart_sqrt_abs_min_loss: 0.2521 - val_accuracy: 0.4567 - 228s/epoch - 834ms/step
Epoch 14/100
273/273 - 224s - loss: 0.2682 - smart_sqrt_abs_min_loss: 0.2682 - accuracy: 0.3236 - val_loss: 0.2450 - val_smart_sqrt_abs_min_loss: 0.2450 - val_accuracy: 0.3095 - 224s/epoch - 822ms/step
Epoch 15/100
273/273 - 228s - loss: 0.2698 - smart_sqrt_abs_min_loss: 0.2698 - accuracy: 0.3385 - val_loss: 0.6835 - val_smart_sqrt_abs_min_loss: 0.6835 - val_accuracy: 0.2631 - 228s/epoch - 835ms/step
Epoch 16/100
273/273 - 228s - loss: 0.3155 - smart_sqrt_abs_min_loss: 0.3155 - accuracy: 0.3048 - val_loss: 0.2618 - val_smart_sqrt_abs_min_loss: 0.2618 - val_accuracy: 0.2339 - 228s/epoch - 833ms/step
Epoch 17/100
273/273 - 230s - loss: 0.2525 - smart_sqrt_abs_min_loss: 0.2525 - accuracy: 0.3277 - val_loss: 0.2566 - val_smart_sqrt_abs_min_loss: 0.2566 - val_accuracy: 0.2631 - 230s/epoch - 841ms/step
Epoch 18/100
273/273 - 227s - loss: 0.2506 - smart_sqrt_abs_min_loss: 0.2506 - accuracy: 0.3500 - val_loss: 0.2740 - val_smart_sqrt_abs_min_loss: 0.2740 - val_accuracy: 0.3135 - 227s/epoch - 832ms/step
Epoch 19/100
273/273 - 225s - loss: 0.2682 - smart_sqrt_abs_min_loss: 0.2682 - accuracy: 0.3071 - val_loss: 0.2356 - val_smart_sqrt_abs_min_loss: 0.2356 - val_accuracy: 0.3357 - 225s/epoch - 826ms/step
Epoch 20/100
273/273 - 230s - loss: 0.2460 - smart_sqrt_abs_min_loss: 0.2460 - accuracy: 0.3613 - val_loss: 0.2650 - val_smart_sqrt_abs_min_loss: 0.2650 - val_accuracy: 0.2117 - 230s/epoch - 842ms/step
Epoch 21/100
273/273 - 228s - loss: 0.2539 - smart_sqrt_abs_min_loss: 0.2539 - accuracy: 0.3140 - val_loss: 0.2470 - val_smart_sqrt_abs_min_loss: 0.2470 - val_accuracy: 0.1915 - 228s/epoch - 834ms/step
Epoch 22/100
273/273 - 225s - loss: 0.2465 - smart_sqrt_abs_min_loss: 0.2465 - accuracy: 0.4290 - val_loss: 0.2679 - val_smart_sqrt_abs_min_loss: 0.2679 - val_accuracy: 0.3306 - 225s/epoch - 824ms/step
Epoch 23/100
273/273 - 229s - loss: 0.2443 - smart_sqrt_abs_min_loss: 0.2443 - accuracy: 0.3576 - val_loss: 0.2748 - val_smart_sqrt_abs_min_loss: 0.2748 - val_accuracy: 0.3296 - 229s/epoch - 839ms/step
Epoch 24/100
273/273 - 228s - loss: 0.2537 - smart_sqrt_abs_min_loss: 0.2537 - accuracy: 0.3226 - val_loss: 0.2593 - val_smart_sqrt_abs_min_loss: 0.2593 - val_accuracy: 0.3105 - 228s/epoch - 836ms/step
Epoch 25/100
273/273 - 224s - loss: 0.2641 - smart_sqrt_abs_min_loss: 0.2641 - accuracy: 0.3466 - val_loss: 0.2640 - val_smart_sqrt_abs_min_loss: 0.2640 - val_accuracy: 0.4133 - 224s/epoch - 822ms/step
Epoch 26/100
273/273 - 227s - loss: 0.2326 - smart_sqrt_abs_min_loss: 0.2326 - accuracy: 0.3338 - val_loss: 0.2356 - val_smart_sqrt_abs_min_loss: 0.2356 - val_accuracy: 0.3367 - 227s/epoch - 831ms/step
Epoch 27/100
273/273 - 227s - loss: 0.2469 - smart_sqrt_abs_min_loss: 0.2469 - accuracy: 0.3677 - val_loss: 0.2478 - val_smart_sqrt_abs_min_loss: 0.2478 - val_accuracy: 0.3528 - 227s/epoch - 833ms/step
Epoch 28/100
273/273 - 229s - loss: 0.2788 - smart_sqrt_abs_min_loss: 0.2788 - accuracy: 0.3215 - val_loss: 0.3545 - val_smart_sqrt_abs_min_loss: 0.3545 - val_accuracy: 0.3438 - 229s/epoch - 837ms/step
Epoch 29/100
273/273 - 225s - loss: 0.3140 - smart_sqrt_abs_min_loss: 0.3140 - accuracy: 0.2869 - val_loss: 0.2244 - val_smart_sqrt_abs_min_loss: 0.2244 - val_accuracy: 0.3508 - 225s/epoch - 824ms/step
Epoch 30/100
273/273 - 230s - loss: 0.2558 - smart_sqrt_abs_min_loss: 0.2558 - accuracy: 0.2930 - val_loss: 0.2438 - val_smart_sqrt_abs_min_loss: 0.2438 - val_accuracy: 0.4315 - 230s/epoch - 843ms/step
Epoch 31/100
273/273 - 229s - loss: 0.2392 - smart_sqrt_abs_min_loss: 0.2392 - accuracy: 0.3488 - val_loss: 0.2489 - val_smart_sqrt_abs_min_loss: 0.2489 - val_accuracy: 0.3236 - 229s/epoch - 838ms/step
Epoch 32/100
273/273 - 228s - loss: 0.3107 - smart_sqrt_abs_min_loss: 0.3107 - accuracy: 0.2995 - val_loss: 0.2511 - val_smart_sqrt_abs_min_loss: 0.2511 - val_accuracy: 0.3982 - 228s/epoch - 834ms/step
Epoch 33/100
273/273 - 224s - loss: 0.2607 - smart_sqrt_abs_min_loss: 0.2607 - accuracy: 0.3299 - val_loss: 0.2424 - val_smart_sqrt_abs_min_loss: 0.2424 - val_accuracy: 0.3075 - 224s/epoch - 822ms/step
Epoch 34/100
273/273 - 227s - loss: 0.2531 - smart_sqrt_abs_min_loss: 0.2531 - accuracy: 0.2866 - val_loss: 0.2409 - val_smart_sqrt_abs_min_loss: 0.2409 - val_accuracy: 0.3296 - 227s/epoch - 831ms/step
Epoch 35/100
273/273 - 227s - loss: 0.2512 - smart_sqrt_abs_min_loss: 0.2512 - accuracy: 0.2751 - val_loss: 0.2468 - val_smart_sqrt_abs_min_loss: 0.2468 - val_accuracy: 0.3972 - 227s/epoch - 831ms/step
Epoch 36/100
273/273 - 225s - loss: 0.2497 - smart_sqrt_abs_min_loss: 0.2497 - accuracy: 0.3218 - val_loss: 0.2357 - val_smart_sqrt_abs_min_loss: 0.2357 - val_accuracy: 0.3044 - 225s/epoch - 825ms/step
Epoch 37/100
273/273 - 227s - loss: 0.2514 - smart_sqrt_abs_min_loss: 0.2514 - accuracy: 0.3356 - val_loss: 0.2342 - val_smart_sqrt_abs_min_loss: 0.2342 - val_accuracy: 0.2661 - 227s/epoch - 833ms/step
Epoch 38/100
273/273 - 229s - loss: 0.2435 - smart_sqrt_abs_min_loss: 0.2435 - accuracy: 0.2896 - val_loss: 0.2588 - val_smart_sqrt_abs_min_loss: 0.2588 - val_accuracy: 0.3075 - 229s/epoch - 838ms/step
Epoch 39/100
273/273 - 225s - loss: 0.2578 - smart_sqrt_abs_min_loss: 0.2578 - accuracy: 0.3052 - val_loss: 0.2685 - val_smart_sqrt_abs_min_loss: 0.2685 - val_accuracy: 0.2651 - 225s/epoch - 824ms/step
Epoch 40/100
273/273 - 229s - loss: 0.2479 - smart_sqrt_abs_min_loss: 0.2479 - accuracy: 0.3059 - val_loss: 0.2520 - val_smart_sqrt_abs_min_loss: 0.2520 - val_accuracy: 0.2913 - 229s/epoch - 839ms/step
Epoch 41/100
273/273 - 229s - loss: 0.2503 - smart_sqrt_abs_min_loss: 0.2503 - accuracy: 0.3400 - val_loss: 0.2542 - val_smart_sqrt_abs_min_loss: 0.2542 - val_accuracy: 0.2994 - 229s/epoch - 840ms/step
Epoch 42/100
273/273 - 229s - loss: 0.2386 - smart_sqrt_abs_min_loss: 0.2386 - accuracy: 0.3359 - val_loss: 0.2662 - val_smart_sqrt_abs_min_loss: 0.2662 - val_accuracy: 0.2409 - 229s/epoch - 839ms/step
Epoch 43/100
273/273 - 227s - loss: 0.2465 - smart_sqrt_abs_min_loss: 0.2465 - accuracy: 0.3805 - val_loss: 0.2392 - val_smart_sqrt_abs_min_loss: 0.2392 - val_accuracy: 0.3266 - 227s/epoch - 830ms/step
Epoch 44/100
273/273 - 224s - loss: 0.2443 - smart_sqrt_abs_min_loss: 0.2443 - accuracy: 0.3112 - val_loss: 0.2529 - val_smart_sqrt_abs_min_loss: 0.2529 - val_accuracy: 0.4042 - 224s/epoch - 822ms/step
Epoch 45/100
273/273 - 226s - loss: 0.2440 - smart_sqrt_abs_min_loss: 0.2440 - accuracy: 0.3609 - val_loss: 0.2641 - val_smart_sqrt_abs_min_loss: 0.2641 - val_accuracy: 0.3075 - 226s/epoch - 830ms/step
Epoch 46/100
273/273 - 227s - loss: 0.2491 - smart_sqrt_abs_min_loss: 0.2491 - accuracy: 0.3426 - val_loss: 0.2396 - val_smart_sqrt_abs_min_loss: 0.2396 - val_accuracy: 0.3276 - 227s/epoch - 832ms/step
Epoch 47/100
273/273 - 226s - loss: 0.2511 - smart_sqrt_abs_min_loss: 0.2511 - accuracy: 0.3436 - val_loss: 0.2600 - val_smart_sqrt_abs_min_loss: 0.2600 - val_accuracy: 0.3417 - 226s/epoch - 828ms/step
Epoch 48/100
273/273 - 227s - loss: 0.2694 - smart_sqrt_abs_min_loss: 0.2694 - accuracy: 0.3012 - val_loss: 0.2664 - val_smart_sqrt_abs_min_loss: 0.2664 - val_accuracy: 0.4990 - 227s/epoch - 832ms/step
Epoch 49/100
273/273 - 227s - loss: 0.2677 - smart_sqrt_abs_min_loss: 0.2677 - accuracy: 0.2913 - val_loss: 0.2585 - val_smart_sqrt_abs_min_loss: 0.2585 - val_accuracy: 0.3377 - 227s/epoch - 833ms/step
Epoch 50/100
273/273 - 225s - loss: 0.2956 - smart_sqrt_abs_min_loss: 0.2956 - accuracy: 0.3737 - val_loss: 0.2444 - val_smart_sqrt_abs_min_loss: 0.2444 - val_accuracy: 0.3690 - 225s/epoch - 823ms/step
Epoch 51/100
273/273 - 226s - loss: 0.2850 - smart_sqrt_abs_min_loss: 0.2850 - accuracy: 0.3288 - val_loss: 0.2750 - val_smart_sqrt_abs_min_loss: 0.2750 - val_accuracy: 0.2097 - 226s/epoch - 829ms/step
Epoch 52/100
273/273 - 227s - loss: 0.2872 - smart_sqrt_abs_min_loss: 0.2872 - accuracy: 0.3372 - val_loss: 0.2477 - val_smart_sqrt_abs_min_loss: 0.2477 - val_accuracy: 0.2440 - 227s/epoch - 833ms/step
Epoch 53/100
273/273 - 227s - loss: 0.2779 - smart_sqrt_abs_min_loss: 0.2779 - accuracy: 0.3207 - val_loss: 0.2456 - val_smart_sqrt_abs_min_loss: 0.2456 - val_accuracy: 0.4294 - 227s/epoch - 831ms/step
Epoch 54/100
273/273 - 231s - loss: 0.2415 - smart_sqrt_abs_min_loss: 0.2415 - accuracy: 0.3558 - val_loss: 0.2719 - val_smart_sqrt_abs_min_loss: 0.2719 - val_accuracy: 0.1190 - 231s/epoch - 846ms/step
Epoch 55/100
273/273 - 225s - loss: 0.2615 - smart_sqrt_abs_min_loss: 0.2615 - accuracy: 0.3443 - val_loss: 0.2326 - val_smart_sqrt_abs_min_loss: 0.2326 - val_accuracy: 0.3438 - 225s/epoch - 825ms/step
Epoch 56/100
273/273 - 229s - loss: 0.2813 - smart_sqrt_abs_min_loss: 0.2813 - accuracy: 0.3030 - val_loss: 0.2324 - val_smart_sqrt_abs_min_loss: 0.2324 - val_accuracy: 0.3427 - 229s/epoch - 840ms/step
Epoch 57/100
273/273 - 229s - loss: 0.2746 - smart_sqrt_abs_min_loss: 0.2746 - accuracy: 0.2743 - val_loss: 0.2600 - val_smart_sqrt_abs_min_loss: 0.2600 - val_accuracy: 0.3579 - 229s/epoch - 840ms/step
Epoch 58/100
273/273 - 225s - loss: 0.2471 - smart_sqrt_abs_min_loss: 0.2471 - accuracy: 0.3385 - val_loss: 0.2585 - val_smart_sqrt_abs_min_loss: 0.2585 - val_accuracy: 0.2994 - 225s/epoch - 823ms/step
Epoch 59/100
273/273 - 227s - loss: 0.2382 - smart_sqrt_abs_min_loss: 0.2382 - accuracy: 0.3626 - val_loss: 0.2608 - val_smart_sqrt_abs_min_loss: 0.2608 - val_accuracy: 0.3155 - 227s/epoch - 830ms/step
Epoch 60/100
273/273 - 228s - loss: 0.2472 - smart_sqrt_abs_min_loss: 0.2472 - accuracy: 0.3267 - val_loss: 0.2322 - val_smart_sqrt_abs_min_loss: 0.2322 - val_accuracy: 0.2944 - 228s/epoch - 835ms/step
Epoch 61/100
273/273 - 224s - loss: 0.2681 - smart_sqrt_abs_min_loss: 0.2681 - accuracy: 0.3407 - val_loss: 0.2520 - val_smart_sqrt_abs_min_loss: 0.2520 - val_accuracy: 0.3327 - 224s/epoch - 822ms/step
Epoch 62/100
273/273 - 227s - loss: 0.2767 - smart_sqrt_abs_min_loss: 0.2767 - accuracy: 0.3395 - val_loss: 0.2379 - val_smart_sqrt_abs_min_loss: 0.2379 - val_accuracy: 0.2571 - 227s/epoch - 833ms/step
Epoch 63/100
273/273 - 229s - loss: 0.2929 - smart_sqrt_abs_min_loss: 0.2929 - accuracy: 0.2849 - val_loss: 0.2382 - val_smart_sqrt_abs_min_loss: 0.2382 - val_accuracy: 0.2863 - 229s/epoch - 839ms/step
Epoch 64/100
273/273 - 229s - loss: 0.2587 - smart_sqrt_abs_min_loss: 0.2587 - accuracy: 0.3492 - val_loss: 0.2437 - val_smart_sqrt_abs_min_loss: 0.2437 - val_accuracy: 0.4375 - 229s/epoch - 838ms/step
Epoch 65/100
273/273 - 225s - loss: 0.2507 - smart_sqrt_abs_min_loss: 0.2507 - accuracy: 0.3379 - val_loss: 0.2391 - val_smart_sqrt_abs_min_loss: 0.2391 - val_accuracy: 0.4012 - 225s/epoch - 825ms/step
Epoch 66/100
273/273 - 229s - loss: 0.2461 - smart_sqrt_abs_min_loss: 0.2461 - accuracy: 0.3743 - val_loss: 0.2432 - val_smart_sqrt_abs_min_loss: 0.2432 - val_accuracy: 0.3881 - 229s/epoch - 839ms/step
Epoch 67/100
273/273 - 230s - loss: 0.2731 - smart_sqrt_abs_min_loss: 0.2731 - accuracy: 0.3733 - val_loss: 0.2551 - val_smart_sqrt_abs_min_loss: 0.2551 - val_accuracy: 0.2278 - 230s/epoch - 841ms/step
Epoch 68/100
273/273 - 227s - loss: 0.2490 - smart_sqrt_abs_min_loss: 0.2490 - accuracy: 0.3586 - val_loss: 0.2516 - val_smart_sqrt_abs_min_loss: 0.2516 - val_accuracy: 0.2843 - 227s/epoch - 830ms/step
Epoch 69/100
273/273 - 225s - loss: 0.2810 - smart_sqrt_abs_min_loss: 0.2810 - accuracy: 0.3472 - val_loss: 0.2561 - val_smart_sqrt_abs_min_loss: 0.2561 - val_accuracy: 0.2490 - 225s/epoch - 825ms/step
Epoch 70/100
273/273 - 227s - loss: 0.2637 - smart_sqrt_abs_min_loss: 0.2637 - accuracy: 0.3125 - val_loss: 0.2701 - val_smart_sqrt_abs_min_loss: 0.2701 - val_accuracy: 0.3296 - 227s/epoch - 830ms/step
Epoch 71/100
273/273 - 228s - loss: 0.2513 - smart_sqrt_abs_min_loss: 0.2513 - accuracy: 0.3475 - val_loss: 0.2668 - val_smart_sqrt_abs_min_loss: 0.2668 - val_accuracy: 0.4062 - 228s/epoch - 837ms/step
Epoch 72/100
273/273 - 224s - loss: 0.2451 - smart_sqrt_abs_min_loss: 0.2451 - accuracy: 0.3777 - val_loss: 0.2519 - val_smart_sqrt_abs_min_loss: 0.2519 - val_accuracy: 0.2944 - 224s/epoch - 822ms/step
Epoch 73/100
273/273 - 228s - loss: 0.2650 - smart_sqrt_abs_min_loss: 0.2650 - accuracy: 0.3450 - val_loss: 0.2751 - val_smart_sqrt_abs_min_loss: 0.2751 - val_accuracy: 0.3175 - 228s/epoch - 836ms/step
Epoch 74/100
273/273 - 229s - loss: 0.3098 - smart_sqrt_abs_min_loss: 0.3098 - accuracy: 0.3112 - val_loss: 0.2701 - val_smart_sqrt_abs_min_loss: 0.2701 - val_accuracy: 0.3044 - 229s/epoch - 838ms/step
Epoch 75/100
273/273 - 227s - loss: 0.2564 - smart_sqrt_abs_min_loss: 0.2564 - accuracy: 0.3595 - val_loss: 0.2648 - val_smart_sqrt_abs_min_loss: 0.2648 - val_accuracy: 0.3810 - 227s/epoch - 832ms/step
Epoch 76/100
273/273 - 226s - loss: 0.2801 - smart_sqrt_abs_min_loss: 0.2801 - accuracy: 0.3330 - val_loss: 0.2465 - val_smart_sqrt_abs_min_loss: 0.2465 - val_accuracy: 0.2772 - 226s/epoch - 827ms/step
Epoch 77/100
273/273 - 227s - loss: 0.2962 - smart_sqrt_abs_min_loss: 0.2962 - accuracy: 0.3071 - val_loss: 0.2703 - val_smart_sqrt_abs_min_loss: 0.2703 - val_accuracy: 0.2903 - 227s/epoch - 832ms/step
Epoch 78/100
273/273 - 227s - loss: 0.2348 - smart_sqrt_abs_min_loss: 0.2348 - accuracy: 0.3506 - val_loss: 0.2418 - val_smart_sqrt_abs_min_loss: 0.2418 - val_accuracy: 0.4032 - 227s/epoch - 830ms/step
Epoch 79/100
273/273 - 228s - loss: 0.2663 - smart_sqrt_abs_min_loss: 0.2663 - accuracy: 0.3715 - val_loss: 0.2429 - val_smart_sqrt_abs_min_loss: 0.2429 - val_accuracy: 0.3982 - 228s/epoch - 837ms/step
Epoch 80/100
User defined signal 2

------------------------------------------------------------
Sender: LSF System <lsfadmin@hpc.dtu.dk>
Subject: Job 15232358: <s202741-train> in cluster <dcc> Exited

Job <s202741-train> was submitted from host <n-62-20-1> by user <s202741> in cluster <dcc> at Sun Jan 22 12:32:37 2023
Job was executed on host(s) <4*n-62-20-12>, in queue <gpuv100>, as user <s202741> in cluster <dcc> at Mon Jan 23 07:50:58 2023
</zhome/ab/7/153983> was used as the home directory.
</zhome/ab/7/153983/project/scripts> was used as the working directory.
Started at Mon Jan 23 07:50:58 2023
Terminated at Mon Jan 23 12:51:27 2023
Results reported at Mon Jan 23 12:51:27 2023

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#!/bin/bash
### General options
### -- specify queue --   NOTE: TitanX is significantly faster than K80
#BSUB -q gpuv100
#BSUB -gpu "num=1:mode=exclusive_process"
### -- set the job Name --
#BSUB -J s202741-train
### -- ask for number of cores (default: 1) --
#BSUB -n 4
#BSUB -R "span[hosts=1]"
### -- set walltime limit: hh:mm --  maximum 24 hours for GPU-queues right now
#BSUB -W 5:00
# request 5GB of memory
#BSUB -R "rusage[mem=5GB]"
### -- Specify the output and error file. %J is the job-id --
### -- -o and -e mean append, -oo and -eo mean overwrite --
#BSUB -o iter6/Logs/RMSprop_smart_sqrt_abs_min_loss_0002_model_h_%J.out
# -- end of LSF options --

# Necessary modules
cd ..
source venv/bin/activate

python trainModelIter3.py 100 "RMSprop(learning_rate=0.002)" "smart_sqrt_abs_min_loss" "black_background_500x500.csv" 2 "RMSprop_smart_sqrt_abs_min_loss_0002_model_h_" "iter6" "load_model_h"

    
------------------------------------------------------------

TERM_RUNLIMIT: job killed after reaching LSF run time limit.
Exited with exit code 140.

Resource usage summary:

    CPU time :                                   21576.00 sec.
    Max Memory :                                 3008 MB
    Average Memory :                             2858.31 MB
    Total Requested Memory :                     20480.00 MB
    Delta Memory :                               17472.00 MB
    Max Swap :                                   -
    Max Processes :                              4
    Max Threads :                                33
    Run time :                                   18031 sec.
    Turnaround time :                            87530 sec.

The output (if any) is above this job summary.

