Loaded dependency [python3/3.10.7]: gcc/11.3.0-binutils-2.38
Loaded module: python3/3.10.7

Loading python3/3.10.7
  Loading requirement: gcc/11.3.0-binutils-2.38
Loaded module: cuda/11.6
Loaded module: cudnn/v8.3.2.44-prod-cuda-11.X
2023-01-25 16:47:57.158814: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2023-01-25 16:48:00.243631: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer.so.7'; dlerror: libnvinfer.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /appl/cudnn/v8.3.2.44-prod-cuda-11.5/lib:/appl/cuda/11.6.0/lib64:/appl/python/3.10.7/lib:/appl/gcc/11.3.0-binutils-2.38/lib64:/appl/gcc/11.3.0-binutils-2.38/lib:/lsf/10.1/linux3.10-glibc2.17-x86_64/lib
2023-01-25 16:48:00.244288: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer_plugin.so.7'; dlerror: libnvinfer_plugin.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /appl/cudnn/v8.3.2.44-prod-cuda-11.5/lib:/appl/cuda/11.6.0/lib64:/appl/python/3.10.7/lib:/appl/gcc/11.3.0-binutils-2.38/lib64:/appl/gcc/11.3.0-binutils-2.38/lib:/lsf/10.1/linux3.10-glibc2.17-x86_64/lib
2023-01-25 16:48:00.244301: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Cannot dlopen some TensorRT libraries. If you would like to use Nvidia GPU with TensorRT, please make sure the missing libraries mentioned above are installed properly.
2023-01-25 16:48:05.646249: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2023-01-25 16:48:07.334992: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1613] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 30961 MB memory:  -> device: 0, name: Tesla V100-SXM2-32GB, pci bus id: 0000:15:00.0, compute capability: 7.0
Epochs:  100
Optimizer:  RMSprop(learning_rate=0.001)
Loss function name:  smart_sqrt_abs_min_loss
Csv file used:  black_background_500x500.csv
Verbose:  2
Unique name:  RMSprop_smart_sqrt_abs_min_loss_0001_model_h_
Output folder:  iter6
Model name:  load_model_h
 
        ################ MODEL ############### 

        inputs = keras.Input(shape=(input_size, input_size, 1))
        x = layers.Conv2D(filters=64, kernel_size=11, activation="relu")(inputs)
        x = layers.Conv2D(filters=64, kernel_size=11, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=5, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=5, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Flatten()(x)
        x = layers.Dense(210, activation="relu")(x)
        x = layers.Dense(210, activation="relu")(x)
        x = layers.Dense(210, activation="relu")(x)
        x = layers.Dense(32, activation="sigmoid")(x)
        outputs = layers.Dense(3)(x)

        model = keras.Model(inputs=inputs, outputs=outputs)
    
Model: "model"
_________________________________________________________________
 Layer (type)                Output Shape              Param #   
=================================================================
 input_1 (InputLayer)        [(None, 500, 500, 1)]     0         
                                                                 
 conv2d (Conv2D)             (None, 490, 490, 64)      7808      
                                                                 
 conv2d_1 (Conv2D)           (None, 480, 480, 64)      495680    
                                                                 
 max_pooling2d (MaxPooling2D  (None, 240, 240, 64)     0         
 )                                                               
                                                                 
 conv2d_2 (Conv2D)           (None, 236, 236, 64)      102464    
                                                                 
 conv2d_3 (Conv2D)           (None, 232, 232, 64)      102464    
                                                                 
 max_pooling2d_1 (MaxPooling  (None, 116, 116, 64)     0         
 2D)                                                             
                                                                 
 conv2d_4 (Conv2D)           (None, 114, 114, 64)      36928     
                                                                 
 conv2d_5 (Conv2D)           (None, 112, 112, 64)      36928     
                                                                 
 max_pooling2d_2 (MaxPooling  (None, 56, 56, 64)       0         
 2D)                                                             
                                                                 
 conv2d_6 (Conv2D)           (None, 54, 54, 64)        36928     
                                                                 
 conv2d_7 (Conv2D)           (None, 52, 52, 64)        36928     
                                                                 
 max_pooling2d_3 (MaxPooling  (None, 26, 26, 64)       0         
 2D)                                                             
                                                                 
 conv2d_8 (Conv2D)           (None, 24, 24, 64)        36928     
                                                                 
 conv2d_9 (Conv2D)           (None, 22, 22, 64)        36928     
                                                                 
 max_pooling2d_4 (MaxPooling  (None, 11, 11, 64)       0         
 2D)                                                             
                                                                 
 conv2d_10 (Conv2D)          (None, 9, 9, 64)          36928     
                                                                 
 conv2d_11 (Conv2D)          (None, 7, 7, 64)          36928     
                                                                 
 max_pooling2d_5 (MaxPooling  (None, 3, 3, 64)         0         
 2D)                                                             
                                                                 
 flatten (Flatten)           (None, 576)               0         
                                                                 
 dense (Dense)               (None, 210)               121170    
                                                                 
 dense_1 (Dense)             (None, 210)               44310     
                                                                 
 dense_2 (Dense)             (None, 210)               44310     
                                                                 
 dense_3 (Dense)             (None, 32)                6752      
                                                                 
 dense_4 (Dense)             (None, 3)                 99        
                                                                 
=================================================================
Total params: 1,220,481
Trainable params: 1,220,481
Non-trainable params: 0
_________________________________________________________________
/zhome/ab/7/153983/project/venv/lib/python3.10/site-packages/keras/utils/image_utils.py:409: UserWarning: grayscale is deprecated. Please use color_mode = "grayscale"
  warnings.warn(
Epoch 1/100
2023-01-25 16:48:11.450175: I tensorflow/compiler/xla/stream_executor/cuda/cuda_dnn.cc:428] Loaded cuDNN version 8302
273/273 - 253s - loss: 0.2543 - smart_sqrt_abs_min_loss: 0.2543 - accuracy: 0.4008 - val_loss: 0.2624 - val_smart_sqrt_abs_min_loss: 0.2624 - val_accuracy: 0.3518 - 253s/epoch - 926ms/step
Epoch 2/100
273/273 - 223s - loss: 0.2788 - smart_sqrt_abs_min_loss: 0.2788 - accuracy: 0.3558 - val_loss: 0.2349 - val_smart_sqrt_abs_min_loss: 0.2349 - val_accuracy: 0.2984 - 223s/epoch - 818ms/step
Epoch 3/100
273/273 - 223s - loss: 0.2502 - smart_sqrt_abs_min_loss: 0.2502 - accuracy: 0.3321 - val_loss: 0.2320 - val_smart_sqrt_abs_min_loss: 0.2320 - val_accuracy: 0.3347 - 223s/epoch - 818ms/step
Epoch 4/100
273/273 - 224s - loss: 0.2874 - smart_sqrt_abs_min_loss: 0.2874 - accuracy: 0.3211 - val_loss: 0.2608 - val_smart_sqrt_abs_min_loss: 0.2608 - val_accuracy: 0.4375 - 224s/epoch - 819ms/step
Epoch 5/100
273/273 - 226s - loss: 0.2816 - smart_sqrt_abs_min_loss: 0.2816 - accuracy: 0.2966 - val_loss: 0.2630 - val_smart_sqrt_abs_min_loss: 0.2630 - val_accuracy: 0.5282 - 226s/epoch - 829ms/step
Epoch 6/100
273/273 - 230s - loss: 0.2820 - smart_sqrt_abs_min_loss: 0.2820 - accuracy: 0.3238 - val_loss: 0.2407 - val_smart_sqrt_abs_min_loss: 0.2407 - val_accuracy: 0.2913 - 230s/epoch - 841ms/step
Epoch 7/100
273/273 - 229s - loss: 0.2644 - smart_sqrt_abs_min_loss: 0.2644 - accuracy: 0.3191 - val_loss: 0.6665 - val_smart_sqrt_abs_min_loss: 0.6665 - val_accuracy: 0.3196 - 229s/epoch - 840ms/step
Epoch 8/100
273/273 - 229s - loss: 0.2503 - smart_sqrt_abs_min_loss: 0.2503 - accuracy: 0.3623 - val_loss: 0.2444 - val_smart_sqrt_abs_min_loss: 0.2444 - val_accuracy: 0.2742 - 229s/epoch - 840ms/step
Epoch 9/100
273/273 - 227s - loss: 0.2649 - smart_sqrt_abs_min_loss: 0.2649 - accuracy: 0.3255 - val_loss: 0.2608 - val_smart_sqrt_abs_min_loss: 0.2608 - val_accuracy: 0.4778 - 227s/epoch - 831ms/step
Epoch 10/100
273/273 - 229s - loss: 0.3023 - smart_sqrt_abs_min_loss: 0.3023 - accuracy: 0.2895 - val_loss: 0.2401 - val_smart_sqrt_abs_min_loss: 0.2401 - val_accuracy: 0.4345 - 229s/epoch - 840ms/step
Epoch 11/100
273/273 - 228s - loss: 0.2499 - smart_sqrt_abs_min_loss: 0.2499 - accuracy: 0.3405 - val_loss: 0.2769 - val_smart_sqrt_abs_min_loss: 0.2769 - val_accuracy: 0.3921 - 228s/epoch - 834ms/step
Epoch 12/100
273/273 - 228s - loss: 0.2486 - smart_sqrt_abs_min_loss: 0.2486 - accuracy: 0.3393 - val_loss: 0.2397 - val_smart_sqrt_abs_min_loss: 0.2397 - val_accuracy: 0.2026 - 228s/epoch - 833ms/step
Epoch 13/100
273/273 - 228s - loss: 0.2460 - smart_sqrt_abs_min_loss: 0.2460 - accuracy: 0.3093 - val_loss: 0.2472 - val_smart_sqrt_abs_min_loss: 0.2472 - val_accuracy: 0.3327 - 228s/epoch - 836ms/step
Epoch 14/100
273/273 - 227s - loss: 0.2450 - smart_sqrt_abs_min_loss: 0.2450 - accuracy: 0.3961 - val_loss: 0.2232 - val_smart_sqrt_abs_min_loss: 0.2232 - val_accuracy: 0.4294 - 227s/epoch - 830ms/step
Epoch 15/100
273/273 - 228s - loss: 0.2433 - smart_sqrt_abs_min_loss: 0.2433 - accuracy: 0.3834 - val_loss: 0.2666 - val_smart_sqrt_abs_min_loss: 0.2666 - val_accuracy: 0.3216 - 228s/epoch - 837ms/step
Epoch 16/100
273/273 - 227s - loss: 0.2492 - smart_sqrt_abs_min_loss: 0.2492 - accuracy: 0.3375 - val_loss: 0.2593 - val_smart_sqrt_abs_min_loss: 0.2593 - val_accuracy: 0.3690 - 227s/epoch - 830ms/step
Epoch 17/100
273/273 - 226s - loss: 0.2447 - smart_sqrt_abs_min_loss: 0.2447 - accuracy: 0.3740 - val_loss: 0.2632 - val_smart_sqrt_abs_min_loss: 0.2632 - val_accuracy: 0.1815 - 226s/epoch - 827ms/step
Epoch 18/100
273/273 - 228s - loss: 0.2500 - smart_sqrt_abs_min_loss: 0.2500 - accuracy: 0.3661 - val_loss: 0.2629 - val_smart_sqrt_abs_min_loss: 0.2629 - val_accuracy: 0.5101 - 228s/epoch - 834ms/step
Epoch 19/100
273/273 - 226s - loss: 0.2643 - smart_sqrt_abs_min_loss: 0.2643 - accuracy: 0.3164 - val_loss: 0.2632 - val_smart_sqrt_abs_min_loss: 0.2632 - val_accuracy: 0.3185 - 226s/epoch - 829ms/step
Epoch 20/100
273/273 - 226s - loss: 0.2853 - smart_sqrt_abs_min_loss: 0.2853 - accuracy: 0.2934 - val_loss: 0.2498 - val_smart_sqrt_abs_min_loss: 0.2498 - val_accuracy: 0.4133 - 226s/epoch - 829ms/step
Epoch 21/100
273/273 - 228s - loss: 0.2463 - smart_sqrt_abs_min_loss: 0.2463 - accuracy: 0.3681 - val_loss: 0.2478 - val_smart_sqrt_abs_min_loss: 0.2478 - val_accuracy: 0.3216 - 228s/epoch - 834ms/step
Epoch 22/100
273/273 - 227s - loss: 0.2943 - smart_sqrt_abs_min_loss: 0.2943 - accuracy: 0.3090 - val_loss: 0.2481 - val_smart_sqrt_abs_min_loss: 0.2481 - val_accuracy: 0.3004 - 227s/epoch - 832ms/step
Epoch 23/100
273/273 - 228s - loss: 0.2470 - smart_sqrt_abs_min_loss: 0.2470 - accuracy: 0.3788 - val_loss: 0.2499 - val_smart_sqrt_abs_min_loss: 0.2499 - val_accuracy: 0.3458 - 228s/epoch - 837ms/step
Epoch 24/100
273/273 - 226s - loss: 0.2549 - smart_sqrt_abs_min_loss: 0.2549 - accuracy: 0.3424 - val_loss: 0.2522 - val_smart_sqrt_abs_min_loss: 0.2522 - val_accuracy: 0.3256 - 226s/epoch - 828ms/step
Epoch 25/100
273/273 - 226s - loss: 0.2502 - smart_sqrt_abs_min_loss: 0.2502 - accuracy: 0.3252 - val_loss: 0.2416 - val_smart_sqrt_abs_min_loss: 0.2416 - val_accuracy: 0.3760 - 226s/epoch - 828ms/step
Epoch 26/100
273/273 - 228s - loss: 0.2412 - smart_sqrt_abs_min_loss: 0.2412 - accuracy: 0.3546 - val_loss: 0.2410 - val_smart_sqrt_abs_min_loss: 0.2410 - val_accuracy: 0.3841 - 228s/epoch - 836ms/step
Epoch 27/100
273/273 - 226s - loss: 0.2455 - smart_sqrt_abs_min_loss: 0.2455 - accuracy: 0.3363 - val_loss: 0.2635 - val_smart_sqrt_abs_min_loss: 0.2635 - val_accuracy: 0.2772 - 226s/epoch - 829ms/step
Epoch 28/100
273/273 - 226s - loss: 0.2734 - smart_sqrt_abs_min_loss: 0.2734 - accuracy: 0.3277 - val_loss: 0.2589 - val_smart_sqrt_abs_min_loss: 0.2589 - val_accuracy: 0.2772 - 226s/epoch - 828ms/step
Epoch 29/100
273/273 - 228s - loss: 0.3201 - smart_sqrt_abs_min_loss: 0.3201 - accuracy: 0.3112 - val_loss: 0.2507 - val_smart_sqrt_abs_min_loss: 0.2507 - val_accuracy: 0.2954 - 228s/epoch - 834ms/step
Epoch 30/100
273/273 - 226s - loss: 0.2586 - smart_sqrt_abs_min_loss: 0.2586 - accuracy: 0.3197 - val_loss: 0.2567 - val_smart_sqrt_abs_min_loss: 0.2567 - val_accuracy: 0.2802 - 226s/epoch - 827ms/step
Epoch 31/100
273/273 - 228s - loss: 0.2671 - smart_sqrt_abs_min_loss: 0.2671 - accuracy: 0.3700 - val_loss: 0.2449 - val_smart_sqrt_abs_min_loss: 0.2449 - val_accuracy: 0.3034 - 228s/epoch - 837ms/step
Epoch 32/100
273/273 - 226s - loss: 0.2502 - smart_sqrt_abs_min_loss: 0.2502 - accuracy: 0.3118 - val_loss: 0.2539 - val_smart_sqrt_abs_min_loss: 0.2539 - val_accuracy: 0.2409 - 226s/epoch - 827ms/step
Epoch 33/100
273/273 - 226s - loss: 0.2523 - smart_sqrt_abs_min_loss: 0.2523 - accuracy: 0.3205 - val_loss: 0.2379 - val_smart_sqrt_abs_min_loss: 0.2379 - val_accuracy: 0.2520 - 226s/epoch - 829ms/step
Epoch 34/100
273/273 - 227s - loss: 0.2596 - smart_sqrt_abs_min_loss: 0.2596 - accuracy: 0.3191 - val_loss: 0.2793 - val_smart_sqrt_abs_min_loss: 0.2793 - val_accuracy: 0.3478 - 227s/epoch - 832ms/step
Epoch 35/100
273/273 - 226s - loss: 0.2482 - smart_sqrt_abs_min_loss: 0.2482 - accuracy: 0.3758 - val_loss: 0.2605 - val_smart_sqrt_abs_min_loss: 0.2605 - val_accuracy: 0.3488 - 226s/epoch - 826ms/step
Epoch 36/100
273/273 - 225s - loss: 0.2681 - smart_sqrt_abs_min_loss: 0.2681 - accuracy: 0.3396 - val_loss: 0.2353 - val_smart_sqrt_abs_min_loss: 0.2353 - val_accuracy: 0.2208 - 225s/epoch - 824ms/step
Epoch 37/100
273/273 - 227s - loss: 0.2557 - smart_sqrt_abs_min_loss: 0.2557 - accuracy: 0.3436 - val_loss: 0.3315 - val_smart_sqrt_abs_min_loss: 0.3315 - val_accuracy: 0.4627 - 227s/epoch - 833ms/step
Epoch 38/100
273/273 - 226s - loss: 0.2593 - smart_sqrt_abs_min_loss: 0.2593 - accuracy: 0.2917 - val_loss: 0.2487 - val_smart_sqrt_abs_min_loss: 0.2487 - val_accuracy: 0.3468 - 226s/epoch - 828ms/step
Epoch 39/100
273/273 - 226s - loss: 0.2472 - smart_sqrt_abs_min_loss: 0.2472 - accuracy: 0.3597 - val_loss: 0.2610 - val_smart_sqrt_abs_min_loss: 0.2610 - val_accuracy: 0.2742 - 226s/epoch - 828ms/step
Epoch 40/100
273/273 - 227s - loss: 0.2399 - smart_sqrt_abs_min_loss: 0.2399 - accuracy: 0.3797 - val_loss: 0.2524 - val_smart_sqrt_abs_min_loss: 0.2524 - val_accuracy: 0.3569 - 227s/epoch - 832ms/step
Epoch 41/100
273/273 - 226s - loss: 0.2374 - smart_sqrt_abs_min_loss: 0.2374 - accuracy: 0.3520 - val_loss: 0.2451 - val_smart_sqrt_abs_min_loss: 0.2451 - val_accuracy: 0.3942 - 226s/epoch - 827ms/step
Epoch 42/100
273/273 - 228s - loss: 0.2559 - smart_sqrt_abs_min_loss: 0.2559 - accuracy: 0.3125 - val_loss: 0.2607 - val_smart_sqrt_abs_min_loss: 0.2607 - val_accuracy: 0.3498 - 228s/epoch - 834ms/step
Epoch 43/100
273/273 - 226s - loss: 0.2495 - smart_sqrt_abs_min_loss: 0.2495 - accuracy: 0.3290 - val_loss: 0.2768 - val_smart_sqrt_abs_min_loss: 0.2768 - val_accuracy: 0.4093 - 226s/epoch - 827ms/step
Epoch 44/100
273/273 - 226s - loss: 0.2525 - smart_sqrt_abs_min_loss: 0.2525 - accuracy: 0.3206 - val_loss: 0.2475 - val_smart_sqrt_abs_min_loss: 0.2475 - val_accuracy: 0.3054 - 226s/epoch - 827ms/step
Epoch 45/100
273/273 - 227s - loss: 0.2544 - smart_sqrt_abs_min_loss: 0.2544 - accuracy: 0.3795 - val_loss: 0.2581 - val_smart_sqrt_abs_min_loss: 0.2581 - val_accuracy: 0.2873 - 227s/epoch - 833ms/step
Epoch 46/100
273/273 - 226s - loss: 0.2621 - smart_sqrt_abs_min_loss: 0.2621 - accuracy: 0.3413 - val_loss: 0.6952 - val_smart_sqrt_abs_min_loss: 0.6952 - val_accuracy: 0.3377 - 226s/epoch - 830ms/step
Epoch 47/100
273/273 - 226s - loss: 0.2587 - smart_sqrt_abs_min_loss: 0.2587 - accuracy: 0.3578 - val_loss: 0.2436 - val_smart_sqrt_abs_min_loss: 0.2436 - val_accuracy: 0.3165 - 226s/epoch - 826ms/step
Epoch 48/100
273/273 - 228s - loss: 0.2532 - smart_sqrt_abs_min_loss: 0.2532 - accuracy: 0.3668 - val_loss: 0.2443 - val_smart_sqrt_abs_min_loss: 0.2443 - val_accuracy: 0.2944 - 228s/epoch - 834ms/step
Epoch 49/100
273/273 - 226s - loss: 0.2971 - smart_sqrt_abs_min_loss: 0.2971 - accuracy: 0.3193 - val_loss: 0.2593 - val_smart_sqrt_abs_min_loss: 0.2593 - val_accuracy: 0.4526 - 226s/epoch - 828ms/step
Epoch 50/100
273/273 - 229s - loss: 0.2495 - smart_sqrt_abs_min_loss: 0.2495 - accuracy: 0.3592 - val_loss: 0.2544 - val_smart_sqrt_abs_min_loss: 0.2544 - val_accuracy: 0.3760 - 229s/epoch - 839ms/step
Epoch 51/100
273/273 - 226s - loss: 0.2426 - smart_sqrt_abs_min_loss: 0.2426 - accuracy: 0.3463 - val_loss: 0.2518 - val_smart_sqrt_abs_min_loss: 0.2518 - val_accuracy: 0.3861 - 226s/epoch - 827ms/step
Epoch 52/100
273/273 - 226s - loss: 0.2619 - smart_sqrt_abs_min_loss: 0.2619 - accuracy: 0.3360 - val_loss: 0.2661 - val_smart_sqrt_abs_min_loss: 0.2661 - val_accuracy: 0.2661 - 226s/epoch - 828ms/step
Epoch 53/100
273/273 - 228s - loss: 0.2474 - smart_sqrt_abs_min_loss: 0.2474 - accuracy: 0.3705 - val_loss: 0.2745 - val_smart_sqrt_abs_min_loss: 0.2745 - val_accuracy: 0.1865 - 228s/epoch - 836ms/step
Epoch 54/100
273/273 - 227s - loss: 0.2454 - smart_sqrt_abs_min_loss: 0.2454 - accuracy: 0.3899 - val_loss: 0.2592 - val_smart_sqrt_abs_min_loss: 0.2592 - val_accuracy: 0.1966 - 227s/epoch - 831ms/step
Epoch 55/100
273/273 - 226s - loss: 0.2458 - smart_sqrt_abs_min_loss: 0.2458 - accuracy: 0.3615 - val_loss: 0.2497 - val_smart_sqrt_abs_min_loss: 0.2497 - val_accuracy: 0.1411 - 226s/epoch - 828ms/step
Epoch 56/100
273/273 - 227s - loss: 0.2710 - smart_sqrt_abs_min_loss: 0.2710 - accuracy: 0.3275 - val_loss: 0.2407 - val_smart_sqrt_abs_min_loss: 0.2407 - val_accuracy: 0.4647 - 227s/epoch - 830ms/step
Epoch 57/100
273/273 - 227s - loss: 0.2878 - smart_sqrt_abs_min_loss: 0.2878 - accuracy: 0.3346 - val_loss: 0.2470 - val_smart_sqrt_abs_min_loss: 0.2470 - val_accuracy: 0.2853 - 227s/epoch - 831ms/step
Epoch 58/100
273/273 - 228s - loss: 0.2813 - smart_sqrt_abs_min_loss: 0.2813 - accuracy: 0.3278 - val_loss: 0.2465 - val_smart_sqrt_abs_min_loss: 0.2465 - val_accuracy: 0.3831 - 228s/epoch - 833ms/step
Epoch 59/100
273/273 - 227s - loss: 0.2392 - smart_sqrt_abs_min_loss: 0.2392 - accuracy: 0.3527 - val_loss: 0.2726 - val_smart_sqrt_abs_min_loss: 0.2726 - val_accuracy: 0.3992 - 227s/epoch - 831ms/step
Epoch 60/100
273/273 - 226s - loss: 0.2519 - smart_sqrt_abs_min_loss: 0.2519 - accuracy: 0.3371 - val_loss: 0.2521 - val_smart_sqrt_abs_min_loss: 0.2521 - val_accuracy: 0.3841 - 226s/epoch - 829ms/step
Epoch 61/100
273/273 - 227s - loss: 0.2775 - smart_sqrt_abs_min_loss: 0.2775 - accuracy: 0.3166 - val_loss: 0.2597 - val_smart_sqrt_abs_min_loss: 0.2597 - val_accuracy: 0.2782 - 227s/epoch - 833ms/step
Epoch 62/100
273/273 - 227s - loss: 0.2664 - smart_sqrt_abs_min_loss: 0.2664 - accuracy: 0.3237 - val_loss: 0.2523 - val_smart_sqrt_abs_min_loss: 0.2523 - val_accuracy: 0.3589 - 227s/epoch - 832ms/step
Epoch 63/100
273/273 - 226s - loss: 0.2751 - smart_sqrt_abs_min_loss: 0.2751 - accuracy: 0.3134 - val_loss: 0.2509 - val_smart_sqrt_abs_min_loss: 0.2509 - val_accuracy: 0.2762 - 226s/epoch - 829ms/step
Epoch 64/100
273/273 - 227s - loss: 0.2569 - smart_sqrt_abs_min_loss: 0.2569 - accuracy: 0.3388 - val_loss: 0.2268 - val_smart_sqrt_abs_min_loss: 0.2268 - val_accuracy: 0.4748 - 227s/epoch - 833ms/step
Epoch 65/100
273/273 - 229s - loss: 0.2631 - smart_sqrt_abs_min_loss: 0.2631 - accuracy: 0.3313 - val_loss: 0.2295 - val_smart_sqrt_abs_min_loss: 0.2295 - val_accuracy: 0.2591 - 229s/epoch - 837ms/step
Epoch 66/100
273/273 - 233s - loss: 0.2595 - smart_sqrt_abs_min_loss: 0.2595 - accuracy: 0.3598 - val_loss: 0.2518 - val_smart_sqrt_abs_min_loss: 0.2518 - val_accuracy: 0.2298 - 233s/epoch - 854ms/step
Epoch 67/100
273/273 - 232s - loss: 0.2580 - smart_sqrt_abs_min_loss: 0.2580 - accuracy: 0.3138 - val_loss: 0.2789 - val_smart_sqrt_abs_min_loss: 0.2789 - val_accuracy: 0.3004 - 232s/epoch - 851ms/step
Epoch 68/100
273/273 - 234s - loss: 0.2481 - smart_sqrt_abs_min_loss: 0.2481 - accuracy: 0.4074 - val_loss: 0.2419 - val_smart_sqrt_abs_min_loss: 0.2419 - val_accuracy: 0.2601 - 234s/epoch - 856ms/step
Epoch 69/100
273/273 - 233s - loss: 0.2462 - smart_sqrt_abs_min_loss: 0.2462 - accuracy: 0.3285 - val_loss: 0.3482 - val_smart_sqrt_abs_min_loss: 0.3482 - val_accuracy: 0.3065 - 233s/epoch - 852ms/step
Epoch 70/100
273/273 - 233s - loss: 0.2414 - smart_sqrt_abs_min_loss: 0.2414 - accuracy: 0.3618 - val_loss: 0.2413 - val_smart_sqrt_abs_min_loss: 0.2413 - val_accuracy: 0.2651 - 233s/epoch - 853ms/step
Epoch 71/100
273/273 - 233s - loss: 0.2911 - smart_sqrt_abs_min_loss: 0.2911 - accuracy: 0.3115 - val_loss: 0.2401 - val_smart_sqrt_abs_min_loss: 0.2401 - val_accuracy: 0.2843 - 233s/epoch - 855ms/step
Epoch 72/100
273/273 - 226s - loss: 0.2344 - smart_sqrt_abs_min_loss: 0.2344 - accuracy: 0.4163 - val_loss: 0.2575 - val_smart_sqrt_abs_min_loss: 0.2575 - val_accuracy: 0.3538 - 226s/epoch - 828ms/step
Epoch 73/100
273/273 - 228s - loss: 0.2611 - smart_sqrt_abs_min_loss: 0.2611 - accuracy: 0.2831 - val_loss: 0.2623 - val_smart_sqrt_abs_min_loss: 0.2623 - val_accuracy: 0.4052 - 228s/epoch - 836ms/step
Epoch 74/100
273/273 - 227s - loss: 0.2462 - smart_sqrt_abs_min_loss: 0.2462 - accuracy: 0.3126 - val_loss: 0.2744 - val_smart_sqrt_abs_min_loss: 0.2744 - val_accuracy: 0.2258 - 227s/epoch - 830ms/step
Epoch 75/100
273/273 - 227s - loss: 0.2461 - smart_sqrt_abs_min_loss: 0.2461 - accuracy: 0.3368 - val_loss: 0.2540 - val_smart_sqrt_abs_min_loss: 0.2540 - val_accuracy: 0.3417 - 227s/epoch - 833ms/step
Epoch 76/100
273/273 - 229s - loss: 0.2398 - smart_sqrt_abs_min_loss: 0.2398 - accuracy: 0.3711 - val_loss: 0.2331 - val_smart_sqrt_abs_min_loss: 0.2331 - val_accuracy: 0.3065 - 229s/epoch - 838ms/step
Epoch 77/100
273/273 - 227s - loss: 0.2445 - smart_sqrt_abs_min_loss: 0.2445 - accuracy: 0.3180 - val_loss: 0.2592 - val_smart_sqrt_abs_min_loss: 0.2592 - val_accuracy: 0.2903 - 227s/epoch - 833ms/step
Epoch 78/100
273/273 - 226s - loss: 0.2544 - smart_sqrt_abs_min_loss: 0.2544 - accuracy: 0.2989 - val_loss: 0.2519 - val_smart_sqrt_abs_min_loss: 0.2519 - val_accuracy: 0.2500 - 226s/epoch - 828ms/step
Epoch 79/100
273/273 - 228s - loss: 0.2604 - smart_sqrt_abs_min_loss: 0.2604 - accuracy: 0.3407 - val_loss: 0.2655 - val_smart_sqrt_abs_min_loss: 0.2655 - val_accuracy: 0.3659 - 228s/epoch - 836ms/step
Epoch 80/100
User defined signal 2

------------------------------------------------------------
Sender: LSF System <lsfadmin@hpc.dtu.dk>
Subject: Job 15232425: <s202741-train> in cluster <dcc> Exited

Job <s202741-train> was submitted from host <n-62-20-1> by user <s202741> in cluster <dcc> at Sun Jan 22 12:32:56 2023
Job was executed on host(s) <4*n-62-20-10>, in queue <gpuv100>, as user <s202741> in cluster <dcc> at Wed Jan 25 16:47:50 2023
</zhome/ab/7/153983> was used as the home directory.
</zhome/ab/7/153983/project/scripts> was used as the working directory.
Started at Wed Jan 25 16:47:50 2023
Terminated at Wed Jan 25 21:49:16 2023
Results reported at Wed Jan 25 21:49:16 2023

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#!/bin/bash
### General options
### -- specify queue --   NOTE: TitanX is significantly faster than K80
#BSUB -q gpuv100
#BSUB -gpu "num=1:mode=exclusive_process"
### -- set the job Name --
#BSUB -J s202741-train
### -- ask for number of cores (default: 1) --
#BSUB -n 4
#BSUB -R "span[hosts=1]"
### -- set walltime limit: hh:mm --  maximum 24 hours for GPU-queues right now
#BSUB -W 5:00
# request 5GB of memory
#BSUB -R "rusage[mem=5GB]"
### -- Specify the output and error file. %J is the job-id --
### -- -o and -e mean append, -oo and -eo mean overwrite --
#BSUB -o iter6/Logs/RMSprop_smart_sqrt_abs_min_loss_0001_model_h_%J.out
# -- end of LSF options --

# Necessary modules
cd ..
source venv/bin/activate

python trainModelIter3.py 100 "RMSprop(learning_rate=0.001)" "smart_sqrt_abs_min_loss" "black_background_500x500.csv" 2 "RMSprop_smart_sqrt_abs_min_loss_0001_model_h_" "iter6" "load_model_h"

    
------------------------------------------------------------

TERM_RUNLIMIT: job killed after reaching LSF run time limit.
Exited with exit code 140.

Resource usage summary:

    CPU time :                                   20364.00 sec.
    Max Memory :                                 3004 MB
    Average Memory :                             2876.17 MB
    Total Requested Memory :                     20480.00 MB
    Delta Memory :                               17476.00 MB
    Max Swap :                                   -
    Max Processes :                              4
    Max Threads :                                33
    Run time :                                   18086 sec.
    Turnaround time :                            292580 sec.

The output (if any) is above this job summary.

