Loaded dependency [python3/3.10.7]: gcc/11.3.0-binutils-2.38
Loaded module: python3/3.10.7

Loading python3/3.10.7
  Loading requirement: gcc/11.3.0-binutils-2.38
Loaded module: cuda/11.6
Loaded module: cudnn/v8.3.2.44-prod-cuda-11.X
2023-01-24 13:48:38.765009: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2023-01-24 13:48:48.420912: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer.so.7'; dlerror: libnvinfer.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /appl/cudnn/v8.3.2.44-prod-cuda-11.5/lib:/appl/cuda/11.6.0/lib64:/appl/python/3.10.7/lib:/appl/gcc/11.3.0-binutils-2.38/lib64:/appl/gcc/11.3.0-binutils-2.38/lib:/lsf/10.1/linux3.10-glibc2.17-x86_64/lib
2023-01-24 13:48:48.421672: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer_plugin.so.7'; dlerror: libnvinfer_plugin.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /appl/cudnn/v8.3.2.44-prod-cuda-11.5/lib:/appl/cuda/11.6.0/lib64:/appl/python/3.10.7/lib:/appl/gcc/11.3.0-binutils-2.38/lib64:/appl/gcc/11.3.0-binutils-2.38/lib:/lsf/10.1/linux3.10-glibc2.17-x86_64/lib
2023-01-24 13:48:48.421684: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Cannot dlopen some TensorRT libraries. If you would like to use Nvidia GPU with TensorRT, please make sure the missing libraries mentioned above are installed properly.
2023-01-24 13:48:58.650015: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2023-01-24 13:49:01.946212: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1613] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 14610 MB memory:  -> device: 0, name: Tesla V100-PCIE-16GB, pci bus id: 0000:af:00.0, compute capability: 7.0
Epochs:  100
Optimizer:  RMSprop(learning_rate=0.0005)
Loss function name:  abs_loss_function
Csv file used:  black_background_500x500.csv
Verbose:  2
Unique name:  RMSprop_abs_loss_function_00005_model_j_
Output folder:  iter6
Model name:  load_model_j
 
        ################ MODEL ############### 

        inputs = keras.Input(shape=(input_size, input_size, 1))
        x = layers.Conv2D(filters=32, kernel_size=11, activation="relu")(inputs)
        x = layers.Conv2D(filters=32, kernel_size=11, activation="relu")(x)
        x = layers.Conv2D(filters=32, kernel_size=11, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=32, kernel_size=5, activation="relu")(x)
        x = layers.Conv2D(filters=32, kernel_size=5, activation="relu")(x)
        x = layers.Conv2D(filters=32, kernel_size=5, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=32, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=32, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=32, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=32, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=32, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=32, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=32, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=32, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=32, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=4)(x)
        x = layers.Flatten()(x)
        x = layers.Dense(210, activation="relu", kernel_regularizer=keras.regularizers.l1(0.01))(x)
        x = layers.Dense(210, activation="relu", kernel_regularizer=keras.regularizers.l1(0.01))(x)
        x = layers.Dense(210, activation="relu", kernel_regularizer=keras.regularizers.l1(0.01))(x)
        x = layers.Dense(32, activation="sigmoid", kernel_regularizer=keras.regularizers.l1(0.01))(x)
        outputs = layers.Dense(3)(x)
    
Model: "model"
_________________________________________________________________
 Layer (type)                Output Shape              Param #   
=================================================================
 input_1 (InputLayer)        [(None, 500, 500, 1)]     0         
                                                                 
 conv2d (Conv2D)             (None, 490, 490, 32)      3904      
                                                                 
 conv2d_1 (Conv2D)           (None, 480, 480, 32)      123936    
                                                                 
 conv2d_2 (Conv2D)           (None, 470, 470, 32)      123936    
                                                                 
 max_pooling2d (MaxPooling2D  (None, 235, 235, 32)     0         
 )                                                               
                                                                 
 conv2d_3 (Conv2D)           (None, 231, 231, 32)      25632     
                                                                 
 conv2d_4 (Conv2D)           (None, 227, 227, 32)      25632     
                                                                 
 conv2d_5 (Conv2D)           (None, 223, 223, 32)      25632     
                                                                 
 max_pooling2d_1 (MaxPooling  (None, 111, 111, 32)     0         
 2D)                                                             
                                                                 
 conv2d_6 (Conv2D)           (None, 109, 109, 32)      9248      
                                                                 
 conv2d_7 (Conv2D)           (None, 107, 107, 32)      9248      
                                                                 
 conv2d_8 (Conv2D)           (None, 105, 105, 32)      9248      
                                                                 
 max_pooling2d_2 (MaxPooling  (None, 52, 52, 32)       0         
 2D)                                                             
                                                                 
 conv2d_9 (Conv2D)           (None, 50, 50, 32)        9248      
                                                                 
 conv2d_10 (Conv2D)          (None, 48, 48, 32)        9248      
                                                                 
 conv2d_11 (Conv2D)          (None, 46, 46, 32)        9248      
                                                                 
 max_pooling2d_3 (MaxPooling  (None, 23, 23, 32)       0         
 2D)                                                             
                                                                 
 conv2d_12 (Conv2D)          (None, 21, 21, 32)        9248      
                                                                 
 conv2d_13 (Conv2D)          (None, 19, 19, 32)        9248      
                                                                 
 conv2d_14 (Conv2D)          (None, 17, 17, 32)        9248      
                                                                 
 max_pooling2d_4 (MaxPooling  (None, 4, 4, 32)         0         
 2D)                                                             
                                                                 
 flatten (Flatten)           (None, 512)               0         
                                                                 
 dense (Dense)               (None, 210)               107730    
                                                                 
 dense_1 (Dense)             (None, 210)               44310     
                                                                 
 dense_2 (Dense)             (None, 210)               44310     
                                                                 
 dense_3 (Dense)             (None, 32)                6752      
                                                                 
 dense_4 (Dense)             (None, 3)                 99        
                                                                 
=================================================================
Total params: 615,105
Trainable params: 615,105
Non-trainable params: 0
_________________________________________________________________
/zhome/ab/7/153983/project/venv/lib/python3.10/site-packages/keras/utils/image_utils.py:409: UserWarning: grayscale is deprecated. Please use color_mode = "grayscale"
  warnings.warn(
Epoch 1/100
2023-01-24 13:49:06.626028: I tensorflow/compiler/xla/stream_executor/cuda/cuda_dnn.cc:428] Loaded cuDNN version 8302
273/273 - 207s - loss: 27.5091 - abs_loss_function: 0.2517 - accuracy: 0.3144 - val_loss: 1.0866 - val_abs_loss_function: 0.2564 - val_accuracy: 0.2923 - 207s/epoch - 759ms/step
Epoch 2/100
273/273 - 180s - loss: 0.8223 - abs_loss_function: 0.2652 - accuracy: 0.3396 - val_loss: 0.7727 - val_abs_loss_function: 0.2621 - val_accuracy: 0.3579 - 180s/epoch - 661ms/step
Epoch 3/100
273/273 - 180s - loss: 0.7408 - abs_loss_function: 0.2377 - accuracy: 0.3314 - val_loss: 0.7509 - val_abs_loss_function: 0.2475 - val_accuracy: 0.3942 - 180s/epoch - 660ms/step
Epoch 4/100
273/273 - 181s - loss: 0.7473 - abs_loss_function: 0.2453 - accuracy: 0.3418 - val_loss: 0.7582 - val_abs_loss_function: 0.2577 - val_accuracy: 0.2470 - 181s/epoch - 662ms/step
Epoch 5/100
273/273 - 181s - loss: 0.7468 - abs_loss_function: 0.2448 - accuracy: 0.3204 - val_loss: 0.7786 - val_abs_loss_function: 0.2752 - val_accuracy: 0.3518 - 181s/epoch - 662ms/step
Epoch 6/100
273/273 - 180s - loss: 0.7499 - abs_loss_function: 0.2479 - accuracy: 0.3225 - val_loss: 0.7579 - val_abs_loss_function: 0.2572 - val_accuracy: 0.3347 - 180s/epoch - 660ms/step
Epoch 7/100
273/273 - 181s - loss: 0.7435 - abs_loss_function: 0.2415 - accuracy: 0.3219 - val_loss: 0.7538 - val_abs_loss_function: 0.2504 - val_accuracy: 0.3962 - 181s/epoch - 662ms/step
Epoch 8/100
273/273 - 181s - loss: 0.7450 - abs_loss_function: 0.2430 - accuracy: 0.3262 - val_loss: 0.7529 - val_abs_loss_function: 0.2523 - val_accuracy: 0.2702 - 181s/epoch - 662ms/step
Epoch 9/100
273/273 - 180s - loss: 0.7450 - abs_loss_function: 0.2431 - accuracy: 0.3559 - val_loss: 0.7697 - val_abs_loss_function: 0.2663 - val_accuracy: 0.3619 - 180s/epoch - 661ms/step
Epoch 10/100
273/273 - 180s - loss: 0.7321 - abs_loss_function: 0.2301 - accuracy: 0.3014 - val_loss: 0.7480 - val_abs_loss_function: 0.2474 - val_accuracy: 0.3155 - 180s/epoch - 661ms/step
Epoch 11/100
273/273 - 180s - loss: 0.7384 - abs_loss_function: 0.2364 - accuracy: 0.3013 - val_loss: 0.7717 - val_abs_loss_function: 0.2684 - val_accuracy: 0.5494 - 180s/epoch - 661ms/step
Epoch 12/100
273/273 - 180s - loss: 0.7453 - abs_loss_function: 0.2433 - accuracy: 0.3114 - val_loss: 0.7802 - val_abs_loss_function: 0.2795 - val_accuracy: 0.2681 - 180s/epoch - 660ms/step
Epoch 13/100
273/273 - 181s - loss: 0.7476 - abs_loss_function: 0.2457 - accuracy: 0.3353 - val_loss: 0.7537 - val_abs_loss_function: 0.2503 - val_accuracy: 0.2802 - 181s/epoch - 662ms/step
Epoch 14/100
273/273 - 180s - loss: 0.7460 - abs_loss_function: 0.2440 - accuracy: 0.3289 - val_loss: 0.7435 - val_abs_loss_function: 0.2430 - val_accuracy: 0.3054 - 180s/epoch - 660ms/step
Epoch 15/100
273/273 - 180s - loss: 0.7450 - abs_loss_function: 0.2430 - accuracy: 0.3361 - val_loss: 0.7623 - val_abs_loss_function: 0.2590 - val_accuracy: 0.2550 - 180s/epoch - 659ms/step
Epoch 16/100
273/273 - 180s - loss: 0.7451 - abs_loss_function: 0.2432 - accuracy: 0.3158 - val_loss: 0.7378 - val_abs_loss_function: 0.2372 - val_accuracy: 0.5857 - 180s/epoch - 659ms/step
Epoch 17/100
273/273 - 180s - loss: 0.7491 - abs_loss_function: 0.2471 - accuracy: 0.2964 - val_loss: 0.7467 - val_abs_loss_function: 0.2434 - val_accuracy: 0.4093 - 180s/epoch - 660ms/step
Epoch 18/100
273/273 - 180s - loss: 0.7444 - abs_loss_function: 0.2424 - accuracy: 0.3004 - val_loss: 0.7407 - val_abs_loss_function: 0.2402 - val_accuracy: 0.3911 - 180s/epoch - 661ms/step
Epoch 19/100
273/273 - 180s - loss: 0.7401 - abs_loss_function: 0.2381 - accuracy: 0.3893 - val_loss: 0.7511 - val_abs_loss_function: 0.2478 - val_accuracy: 0.3679 - 180s/epoch - 659ms/step
Epoch 20/100
273/273 - 180s - loss: 0.7418 - abs_loss_function: 0.2398 - accuracy: 0.3155 - val_loss: 0.7358 - val_abs_loss_function: 0.2352 - val_accuracy: 0.2994 - 180s/epoch - 660ms/step
Epoch 21/100
273/273 - 180s - loss: 0.7486 - abs_loss_function: 0.2466 - accuracy: 0.3362 - val_loss: 0.7475 - val_abs_loss_function: 0.2441 - val_accuracy: 0.3155 - 180s/epoch - 660ms/step
Epoch 22/100
273/273 - 180s - loss: 0.7431 - abs_loss_function: 0.2411 - accuracy: 0.3344 - val_loss: 0.7507 - val_abs_loss_function: 0.2501 - val_accuracy: 0.4032 - 180s/epoch - 661ms/step
Epoch 23/100
273/273 - 180s - loss: 0.7441 - abs_loss_function: 0.2422 - accuracy: 0.3629 - val_loss: 0.7773 - val_abs_loss_function: 0.2741 - val_accuracy: 0.2530 - 180s/epoch - 658ms/step
Epoch 24/100
273/273 - 180s - loss: 0.7437 - abs_loss_function: 0.2417 - accuracy: 0.2780 - val_loss: 0.7539 - val_abs_loss_function: 0.2534 - val_accuracy: 0.3377 - 180s/epoch - 660ms/step
Epoch 25/100
273/273 - 180s - loss: 0.7408 - abs_loss_function: 0.2388 - accuracy: 0.2680 - val_loss: 0.7566 - val_abs_loss_function: 0.2533 - val_accuracy: 0.3417 - 180s/epoch - 659ms/step
Epoch 26/100
273/273 - 180s - loss: 0.7465 - abs_loss_function: 0.2445 - accuracy: 0.3004 - val_loss: 0.7717 - val_abs_loss_function: 0.2711 - val_accuracy: 0.3135 - 180s/epoch - 659ms/step
Epoch 27/100
273/273 - 180s - loss: 0.7494 - abs_loss_function: 0.2474 - accuracy: 0.3557 - val_loss: 0.7624 - val_abs_loss_function: 0.2590 - val_accuracy: 0.3962 - 180s/epoch - 659ms/step
Epoch 28/100
273/273 - 180s - loss: 0.7463 - abs_loss_function: 0.2443 - accuracy: 0.3800 - val_loss: 0.7441 - val_abs_loss_function: 0.2435 - val_accuracy: 0.3075 - 180s/epoch - 659ms/step
Epoch 29/100
273/273 - 180s - loss: 0.7401 - abs_loss_function: 0.2381 - accuracy: 0.3173 - val_loss: 0.7806 - val_abs_loss_function: 0.2771 - val_accuracy: 0.2409 - 180s/epoch - 661ms/step
Epoch 30/100
273/273 - 181s - loss: 0.7454 - abs_loss_function: 0.2434 - accuracy: 0.3417 - val_loss: 0.7291 - val_abs_loss_function: 0.2285 - val_accuracy: 0.2117 - 181s/epoch - 662ms/step
Epoch 31/100
273/273 - 180s - loss: 0.7466 - abs_loss_function: 0.2446 - accuracy: 0.3077 - val_loss: 0.7284 - val_abs_loss_function: 0.2250 - val_accuracy: 0.2621 - 180s/epoch - 659ms/step
Epoch 32/100
273/273 - 180s - loss: 0.7409 - abs_loss_function: 0.2389 - accuracy: 0.3574 - val_loss: 0.7457 - val_abs_loss_function: 0.2451 - val_accuracy: 0.4567 - 180s/epoch - 661ms/step
Epoch 33/100
273/273 - 180s - loss: 0.7411 - abs_loss_function: 0.2391 - accuracy: 0.3332 - val_loss: 0.7646 - val_abs_loss_function: 0.2612 - val_accuracy: 0.3901 - 180s/epoch - 659ms/step
Epoch 34/100
273/273 - 180s - loss: 0.7459 - abs_loss_function: 0.2439 - accuracy: 0.3479 - val_loss: 0.7518 - val_abs_loss_function: 0.2512 - val_accuracy: 0.3760 - 180s/epoch - 661ms/step
Epoch 35/100
273/273 - 180s - loss: 0.7434 - abs_loss_function: 0.2414 - accuracy: 0.3135 - val_loss: 0.7433 - val_abs_loss_function: 0.2399 - val_accuracy: 0.3468 - 180s/epoch - 658ms/step
Epoch 36/100
273/273 - 180s - loss: 0.7417 - abs_loss_function: 0.2397 - accuracy: 0.3420 - val_loss: 0.7357 - val_abs_loss_function: 0.2351 - val_accuracy: 0.3044 - 180s/epoch - 660ms/step
Epoch 37/100
273/273 - 180s - loss: 0.7500 - abs_loss_function: 0.2480 - accuracy: 0.3270 - val_loss: 0.7623 - val_abs_loss_function: 0.2590 - val_accuracy: 0.3730 - 180s/epoch - 660ms/step
Epoch 38/100
273/273 - 180s - loss: 0.7433 - abs_loss_function: 0.2413 - accuracy: 0.3075 - val_loss: 0.7506 - val_abs_loss_function: 0.2499 - val_accuracy: 0.3569 - 180s/epoch - 659ms/step
Epoch 39/100
273/273 - 180s - loss: 0.7474 - abs_loss_function: 0.2454 - accuracy: 0.2866 - val_loss: 0.7566 - val_abs_loss_function: 0.2533 - val_accuracy: 0.3054 - 180s/epoch - 659ms/step
Epoch 40/100
273/273 - 180s - loss: 0.7386 - abs_loss_function: 0.2366 - accuracy: 0.3669 - val_loss: 0.7588 - val_abs_loss_function: 0.2581 - val_accuracy: 0.3286 - 180s/epoch - 658ms/step
Epoch 41/100
273/273 - 180s - loss: 0.7488 - abs_loss_function: 0.2468 - accuracy: 0.3387 - val_loss: 0.7330 - val_abs_loss_function: 0.2297 - val_accuracy: 0.2651 - 180s/epoch - 659ms/step
Epoch 42/100
273/273 - 180s - loss: 0.7526 - abs_loss_function: 0.2506 - accuracy: 0.3016 - val_loss: 0.7635 - val_abs_loss_function: 0.2629 - val_accuracy: 0.3942 - 180s/epoch - 659ms/step
Epoch 43/100
273/273 - 180s - loss: 0.7438 - abs_loss_function: 0.2418 - accuracy: 0.3346 - val_loss: 0.7558 - val_abs_loss_function: 0.2523 - val_accuracy: 0.2853 - 180s/epoch - 661ms/step
Epoch 44/100
273/273 - 180s - loss: 0.7510 - abs_loss_function: 0.2490 - accuracy: 0.3475 - val_loss: 0.7470 - val_abs_loss_function: 0.2464 - val_accuracy: 0.3992 - 180s/epoch - 660ms/step
Epoch 45/100
273/273 - 180s - loss: 0.7497 - abs_loss_function: 0.2477 - accuracy: 0.3207 - val_loss: 0.7550 - val_abs_loss_function: 0.2516 - val_accuracy: 0.3226 - 180s/epoch - 659ms/step
Epoch 46/100
273/273 - 180s - loss: 0.7445 - abs_loss_function: 0.2425 - accuracy: 0.3247 - val_loss: 0.7475 - val_abs_loss_function: 0.2469 - val_accuracy: 0.3206 - 180s/epoch - 661ms/step
Epoch 47/100
273/273 - 180s - loss: 0.7437 - abs_loss_function: 0.2417 - accuracy: 0.2704 - val_loss: 0.7654 - val_abs_loss_function: 0.2620 - val_accuracy: 0.4244 - 180s/epoch - 659ms/step
Epoch 48/100
273/273 - 180s - loss: 0.7504 - abs_loss_function: 0.2484 - accuracy: 0.4027 - val_loss: 0.7447 - val_abs_loss_function: 0.2441 - val_accuracy: 0.3921 - 180s/epoch - 660ms/step
Epoch 49/100
273/273 - 180s - loss: 0.7492 - abs_loss_function: 0.2472 - accuracy: 0.3472 - val_loss: 0.7596 - val_abs_loss_function: 0.2562 - val_accuracy: 0.2681 - 180s/epoch - 660ms/step
Epoch 50/100
273/273 - 180s - loss: 0.7457 - abs_loss_function: 0.2437 - accuracy: 0.3523 - val_loss: 0.7445 - val_abs_loss_function: 0.2439 - val_accuracy: 0.3639 - 180s/epoch - 659ms/step
Epoch 51/100
273/273 - 180s - loss: 0.7438 - abs_loss_function: 0.2418 - accuracy: 0.3745 - val_loss: 0.7515 - val_abs_loss_function: 0.2481 - val_accuracy: 0.3649 - 180s/epoch - 661ms/step
Epoch 52/100
273/273 - 180s - loss: 0.7435 - abs_loss_function: 0.2414 - accuracy: 0.3618 - val_loss: 0.7678 - val_abs_loss_function: 0.2671 - val_accuracy: 0.3397 - 180s/epoch - 660ms/step
Epoch 53/100
273/273 - 180s - loss: 0.7354 - abs_loss_function: 0.2334 - accuracy: 0.3554 - val_loss: 0.7386 - val_abs_loss_function: 0.2353 - val_accuracy: 0.3911 - 180s/epoch - 661ms/step
Epoch 54/100
273/273 - 181s - loss: 0.7459 - abs_loss_function: 0.2439 - accuracy: 0.3813 - val_loss: 0.7622 - val_abs_loss_function: 0.2616 - val_accuracy: 0.2863 - 181s/epoch - 661ms/step
Epoch 55/100
273/273 - 180s - loss: 0.7383 - abs_loss_function: 0.2363 - accuracy: 0.3720 - val_loss: 0.7382 - val_abs_loss_function: 0.2347 - val_accuracy: 0.2762 - 180s/epoch - 659ms/step
Epoch 56/100
273/273 - 180s - loss: 0.7358 - abs_loss_function: 0.2338 - accuracy: 0.3836 - val_loss: 0.7281 - val_abs_loss_function: 0.2275 - val_accuracy: 0.3599 - 180s/epoch - 660ms/step
Epoch 57/100
273/273 - 180s - loss: 0.7430 - abs_loss_function: 0.2410 - accuracy: 0.3652 - val_loss: 0.7778 - val_abs_loss_function: 0.2744 - val_accuracy: 0.3498 - 180s/epoch - 661ms/step
Epoch 58/100
273/273 - 180s - loss: 0.7453 - abs_loss_function: 0.2433 - accuracy: 0.3306 - val_loss: 0.7685 - val_abs_loss_function: 0.2678 - val_accuracy: 0.2913 - 180s/epoch - 661ms/step
Epoch 59/100
273/273 - 180s - loss: 0.7391 - abs_loss_function: 0.2371 - accuracy: 0.3463 - val_loss: 0.7323 - val_abs_loss_function: 0.2288 - val_accuracy: 0.4284 - 180s/epoch - 660ms/step
Epoch 60/100
273/273 - 180s - loss: 0.7474 - abs_loss_function: 0.2454 - accuracy: 0.3419 - val_loss: 0.7385 - val_abs_loss_function: 0.2379 - val_accuracy: 0.2883 - 180s/epoch - 659ms/step
Epoch 61/100
273/273 - 180s - loss: 0.7343 - abs_loss_function: 0.2323 - accuracy: 0.3433 - val_loss: 0.7553 - val_abs_loss_function: 0.2519 - val_accuracy: 0.3679 - 180s/epoch - 661ms/step
Epoch 62/100
273/273 - 180s - loss: 0.7387 - abs_loss_function: 0.2367 - accuracy: 0.3409 - val_loss: 0.7626 - val_abs_loss_function: 0.2620 - val_accuracy: 0.3478 - 180s/epoch - 661ms/step
Epoch 63/100
273/273 - 181s - loss: 0.7382 - abs_loss_function: 0.2362 - accuracy: 0.2966 - val_loss: 0.7481 - val_abs_loss_function: 0.2447 - val_accuracy: 0.3165 - 181s/epoch - 663ms/step
Epoch 64/100
273/273 - 181s - loss: 0.7443 - abs_loss_function: 0.2423 - accuracy: 0.3480 - val_loss: 0.7432 - val_abs_loss_function: 0.2425 - val_accuracy: 0.3528 - 181s/epoch - 661ms/step
Epoch 65/100
273/273 - 180s - loss: 0.7367 - abs_loss_function: 0.2347 - accuracy: 0.3318 - val_loss: 0.7607 - val_abs_loss_function: 0.2574 - val_accuracy: 0.2611 - 180s/epoch - 659ms/step
Epoch 66/100
