Loaded dependency [python3/3.10.7]: gcc/11.3.0-binutils-2.38
Loaded module: python3/3.10.7

Loading python3/3.10.7
  Loading requirement: gcc/11.3.0-binutils-2.38
Loaded module: cuda/11.6
Loaded module: cudnn/v8.3.2.44-prod-cuda-11.X
2023-01-22 14:49:02.412334: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2023-01-22 14:49:13.286927: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer.so.7'; dlerror: libnvinfer.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /appl/cudnn/v8.3.2.44-prod-cuda-11.5/lib:/appl/cuda/11.6.0/lib64:/appl/python/3.10.7/lib:/appl/gcc/11.3.0-binutils-2.38/lib64:/appl/gcc/11.3.0-binutils-2.38/lib:/lsf/10.1/linux3.10-glibc2.17-x86_64/lib
2023-01-22 14:49:13.287859: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer_plugin.so.7'; dlerror: libnvinfer_plugin.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /appl/cudnn/v8.3.2.44-prod-cuda-11.5/lib:/appl/cuda/11.6.0/lib64:/appl/python/3.10.7/lib:/appl/gcc/11.3.0-binutils-2.38/lib64:/appl/gcc/11.3.0-binutils-2.38/lib:/lsf/10.1/linux3.10-glibc2.17-x86_64/lib
2023-01-22 14:49:13.287872: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Cannot dlopen some TensorRT libraries. If you would like to use Nvidia GPU with TensorRT, please make sure the missing libraries mentioned above are installed properly.
2023-01-22 14:49:25.835918: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2023-01-22 14:49:30.527169: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1613] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 30960 MB memory:  -> device: 0, name: Tesla V100-PCIE-32GB, pci bus id: 0000:d8:00.0, compute capability: 7.0
Epochs:  100
Optimizer:  RMSprop(learning_rate=0.001)
Loss function name:  smart_sqrt_abs_min_loss
Csv file used:  black_background_500x500.csv
Verbose:  2
Unique name:  RMSprop_smart_sqrt_abs_min_loss_0001_model_g_
Output folder:  iter6
Model name:  load_model_g
 
        ################ MODEL ############### 

        inputs = keras.Input(shape=(input_size, input_size, 1))
        x = layers.Conv2D(filters=64, kernel_size=11, activation="relu")(inputs)
        x = layers.Conv2D(filters=64, kernel_size=11, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=5, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=5, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Flatten()(x)
        x = layers.Dense(210, activation="relu")(x)
        x = layers.Dense(64, activation="relu")(x)
        x = layers.Dense(16, activation="sigmoid")(x)
        outputs = layers.Dense(3)(x)

        model = keras.Model(inputs=inputs, outputs=outputs)
    
Model: "model"
_________________________________________________________________
 Layer (type)                Output Shape              Param #   
=================================================================
 input_1 (InputLayer)        [(None, 500, 500, 1)]     0         
                                                                 
 conv2d (Conv2D)             (None, 490, 490, 64)      7808      
                                                                 
 conv2d_1 (Conv2D)           (None, 480, 480, 64)      495680    
                                                                 
 max_pooling2d (MaxPooling2D  (None, 240, 240, 64)     0         
 )                                                               
                                                                 
 conv2d_2 (Conv2D)           (None, 236, 236, 64)      102464    
                                                                 
 conv2d_3 (Conv2D)           (None, 232, 232, 64)      102464    
                                                                 
 max_pooling2d_1 (MaxPooling  (None, 116, 116, 64)     0         
 2D)                                                             
                                                                 
 conv2d_4 (Conv2D)           (None, 114, 114, 64)      36928     
                                                                 
 conv2d_5 (Conv2D)           (None, 112, 112, 64)      36928     
                                                                 
 max_pooling2d_2 (MaxPooling  (None, 56, 56, 64)       0         
 2D)                                                             
                                                                 
 conv2d_6 (Conv2D)           (None, 54, 54, 64)        36928     
                                                                 
 conv2d_7 (Conv2D)           (None, 52, 52, 64)        36928     
                                                                 
 max_pooling2d_3 (MaxPooling  (None, 26, 26, 64)       0         
 2D)                                                             
                                                                 
 conv2d_8 (Conv2D)           (None, 24, 24, 64)        36928     
                                                                 
 conv2d_9 (Conv2D)           (None, 22, 22, 64)        36928     
                                                                 
 max_pooling2d_4 (MaxPooling  (None, 11, 11, 64)       0         
 2D)                                                             
                                                                 
 conv2d_10 (Conv2D)          (None, 9, 9, 64)          36928     
                                                                 
 conv2d_11 (Conv2D)          (None, 7, 7, 64)          36928     
                                                                 
 max_pooling2d_5 (MaxPooling  (None, 3, 3, 64)         0         
 2D)                                                             
                                                                 
 flatten (Flatten)           (None, 576)               0         
                                                                 
 dense (Dense)               (None, 210)               121170    
                                                                 
 dense_1 (Dense)             (None, 64)                13504     
                                                                 
 dense_2 (Dense)             (None, 16)                1040      
                                                                 
 dense_3 (Dense)             (None, 3)                 51        
                                                                 
=================================================================
Total params: 1,139,605
Trainable params: 1,139,605
Non-trainable params: 0
_________________________________________________________________
/zhome/ab/7/153983/project/venv/lib/python3.10/site-packages/keras/utils/image_utils.py:409: UserWarning: grayscale is deprecated. Please use color_mode = "grayscale"
  warnings.warn(
Epoch 1/100
2023-01-22 14:49:35.988278: I tensorflow/compiler/xla/stream_executor/cuda/cuda_dnn.cc:428] Loaded cuDNN version 8302
273/273 - 269s - loss: 0.2578 - smart_sqrt_abs_min_loss: 0.2578 - accuracy: 0.3972 - val_loss: 0.2649 - val_smart_sqrt_abs_min_loss: 0.2649 - val_accuracy: 0.3518 - 269s/epoch - 985ms/step
Epoch 2/100
273/273 - 240s - loss: 0.2475 - smart_sqrt_abs_min_loss: 0.2475 - accuracy: 0.3100 - val_loss: 0.2552 - val_smart_sqrt_abs_min_loss: 0.2552 - val_accuracy: 0.2984 - 240s/epoch - 878ms/step
Epoch 3/100
273/273 - 239s - loss: 0.2559 - smart_sqrt_abs_min_loss: 0.2559 - accuracy: 0.3602 - val_loss: 0.2425 - val_smart_sqrt_abs_min_loss: 0.2425 - val_accuracy: 0.2177 - 239s/epoch - 877ms/step
Epoch 4/100
273/273 - 239s - loss: 0.2605 - smart_sqrt_abs_min_loss: 0.2605 - accuracy: 0.3468 - val_loss: 0.2557 - val_smart_sqrt_abs_min_loss: 0.2557 - val_accuracy: 0.3236 - 239s/epoch - 876ms/step
Epoch 5/100
273/273 - 240s - loss: 0.2979 - smart_sqrt_abs_min_loss: 0.2979 - accuracy: 0.3595 - val_loss: 0.2594 - val_smart_sqrt_abs_min_loss: 0.2594 - val_accuracy: 0.3175 - 240s/epoch - 878ms/step
Epoch 6/100
273/273 - 239s - loss: 0.2829 - smart_sqrt_abs_min_loss: 0.2829 - accuracy: 0.2949 - val_loss: 0.2387 - val_smart_sqrt_abs_min_loss: 0.2387 - val_accuracy: 0.3558 - 239s/epoch - 876ms/step
Epoch 7/100
273/273 - 239s - loss: 0.2507 - smart_sqrt_abs_min_loss: 0.2507 - accuracy: 0.3162 - val_loss: 0.2434 - val_smart_sqrt_abs_min_loss: 0.2434 - val_accuracy: 0.3700 - 239s/epoch - 875ms/step
Epoch 8/100
273/273 - 239s - loss: 0.2408 - smart_sqrt_abs_min_loss: 0.2408 - accuracy: 0.3451 - val_loss: 0.2416 - val_smart_sqrt_abs_min_loss: 0.2416 - val_accuracy: 0.3417 - 239s/epoch - 875ms/step
Epoch 9/100
273/273 - 238s - loss: 0.2579 - smart_sqrt_abs_min_loss: 0.2579 - accuracy: 0.3254 - val_loss: 0.2458 - val_smart_sqrt_abs_min_loss: 0.2458 - val_accuracy: 0.2601 - 238s/epoch - 871ms/step
Epoch 10/100
273/273 - 239s - loss: 0.2534 - smart_sqrt_abs_min_loss: 0.2534 - accuracy: 0.3324 - val_loss: 0.2512 - val_smart_sqrt_abs_min_loss: 0.2512 - val_accuracy: 0.2702 - 239s/epoch - 875ms/step
Epoch 11/100
273/273 - 239s - loss: 0.3057 - smart_sqrt_abs_min_loss: 0.3057 - accuracy: 0.2812 - val_loss: 0.2614 - val_smart_sqrt_abs_min_loss: 0.2614 - val_accuracy: 0.2440 - 239s/epoch - 875ms/step
Epoch 12/100
273/273 - 239s - loss: 0.2771 - smart_sqrt_abs_min_loss: 0.2771 - accuracy: 0.2735 - val_loss: 0.2304 - val_smart_sqrt_abs_min_loss: 0.2304 - val_accuracy: 0.2863 - 239s/epoch - 874ms/step
Epoch 13/100
273/273 - 238s - loss: 0.2712 - smart_sqrt_abs_min_loss: 0.2712 - accuracy: 0.3426 - val_loss: 0.2272 - val_smart_sqrt_abs_min_loss: 0.2272 - val_accuracy: 0.3226 - 238s/epoch - 874ms/step
Epoch 14/100
273/273 - 238s - loss: 0.2468 - smart_sqrt_abs_min_loss: 0.2468 - accuracy: 0.3402 - val_loss: 0.2707 - val_smart_sqrt_abs_min_loss: 0.2707 - val_accuracy: 0.2843 - 238s/epoch - 870ms/step
Epoch 15/100
273/273 - 238s - loss: 0.2458 - smart_sqrt_abs_min_loss: 0.2458 - accuracy: 0.3237 - val_loss: 0.2700 - val_smart_sqrt_abs_min_loss: 0.2700 - val_accuracy: 0.3014 - 238s/epoch - 873ms/step
Epoch 16/100
273/273 - 238s - loss: 0.3286 - smart_sqrt_abs_min_loss: 0.3286 - accuracy: 0.3276 - val_loss: 0.2435 - val_smart_sqrt_abs_min_loss: 0.2435 - val_accuracy: 0.3649 - 238s/epoch - 871ms/step
Epoch 17/100
273/273 - 238s - loss: 0.2865 - smart_sqrt_abs_min_loss: 0.2865 - accuracy: 0.3187 - val_loss: 0.2476 - val_smart_sqrt_abs_min_loss: 0.2476 - val_accuracy: 0.2157 - 238s/epoch - 871ms/step
Epoch 18/100
273/273 - 238s - loss: 0.2986 - smart_sqrt_abs_min_loss: 0.2986 - accuracy: 0.3067 - val_loss: 0.2464 - val_smart_sqrt_abs_min_loss: 0.2464 - val_accuracy: 0.3841 - 238s/epoch - 871ms/step
Epoch 19/100
273/273 - 238s - loss: 0.2416 - smart_sqrt_abs_min_loss: 0.2416 - accuracy: 0.3258 - val_loss: 0.2557 - val_smart_sqrt_abs_min_loss: 0.2557 - val_accuracy: 0.3397 - 238s/epoch - 871ms/step
Epoch 20/100
273/273 - 238s - loss: 0.2621 - smart_sqrt_abs_min_loss: 0.2621 - accuracy: 0.3504 - val_loss: 0.2605 - val_smart_sqrt_abs_min_loss: 0.2605 - val_accuracy: 0.3649 - 238s/epoch - 870ms/step
Epoch 21/100
273/273 - 237s - loss: 0.3021 - smart_sqrt_abs_min_loss: 0.3021 - accuracy: 0.3213 - val_loss: 0.2611 - val_smart_sqrt_abs_min_loss: 0.2611 - val_accuracy: 0.2823 - 237s/epoch - 870ms/step
Epoch 22/100
273/273 - 237s - loss: 0.2567 - smart_sqrt_abs_min_loss: 0.2567 - accuracy: 0.3396 - val_loss: 0.2307 - val_smart_sqrt_abs_min_loss: 0.2307 - val_accuracy: 0.3206 - 237s/epoch - 869ms/step
Epoch 23/100
273/273 - 238s - loss: 0.2648 - smart_sqrt_abs_min_loss: 0.2648 - accuracy: 0.3255 - val_loss: 0.2619 - val_smart_sqrt_abs_min_loss: 0.2619 - val_accuracy: 0.4133 - 238s/epoch - 870ms/step
Epoch 24/100
273/273 - 237s - loss: 0.2453 - smart_sqrt_abs_min_loss: 0.2453 - accuracy: 0.3148 - val_loss: 0.2559 - val_smart_sqrt_abs_min_loss: 0.2559 - val_accuracy: 0.2823 - 237s/epoch - 870ms/step
Epoch 25/100
273/273 - 237s - loss: 0.2317 - smart_sqrt_abs_min_loss: 0.2317 - accuracy: 0.3608 - val_loss: 0.2472 - val_smart_sqrt_abs_min_loss: 0.2472 - val_accuracy: 0.2802 - 237s/epoch - 870ms/step
Epoch 26/100
273/273 - 237s - loss: 0.2475 - smart_sqrt_abs_min_loss: 0.2475 - accuracy: 0.3383 - val_loss: 0.2491 - val_smart_sqrt_abs_min_loss: 0.2491 - val_accuracy: 0.4153 - 237s/epoch - 868ms/step
Epoch 27/100
273/273 - 238s - loss: 0.2420 - smart_sqrt_abs_min_loss: 0.2420 - accuracy: 0.3413 - val_loss: 0.2616 - val_smart_sqrt_abs_min_loss: 0.2616 - val_accuracy: 0.3226 - 238s/epoch - 870ms/step
Epoch 28/100
273/273 - 237s - loss: 0.2465 - smart_sqrt_abs_min_loss: 0.2465 - accuracy: 0.3713 - val_loss: 0.2406 - val_smart_sqrt_abs_min_loss: 0.2406 - val_accuracy: 0.4758 - 237s/epoch - 870ms/step
Epoch 29/100
273/273 - 238s - loss: 0.2529 - smart_sqrt_abs_min_loss: 0.2529 - accuracy: 0.3391 - val_loss: 0.3454 - val_smart_sqrt_abs_min_loss: 0.3454 - val_accuracy: 0.3972 - 238s/epoch - 871ms/step
Epoch 30/100
273/273 - 238s - loss: 0.2404 - smart_sqrt_abs_min_loss: 0.2404 - accuracy: 0.3470 - val_loss: 0.2456 - val_smart_sqrt_abs_min_loss: 0.2456 - val_accuracy: 0.2369 - 238s/epoch - 871ms/step
Epoch 31/100
273/273 - 238s - loss: 0.2426 - smart_sqrt_abs_min_loss: 0.2426 - accuracy: 0.3807 - val_loss: 0.2377 - val_smart_sqrt_abs_min_loss: 0.2377 - val_accuracy: 0.2742 - 238s/epoch - 870ms/step
Epoch 32/100
273/273 - 238s - loss: 0.2663 - smart_sqrt_abs_min_loss: 0.2663 - accuracy: 0.3413 - val_loss: 0.2498 - val_smart_sqrt_abs_min_loss: 0.2498 - val_accuracy: 0.3468 - 238s/epoch - 870ms/step
Epoch 33/100
273/273 - 237s - loss: 0.2597 - smart_sqrt_abs_min_loss: 0.2597 - accuracy: 0.3855 - val_loss: 0.2617 - val_smart_sqrt_abs_min_loss: 0.2617 - val_accuracy: 0.3034 - 237s/epoch - 870ms/step
Epoch 34/100
273/273 - 238s - loss: 0.2485 - smart_sqrt_abs_min_loss: 0.2485 - accuracy: 0.3676 - val_loss: 0.2908 - val_smart_sqrt_abs_min_loss: 0.2908 - val_accuracy: 0.2581 - 238s/epoch - 870ms/step
Epoch 35/100
273/273 - 238s - loss: 0.2432 - smart_sqrt_abs_min_loss: 0.2432 - accuracy: 0.3562 - val_loss: 0.2512 - val_smart_sqrt_abs_min_loss: 0.2512 - val_accuracy: 0.2278 - 238s/epoch - 870ms/step
Epoch 36/100
273/273 - 238s - loss: 0.2432 - smart_sqrt_abs_min_loss: 0.2432 - accuracy: 0.2935 - val_loss: 0.2504 - val_smart_sqrt_abs_min_loss: 0.2504 - val_accuracy: 0.3659 - 238s/epoch - 870ms/step
Epoch 37/100
273/273 - 238s - loss: 0.2514 - smart_sqrt_abs_min_loss: 0.2514 - accuracy: 0.3605 - val_loss: 0.2561 - val_smart_sqrt_abs_min_loss: 0.2561 - val_accuracy: 0.3528 - 238s/epoch - 870ms/step
Epoch 38/100
273/273 - 237s - loss: 0.2787 - smart_sqrt_abs_min_loss: 0.2787 - accuracy: 0.2722 - val_loss: 0.2567 - val_smart_sqrt_abs_min_loss: 0.2567 - val_accuracy: 0.2702 - 237s/epoch - 870ms/step
Epoch 39/100
273/273 - 238s - loss: 0.2714 - smart_sqrt_abs_min_loss: 0.2714 - accuracy: 0.3098 - val_loss: 0.2626 - val_smart_sqrt_abs_min_loss: 0.2626 - val_accuracy: 0.2601 - 238s/epoch - 871ms/step
Epoch 40/100
273/273 - 238s - loss: 0.2721 - smart_sqrt_abs_min_loss: 0.2721 - accuracy: 0.3434 - val_loss: 0.2582 - val_smart_sqrt_abs_min_loss: 0.2582 - val_accuracy: 0.3115 - 238s/epoch - 871ms/step
Epoch 41/100
273/273 - 238s - loss: 0.2624 - smart_sqrt_abs_min_loss: 0.2624 - accuracy: 0.3646 - val_loss: 0.2525 - val_smart_sqrt_abs_min_loss: 0.2525 - val_accuracy: 0.2903 - 238s/epoch - 870ms/step
Epoch 42/100
273/273 - 238s - loss: 0.2817 - smart_sqrt_abs_min_loss: 0.2817 - accuracy: 0.2800 - val_loss: 0.2665 - val_smart_sqrt_abs_min_loss: 0.2665 - val_accuracy: 0.2208 - 238s/epoch - 870ms/step
Epoch 43/100
273/273 - 238s - loss: 0.2505 - smart_sqrt_abs_min_loss: 0.2505 - accuracy: 0.3633 - val_loss: 0.2466 - val_smart_sqrt_abs_min_loss: 0.2466 - val_accuracy: 0.2379 - 238s/epoch - 871ms/step
Epoch 44/100
273/273 - 238s - loss: 0.2462 - smart_sqrt_abs_min_loss: 0.2462 - accuracy: 0.3650 - val_loss: 0.2388 - val_smart_sqrt_abs_min_loss: 0.2388 - val_accuracy: 0.4012 - 238s/epoch - 870ms/step
Epoch 45/100
273/273 - 238s - loss: 0.2440 - smart_sqrt_abs_min_loss: 0.2440 - accuracy: 0.3701 - val_loss: 0.2198 - val_smart_sqrt_abs_min_loss: 0.2198 - val_accuracy: 0.3821 - 238s/epoch - 870ms/step
Epoch 46/100
273/273 - 237s - loss: 0.2457 - smart_sqrt_abs_min_loss: 0.2457 - accuracy: 0.3286 - val_loss: 0.2545 - val_smart_sqrt_abs_min_loss: 0.2545 - val_accuracy: 0.2046 - 237s/epoch - 868ms/step
Epoch 47/100
273/273 - 237s - loss: 0.2376 - smart_sqrt_abs_min_loss: 0.2376 - accuracy: 0.3470 - val_loss: 0.2503 - val_smart_sqrt_abs_min_loss: 0.2503 - val_accuracy: 0.3579 - 237s/epoch - 869ms/step
Epoch 48/100
273/273 - 237s - loss: 0.2726 - smart_sqrt_abs_min_loss: 0.2726 - accuracy: 0.3052 - val_loss: 0.6390 - val_smart_sqrt_abs_min_loss: 0.6390 - val_accuracy: 0.4446 - 237s/epoch - 868ms/step
Epoch 49/100
273/273 - 237s - loss: 0.2520 - smart_sqrt_abs_min_loss: 0.2520 - accuracy: 0.3486 - val_loss: 0.2600 - val_smart_sqrt_abs_min_loss: 0.2600 - val_accuracy: 0.4345 - 237s/epoch - 868ms/step
Epoch 50/100
273/273 - 237s - loss: 0.2524 - smart_sqrt_abs_min_loss: 0.2524 - accuracy: 0.3237 - val_loss: 0.2541 - val_smart_sqrt_abs_min_loss: 0.2541 - val_accuracy: 0.3216 - 237s/epoch - 869ms/step
Epoch 51/100
273/273 - 237s - loss: 0.2510 - smart_sqrt_abs_min_loss: 0.2510 - accuracy: 0.3377 - val_loss: 0.2560 - val_smart_sqrt_abs_min_loss: 0.2560 - val_accuracy: 0.3317 - 237s/epoch - 870ms/step
Epoch 52/100
273/273 - 237s - loss: 0.2692 - smart_sqrt_abs_min_loss: 0.2692 - accuracy: 0.2896 - val_loss: 0.2439 - val_smart_sqrt_abs_min_loss: 0.2439 - val_accuracy: 0.4224 - 237s/epoch - 869ms/step
Epoch 53/100
273/273 - 237s - loss: 0.2443 - smart_sqrt_abs_min_loss: 0.2443 - accuracy: 0.3743 - val_loss: 0.2402 - val_smart_sqrt_abs_min_loss: 0.2402 - val_accuracy: 0.4214 - 237s/epoch - 869ms/step
Epoch 54/100
273/273 - 237s - loss: 0.2486 - smart_sqrt_abs_min_loss: 0.2486 - accuracy: 0.3553 - val_loss: 0.2609 - val_smart_sqrt_abs_min_loss: 0.2609 - val_accuracy: 0.2964 - 237s/epoch - 869ms/step
Epoch 55/100
273/273 - 238s - loss: 0.2940 - smart_sqrt_abs_min_loss: 0.2940 - accuracy: 0.3249 - val_loss: 0.2713 - val_smart_sqrt_abs_min_loss: 0.2713 - val_accuracy: 0.2833 - 238s/epoch - 870ms/step
Epoch 56/100
273/273 - 238s - loss: 0.2892 - smart_sqrt_abs_min_loss: 0.2892 - accuracy: 0.3191 - val_loss: 0.2492 - val_smart_sqrt_abs_min_loss: 0.2492 - val_accuracy: 0.2681 - 238s/epoch - 870ms/step
Epoch 57/100
273/273 - 238s - loss: 0.2470 - smart_sqrt_abs_min_loss: 0.2470 - accuracy: 0.3926 - val_loss: 0.2461 - val_smart_sqrt_abs_min_loss: 0.2461 - val_accuracy: 0.3075 - 238s/epoch - 871ms/step
Epoch 58/100
273/273 - 237s - loss: 0.2501 - smart_sqrt_abs_min_loss: 0.2501 - accuracy: 0.3156 - val_loss: 0.2593 - val_smart_sqrt_abs_min_loss: 0.2593 - val_accuracy: 0.3196 - 237s/epoch - 869ms/step
Epoch 59/100
273/273 - 237s - loss: 0.2593 - smart_sqrt_abs_min_loss: 0.2593 - accuracy: 0.3284 - val_loss: 0.2537 - val_smart_sqrt_abs_min_loss: 0.2537 - val_accuracy: 0.2923 - 237s/epoch - 870ms/step
Epoch 60/100
273/273 - 237s - loss: 0.2507 - smart_sqrt_abs_min_loss: 0.2507 - accuracy: 0.3370 - val_loss: 0.2417 - val_smart_sqrt_abs_min_loss: 0.2417 - val_accuracy: 0.3669 - 237s/epoch - 869ms/step
Epoch 61/100
273/273 - 237s - loss: 0.2889 - smart_sqrt_abs_min_loss: 0.2889 - accuracy: 0.3320 - val_loss: 0.2449 - val_smart_sqrt_abs_min_loss: 0.2449 - val_accuracy: 0.3387 - 237s/epoch - 870ms/step
Epoch 62/100
273/273 - 237s - loss: 0.2581 - smart_sqrt_abs_min_loss: 0.2581 - accuracy: 0.3276 - val_loss: 0.2404 - val_smart_sqrt_abs_min_loss: 0.2404 - val_accuracy: 0.3367 - 237s/epoch - 869ms/step
Epoch 63/100
273/273 - 237s - loss: 0.2562 - smart_sqrt_abs_min_loss: 0.2562 - accuracy: 0.3608 - val_loss: 0.3320 - val_smart_sqrt_abs_min_loss: 0.3320 - val_accuracy: 0.3397 - 237s/epoch - 869ms/step
Epoch 64/100
273/273 - 237s - loss: 0.2502 - smart_sqrt_abs_min_loss: 0.2502 - accuracy: 0.3396 - val_loss: 0.2648 - val_smart_sqrt_abs_min_loss: 0.2648 - val_accuracy: 0.3286 - 237s/epoch - 869ms/step
Epoch 65/100
273/273 - 237s - loss: 0.2532 - smart_sqrt_abs_min_loss: 0.2532 - accuracy: 0.3276 - val_loss: 0.2425 - val_smart_sqrt_abs_min_loss: 0.2425 - val_accuracy: 0.4758 - 237s/epoch - 870ms/step
Epoch 66/100
273/273 - 238s - loss: 0.2734 - smart_sqrt_abs_min_loss: 0.2734 - accuracy: 0.3784 - val_loss: 0.2529 - val_smart_sqrt_abs_min_loss: 0.2529 - val_accuracy: 0.2611 - 238s/epoch - 870ms/step
Epoch 67/100
273/273 - 237s - loss: 0.2476 - smart_sqrt_abs_min_loss: 0.2476 - accuracy: 0.3797 - val_loss: 0.6900 - val_smart_sqrt_abs_min_loss: 0.6900 - val_accuracy: 0.3054 - 237s/epoch - 869ms/step
Epoch 68/100
273/273 - 238s - loss: 0.2434 - smart_sqrt_abs_min_loss: 0.2434 - accuracy: 0.3379 - val_loss: 0.2555 - val_smart_sqrt_abs_min_loss: 0.2555 - val_accuracy: 0.2823 - 238s/epoch - 870ms/step
Epoch 69/100
273/273 - 237s - loss: 0.2709 - smart_sqrt_abs_min_loss: 0.2709 - accuracy: 0.3544 - val_loss: 0.6494 - val_smart_sqrt_abs_min_loss: 0.6494 - val_accuracy: 0.3730 - 237s/epoch - 870ms/step
Epoch 70/100
273/273 - 238s - loss: 0.2498 - smart_sqrt_abs_min_loss: 0.2498 - accuracy: 0.3394 - val_loss: 0.2583 - val_smart_sqrt_abs_min_loss: 0.2583 - val_accuracy: 0.2450 - 238s/epoch - 871ms/step
Epoch 71/100
273/273 - 237s - loss: 0.2430 - smart_sqrt_abs_min_loss: 0.2430 - accuracy: 0.3707 - val_loss: 0.2436 - val_smart_sqrt_abs_min_loss: 0.2436 - val_accuracy: 0.3669 - 237s/epoch - 870ms/step
Epoch 72/100
273/273 - 238s - loss: 0.2448 - smart_sqrt_abs_min_loss: 0.2448 - accuracy: 0.3658 - val_loss: 0.2428 - val_smart_sqrt_abs_min_loss: 0.2428 - val_accuracy: 0.2984 - 238s/epoch - 870ms/step
Epoch 73/100
273/273 - 238s - loss: 0.2397 - smart_sqrt_abs_min_loss: 0.2397 - accuracy: 0.3625 - val_loss: 0.2624 - val_smart_sqrt_abs_min_loss: 0.2624 - val_accuracy: 0.4194 - 238s/epoch - 870ms/step
Epoch 74/100
273/273 - 237s - loss: 0.2400 - smart_sqrt_abs_min_loss: 0.2400 - accuracy: 0.3744 - val_loss: 0.2422 - val_smart_sqrt_abs_min_loss: 0.2422 - val_accuracy: 0.3286 - 237s/epoch - 869ms/step
Epoch 75/100
273/273 - 237s - loss: 0.2325 - smart_sqrt_abs_min_loss: 0.2325 - accuracy: 0.4006 - val_loss: 0.2745 - val_smart_sqrt_abs_min_loss: 0.2745 - val_accuracy: 0.3024 - 237s/epoch - 870ms/step
Epoch 76/100
User defined signal 2

------------------------------------------------------------
Sender: LSF System <lsfadmin@hpc.dtu.dk>
Subject: Job 15232327: <s202741-train> in cluster <dcc> Exited

Job <s202741-train> was submitted from host <n-62-20-1> by user <s202741> in cluster <dcc> at Sun Jan 22 12:32:28 2023
Job was executed on host(s) <4*n-62-20-16>, in queue <gpuv100>, as user <s202741> in cluster <dcc> at Sun Jan 22 14:48:53 2023
</zhome/ab/7/153983> was used as the home directory.
</zhome/ab/7/153983/project/scripts> was used as the working directory.
Started at Sun Jan 22 14:48:53 2023
Terminated at Sun Jan 22 19:49:06 2023
Results reported at Sun Jan 22 19:49:06 2023

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#!/bin/bash
### General options
### -- specify queue --   NOTE: TitanX is significantly faster than K80
#BSUB -q gpuv100
#BSUB -gpu "num=1:mode=exclusive_process"
### -- set the job Name --
#BSUB -J s202741-train
### -- ask for number of cores (default: 1) --
#BSUB -n 4
#BSUB -R "span[hosts=1]"
### -- set walltime limit: hh:mm --  maximum 24 hours for GPU-queues right now
#BSUB -W 5:00
# request 5GB of memory
#BSUB -R "rusage[mem=5GB]"
### -- Specify the output and error file. %J is the job-id --
### -- -o and -e mean append, -oo and -eo mean overwrite --
#BSUB -o iter6/Logs/RMSprop_smart_sqrt_abs_min_loss_0001_model_g_%J.out
# -- end of LSF options --

# Necessary modules
cd ..
source venv/bin/activate

python trainModelIter3.py 100 "RMSprop(learning_rate=0.001)" "smart_sqrt_abs_min_loss" "black_background_500x500.csv" 2 "RMSprop_smart_sqrt_abs_min_loss_0001_model_g_" "iter6" "load_model_g"

    
------------------------------------------------------------

TERM_RUNLIMIT: job killed after reaching LSF run time limit.
Exited with exit code 140.

Resource usage summary:

    CPU time :                                   20073.00 sec.
    Max Memory :                                 3156 MB
    Average Memory :                             3036.48 MB
    Total Requested Memory :                     20480.00 MB
    Delta Memory :                               17324.00 MB
    Max Swap :                                   -
    Max Processes :                              4
    Max Threads :                                33
    Run time :                                   18013 sec.
    Turnaround time :                            26198 sec.

The output (if any) is above this job summary.

