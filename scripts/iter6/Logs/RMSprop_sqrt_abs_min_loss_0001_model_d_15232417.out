Loaded dependency [python3/3.10.7]: gcc/11.3.0-binutils-2.38
Loaded module: python3/3.10.7

Loading python3/3.10.7
  Loading requirement: gcc/11.3.0-binutils-2.38
Loaded module: cuda/11.6
Loaded module: cudnn/v8.3.2.44-prod-cuda-11.X
2023-01-25 08:25:31.985185: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F AVX512_VNNI FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2023-01-25 08:25:32.297026: I tensorflow/core/util/port.cc:104] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2023-01-25 08:25:34.402960: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer.so.7'; dlerror: libnvinfer.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /appl/cudnn/v8.3.2.44-prod-cuda-11.5/lib:/appl/cuda/11.6.0/lib64:/appl/python/3.10.7/lib:/appl/gcc/11.3.0-binutils-2.38/lib64:/appl/gcc/11.3.0-binutils-2.38/lib:/lsf/10.1/linux3.10-glibc2.17-x86_64/lib
2023-01-25 08:25:34.403572: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer_plugin.so.7'; dlerror: libnvinfer_plugin.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /appl/cudnn/v8.3.2.44-prod-cuda-11.5/lib:/appl/cuda/11.6.0/lib64:/appl/python/3.10.7/lib:/appl/gcc/11.3.0-binutils-2.38/lib64:/appl/gcc/11.3.0-binutils-2.38/lib:/lsf/10.1/linux3.10-glibc2.17-x86_64/lib
2023-01-25 08:25:34.403582: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Cannot dlopen some TensorRT libraries. If you would like to use Nvidia GPU with TensorRT, please make sure the missing libraries mentioned above are installed properly.
2023-01-25 08:25:38.735795: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F AVX512_VNNI FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2023-01-25 08:25:39.930874: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1613] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 30960 MB memory:  -> device: 0, name: Tesla V100-PCIE-32GB, pci bus id: 0000:d8:00.0, compute capability: 7.0
Epochs:  100
Optimizer:  RMSprop(learning_rate=0.001)
Loss function name:  sqrt_abs_min_loss
Csv file used:  black_background_500x500.csv
Verbose:  2
Unique name:  RMSprop_sqrt_abs_min_loss_0001_model_d_
Output folder:  iter6
Model name:  load_model_d
 
        ################ MODEL ############### 
 
        inputs = keras.Input(shape=(input_size, input_size, 1))
        x = layers.Conv2D(filters=16, kernel_size=11, activation="relu")(inputs)
        x = layers.Conv2D(filters=16, kernel_size=7, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=16, kernel_size=5, activation="relu")(x)
        x = layers.Conv2D(filters=16, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=16, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=16, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=16, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=16, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=16, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=16, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Flatten()(x)
        x = layers.Dense(128, activation="relu", kernel_regularizer=keras.regularizers.l2(0.01))(x)
        x = layers.Dense(16, activation="sigmoid", kernel_regularizer=keras.regularizers.l2(0.01))(x) 
        outputs = layers.Dense(3)(x)

        model = keras.Model(inputs=inputs, outputs=outputs)
    
Model: "model"
_________________________________________________________________
 Layer (type)                Output Shape              Param #   
=================================================================
 input_1 (InputLayer)        [(None, 500, 500, 1)]     0         
                                                                 
 conv2d (Conv2D)             (None, 490, 490, 16)      1952      
                                                                 
 conv2d_1 (Conv2D)           (None, 484, 484, 16)      12560     
                                                                 
 max_pooling2d (MaxPooling2D  (None, 242, 242, 16)     0         
 )                                                               
                                                                 
 conv2d_2 (Conv2D)           (None, 238, 238, 16)      6416      
                                                                 
 conv2d_3 (Conv2D)           (None, 236, 236, 16)      2320      
                                                                 
 max_pooling2d_1 (MaxPooling  (None, 118, 118, 16)     0         
 2D)                                                             
                                                                 
 conv2d_4 (Conv2D)           (None, 116, 116, 16)      2320      
                                                                 
 conv2d_5 (Conv2D)           (None, 114, 114, 16)      2320      
                                                                 
 max_pooling2d_2 (MaxPooling  (None, 57, 57, 16)       0         
 2D)                                                             
                                                                 
 conv2d_6 (Conv2D)           (None, 55, 55, 16)        2320      
                                                                 
 conv2d_7 (Conv2D)           (None, 53, 53, 16)        2320      
                                                                 
 max_pooling2d_3 (MaxPooling  (None, 26, 26, 16)       0         
 2D)                                                             
                                                                 
 conv2d_8 (Conv2D)           (None, 24, 24, 16)        2320      
                                                                 
 conv2d_9 (Conv2D)           (None, 22, 22, 16)        2320      
                                                                 
 max_pooling2d_4 (MaxPooling  (None, 11, 11, 16)       0         
 2D)                                                             
                                                                 
 flatten (Flatten)           (None, 1936)              0         
                                                                 
 dense (Dense)               (None, 128)               247936    
                                                                 
 dense_1 (Dense)             (None, 16)                2064      
                                                                 
 dense_2 (Dense)             (None, 3)                 51        
                                                                 
=================================================================
Total params: 287,219
Trainable params: 287,219
Non-trainable params: 0
_________________________________________________________________
/zhome/ab/7/153983/project/venv/lib/python3.10/site-packages/keras/utils/image_utils.py:409: UserWarning: grayscale is deprecated. Please use color_mode = "grayscale"
  warnings.warn(
Epoch 1/100
2023-01-25 08:25:43.796512: I tensorflow/compiler/xla/stream_executor/cuda/cuda_dnn.cc:428] Loaded cuDNN version 8302
273/273 - 67s - loss: 0.6015 - sqrt_abs_min_loss: 0.4611 - accuracy: 0.2849 - val_loss: 0.4925 - val_sqrt_abs_min_loss: 0.4919 - val_accuracy: 0.3558 - 67s/epoch - 246ms/step
Epoch 2/100
273/273 - 63s - loss: 0.4610 - sqrt_abs_min_loss: 0.4604 - accuracy: 0.3152 - val_loss: 0.4588 - val_sqrt_abs_min_loss: 0.4582 - val_accuracy: 0.3569 - 63s/epoch - 230ms/step
Epoch 3/100
273/273 - 63s - loss: 0.4679 - sqrt_abs_min_loss: 0.4673 - accuracy: 0.3605 - val_loss: 0.4691 - val_sqrt_abs_min_loss: 0.4685 - val_accuracy: 0.3125 - 63s/epoch - 230ms/step
Epoch 4/100
273/273 - 62s - loss: 0.4477 - sqrt_abs_min_loss: 0.4470 - accuracy: 0.2972 - val_loss: 0.4646 - val_sqrt_abs_min_loss: 0.4640 - val_accuracy: 0.4748 - 62s/epoch - 228ms/step
Epoch 5/100
273/273 - 61s - loss: 0.4728 - sqrt_abs_min_loss: 0.4722 - accuracy: 0.3581 - val_loss: 0.4940 - val_sqrt_abs_min_loss: 0.4933 - val_accuracy: 0.4940 - 61s/epoch - 223ms/step
Epoch 6/100
273/273 - 62s - loss: 0.4643 - sqrt_abs_min_loss: 0.4636 - accuracy: 0.3539 - val_loss: 0.4822 - val_sqrt_abs_min_loss: 0.4816 - val_accuracy: 0.3548 - 62s/epoch - 227ms/step
Epoch 7/100
273/273 - 62s - loss: 0.4651 - sqrt_abs_min_loss: 0.4642 - accuracy: 0.3955 - val_loss: 0.4586 - val_sqrt_abs_min_loss: 0.4578 - val_accuracy: 0.3508 - 62s/epoch - 228ms/step
Epoch 8/100
273/273 - 62s - loss: 0.4641 - sqrt_abs_min_loss: 0.4634 - accuracy: 0.2967 - val_loss: 0.4882 - val_sqrt_abs_min_loss: 0.4875 - val_accuracy: 0.3327 - 62s/epoch - 227ms/step
Epoch 9/100
273/273 - 63s - loss: 0.4701 - sqrt_abs_min_loss: 0.4694 - accuracy: 0.3633 - val_loss: 0.4615 - val_sqrt_abs_min_loss: 0.4609 - val_accuracy: 0.2853 - 63s/epoch - 232ms/step
Epoch 10/100
273/273 - 60s - loss: 0.4653 - sqrt_abs_min_loss: 0.4646 - accuracy: 0.3326 - val_loss: 0.4734 - val_sqrt_abs_min_loss: 0.4727 - val_accuracy: 0.2692 - 60s/epoch - 220ms/step
Epoch 11/100
273/273 - 61s - loss: 0.4701 - sqrt_abs_min_loss: 0.4694 - accuracy: 0.3227 - val_loss: 0.4721 - val_sqrt_abs_min_loss: 0.4714 - val_accuracy: 0.3135 - 61s/epoch - 223ms/step
Epoch 12/100
273/273 - 61s - loss: 0.4737 - sqrt_abs_min_loss: 0.4731 - accuracy: 0.2785 - val_loss: 0.4755 - val_sqrt_abs_min_loss: 0.4749 - val_accuracy: 0.2591 - 61s/epoch - 222ms/step
Epoch 13/100
273/273 - 60s - loss: 0.4553 - sqrt_abs_min_loss: 0.4546 - accuracy: 0.3489 - val_loss: 0.4723 - val_sqrt_abs_min_loss: 0.4717 - val_accuracy: 0.3911 - 60s/epoch - 221ms/step
Epoch 14/100
273/273 - 63s - loss: 0.4677 - sqrt_abs_min_loss: 0.4670 - accuracy: 0.3006 - val_loss: 0.4798 - val_sqrt_abs_min_loss: 0.4791 - val_accuracy: 0.1986 - 63s/epoch - 229ms/step
Epoch 15/100
273/273 - 63s - loss: 0.4632 - sqrt_abs_min_loss: 0.4625 - accuracy: 0.2997 - val_loss: 0.4823 - val_sqrt_abs_min_loss: 0.4817 - val_accuracy: 0.3276 - 63s/epoch - 231ms/step
Epoch 16/100
273/273 - 63s - loss: 0.4638 - sqrt_abs_min_loss: 0.4631 - accuracy: 0.3403 - val_loss: 0.4763 - val_sqrt_abs_min_loss: 0.4756 - val_accuracy: 0.3468 - 63s/epoch - 231ms/step
Epoch 17/100
273/273 - 62s - loss: 0.4638 - sqrt_abs_min_loss: 0.4631 - accuracy: 0.3356 - val_loss: 0.4680 - val_sqrt_abs_min_loss: 0.4673 - val_accuracy: 0.3165 - 62s/epoch - 228ms/step
Epoch 18/100
273/273 - 63s - loss: 0.4698 - sqrt_abs_min_loss: 0.4691 - accuracy: 0.3320 - val_loss: 0.4845 - val_sqrt_abs_min_loss: 0.4838 - val_accuracy: 0.2389 - 63s/epoch - 230ms/step
Epoch 19/100
273/273 - 62s - loss: 0.4620 - sqrt_abs_min_loss: 0.4613 - accuracy: 0.3592 - val_loss: 0.4773 - val_sqrt_abs_min_loss: 0.4765 - val_accuracy: 0.3427 - 62s/epoch - 229ms/step
Epoch 20/100
273/273 - 62s - loss: 0.4612 - sqrt_abs_min_loss: 0.4605 - accuracy: 0.3339 - val_loss: 0.4766 - val_sqrt_abs_min_loss: 0.4760 - val_accuracy: 0.3276 - 62s/epoch - 227ms/step
Epoch 21/100
273/273 - 62s - loss: 0.4709 - sqrt_abs_min_loss: 0.4701 - accuracy: 0.3125 - val_loss: 0.4771 - val_sqrt_abs_min_loss: 0.4763 - val_accuracy: 0.3569 - 62s/epoch - 226ms/step
Epoch 22/100
273/273 - 62s - loss: 0.4664 - sqrt_abs_min_loss: 0.4655 - accuracy: 0.3508 - val_loss: 0.4628 - val_sqrt_abs_min_loss: 0.4618 - val_accuracy: 0.3377 - 62s/epoch - 226ms/step
Epoch 23/100
273/273 - 60s - loss: 0.4654 - sqrt_abs_min_loss: 0.4647 - accuracy: 0.2924 - val_loss: 0.4901 - val_sqrt_abs_min_loss: 0.4895 - val_accuracy: 0.3700 - 60s/epoch - 218ms/step
Epoch 24/100
273/273 - 60s - loss: 0.4735 - sqrt_abs_min_loss: 0.4727 - accuracy: 0.2800 - val_loss: 0.4805 - val_sqrt_abs_min_loss: 0.4799 - val_accuracy: 0.3589 - 60s/epoch - 222ms/step
Epoch 25/100
273/273 - 61s - loss: 0.4639 - sqrt_abs_min_loss: 0.4631 - accuracy: 0.3115 - val_loss: 0.4732 - val_sqrt_abs_min_loss: 0.4725 - val_accuracy: 0.3246 - 61s/epoch - 225ms/step
Epoch 26/100
273/273 - 60s - loss: 0.4697 - sqrt_abs_min_loss: 0.4683 - accuracy: 0.3513 - val_loss: 0.4638 - val_sqrt_abs_min_loss: 0.4625 - val_accuracy: 0.2298 - 60s/epoch - 218ms/step
Epoch 27/100
273/273 - 61s - loss: 0.4709 - sqrt_abs_min_loss: 0.4701 - accuracy: 0.2910 - val_loss: 0.4619 - val_sqrt_abs_min_loss: 0.4612 - val_accuracy: 0.3367 - 61s/epoch - 225ms/step
Epoch 28/100
273/273 - 63s - loss: 0.4723 - sqrt_abs_min_loss: 0.4716 - accuracy: 0.3109 - val_loss: 0.4745 - val_sqrt_abs_min_loss: 0.4738 - val_accuracy: 0.3286 - 63s/epoch - 229ms/step
Epoch 29/100
273/273 - 61s - loss: 0.4621 - sqrt_abs_min_loss: 0.4613 - accuracy: 0.2871 - val_loss: 0.5108 - val_sqrt_abs_min_loss: 0.5102 - val_accuracy: 0.3569 - 61s/epoch - 224ms/step
Epoch 30/100
273/273 - 61s - loss: 0.4577 - sqrt_abs_min_loss: 0.4570 - accuracy: 0.3640 - val_loss: 0.5017 - val_sqrt_abs_min_loss: 0.5010 - val_accuracy: 0.3196 - 61s/epoch - 224ms/step
Epoch 31/100
273/273 - 61s - loss: 0.4635 - sqrt_abs_min_loss: 0.4627 - accuracy: 0.3203 - val_loss: 0.4516 - val_sqrt_abs_min_loss: 0.4509 - val_accuracy: 0.3700 - 61s/epoch - 225ms/step
Epoch 32/100
273/273 - 61s - loss: 0.4648 - sqrt_abs_min_loss: 0.4640 - accuracy: 0.3391 - val_loss: 0.4704 - val_sqrt_abs_min_loss: 0.4698 - val_accuracy: 0.2208 - 61s/epoch - 224ms/step
Epoch 33/100
273/273 - 62s - loss: 0.4705 - sqrt_abs_min_loss: 0.4697 - accuracy: 0.3586 - val_loss: 0.4625 - val_sqrt_abs_min_loss: 0.4615 - val_accuracy: 0.5192 - 62s/epoch - 226ms/step
Epoch 34/100
273/273 - 62s - loss: 0.4643 - sqrt_abs_min_loss: 0.4635 - accuracy: 0.2856 - val_loss: 0.4683 - val_sqrt_abs_min_loss: 0.4676 - val_accuracy: 0.3387 - 62s/epoch - 229ms/step
Epoch 35/100
273/273 - 62s - loss: 0.4656 - sqrt_abs_min_loss: 0.4649 - accuracy: 0.3284 - val_loss: 0.4706 - val_sqrt_abs_min_loss: 0.4700 - val_accuracy: 0.3599 - 62s/epoch - 228ms/step
Epoch 36/100
273/273 - 63s - loss: 0.4592 - sqrt_abs_min_loss: 0.4585 - accuracy: 0.2982 - val_loss: 0.5020 - val_sqrt_abs_min_loss: 0.5013 - val_accuracy: 0.3246 - 63s/epoch - 230ms/step
Epoch 37/100
273/273 - 61s - loss: 0.4656 - sqrt_abs_min_loss: 0.4648 - accuracy: 0.3321 - val_loss: 0.4299 - val_sqrt_abs_min_loss: 0.4292 - val_accuracy: 0.4677 - 61s/epoch - 224ms/step
Epoch 38/100
273/273 - 60s - loss: 0.4673 - sqrt_abs_min_loss: 0.4666 - accuracy: 0.3152 - val_loss: 0.4582 - val_sqrt_abs_min_loss: 0.4575 - val_accuracy: 0.4194 - 60s/epoch - 218ms/step
Epoch 39/100
273/273 - 61s - loss: 0.4715 - sqrt_abs_min_loss: 0.4708 - accuracy: 0.3110 - val_loss: 0.5016 - val_sqrt_abs_min_loss: 0.5008 - val_accuracy: 0.3206 - 61s/epoch - 222ms/step
Epoch 40/100
273/273 - 62s - loss: 0.4645 - sqrt_abs_min_loss: 0.4637 - accuracy: 0.2606 - val_loss: 0.4763 - val_sqrt_abs_min_loss: 0.4756 - val_accuracy: 0.4204 - 62s/epoch - 226ms/step
Epoch 41/100
273/273 - 61s - loss: 0.4671 - sqrt_abs_min_loss: 0.4664 - accuracy: 0.3164 - val_loss: 0.4896 - val_sqrt_abs_min_loss: 0.4890 - val_accuracy: 0.4698 - 61s/epoch - 223ms/step
Epoch 42/100
273/273 - 62s - loss: 0.4752 - sqrt_abs_min_loss: 0.4746 - accuracy: 0.3003 - val_loss: 0.4623 - val_sqrt_abs_min_loss: 0.4616 - val_accuracy: 0.3438 - 62s/epoch - 228ms/step
Epoch 43/100
273/273 - 62s - loss: 0.4627 - sqrt_abs_min_loss: 0.4620 - accuracy: 0.3518 - val_loss: 0.4667 - val_sqrt_abs_min_loss: 0.4661 - val_accuracy: 0.3690 - 62s/epoch - 227ms/step
Epoch 44/100
273/273 - 62s - loss: 0.4711 - sqrt_abs_min_loss: 0.4704 - accuracy: 0.3375 - val_loss: 0.4568 - val_sqrt_abs_min_loss: 0.4562 - val_accuracy: 0.3982 - 62s/epoch - 228ms/step
Epoch 45/100
273/273 - 61s - loss: 0.4621 - sqrt_abs_min_loss: 0.4614 - accuracy: 0.3197 - val_loss: 0.4961 - val_sqrt_abs_min_loss: 0.4954 - val_accuracy: 0.2631 - 61s/epoch - 224ms/step
Epoch 46/100
273/273 - 62s - loss: 0.4607 - sqrt_abs_min_loss: 0.4600 - accuracy: 0.3468 - val_loss: 0.4604 - val_sqrt_abs_min_loss: 0.4597 - val_accuracy: 0.2732 - 62s/epoch - 228ms/step
Epoch 47/100
273/273 - 62s - loss: 0.4623 - sqrt_abs_min_loss: 0.4617 - accuracy: 0.3646 - val_loss: 0.4750 - val_sqrt_abs_min_loss: 0.4744 - val_accuracy: 0.3558 - 62s/epoch - 228ms/step
Epoch 48/100
273/273 - 61s - loss: 0.4577 - sqrt_abs_min_loss: 0.4571 - accuracy: 0.3254 - val_loss: 0.4857 - val_sqrt_abs_min_loss: 0.4850 - val_accuracy: 0.3730 - 61s/epoch - 223ms/step
Epoch 49/100
273/273 - 59s - loss: 0.4749 - sqrt_abs_min_loss: 0.4742 - accuracy: 0.3376 - val_loss: 0.4872 - val_sqrt_abs_min_loss: 0.4866 - val_accuracy: 0.3327 - 59s/epoch - 218ms/step
Epoch 50/100
273/273 - 59s - loss: 0.4667 - sqrt_abs_min_loss: 0.4661 - accuracy: 0.3261 - val_loss: 0.4610 - val_sqrt_abs_min_loss: 0.4604 - val_accuracy: 0.3216 - 59s/epoch - 217ms/step
Epoch 51/100
273/273 - 61s - loss: 0.4682 - sqrt_abs_min_loss: 0.4675 - accuracy: 0.3194 - val_loss: 0.4739 - val_sqrt_abs_min_loss: 0.4733 - val_accuracy: 0.3528 - 61s/epoch - 223ms/step
Epoch 52/100
273/273 - 59s - loss: 0.4662 - sqrt_abs_min_loss: 0.4655 - accuracy: 0.3687 - val_loss: 0.4693 - val_sqrt_abs_min_loss: 0.4687 - val_accuracy: 0.3901 - 59s/epoch - 218ms/step
Epoch 53/100
273/273 - 60s - loss: 0.4592 - sqrt_abs_min_loss: 0.4586 - accuracy: 0.3499 - val_loss: 0.4687 - val_sqrt_abs_min_loss: 0.4681 - val_accuracy: 0.3538 - 60s/epoch - 220ms/step
Epoch 54/100
273/273 - 62s - loss: 0.4608 - sqrt_abs_min_loss: 0.4601 - accuracy: 0.3464 - val_loss: 0.4629 - val_sqrt_abs_min_loss: 0.4622 - val_accuracy: 0.2823 - 62s/epoch - 227ms/step
Epoch 55/100
273/273 - 62s - loss: 0.4666 - sqrt_abs_min_loss: 0.4660 - accuracy: 0.3634 - val_loss: 0.4763 - val_sqrt_abs_min_loss: 0.4757 - val_accuracy: 0.3881 - 62s/epoch - 227ms/step
Epoch 56/100
273/273 - 63s - loss: 0.4641 - sqrt_abs_min_loss: 0.4634 - accuracy: 0.3686 - val_loss: 0.4779 - val_sqrt_abs_min_loss: 0.4773 - val_accuracy: 0.3901 - 63s/epoch - 229ms/step
Epoch 57/100
273/273 - 60s - loss: 0.4647 - sqrt_abs_min_loss: 0.4640 - accuracy: 0.3226 - val_loss: 0.4850 - val_sqrt_abs_min_loss: 0.4843 - val_accuracy: 0.3760 - 60s/epoch - 219ms/step
Epoch 58/100
273/273 - 61s - loss: 0.4596 - sqrt_abs_min_loss: 0.4590 - accuracy: 0.3498 - val_loss: 0.4790 - val_sqrt_abs_min_loss: 0.4784 - val_accuracy: 0.3700 - 61s/epoch - 223ms/step
Epoch 59/100
273/273 - 60s - loss: 0.4633 - sqrt_abs_min_loss: 0.4627 - accuracy: 0.3474 - val_loss: 0.4663 - val_sqrt_abs_min_loss: 0.4657 - val_accuracy: 0.3569 - 60s/epoch - 220ms/step
Epoch 60/100
273/273 - 62s - loss: 0.4606 - sqrt_abs_min_loss: 0.4600 - accuracy: 0.3357 - val_loss: 0.4803 - val_sqrt_abs_min_loss: 0.4797 - val_accuracy: 0.3407 - 62s/epoch - 228ms/step
Epoch 61/100
273/273 - 62s - loss: 0.4711 - sqrt_abs_min_loss: 0.4704 - accuracy: 0.3495 - val_loss: 0.4792 - val_sqrt_abs_min_loss: 0.4785 - val_accuracy: 0.3115 - 62s/epoch - 226ms/step
Epoch 62/100
273/273 - 61s - loss: 0.4626 - sqrt_abs_min_loss: 0.4620 - accuracy: 0.3471 - val_loss: 0.4531 - val_sqrt_abs_min_loss: 0.4524 - val_accuracy: 0.4163 - 61s/epoch - 223ms/step
Epoch 63/100
273/273 - 59s - loss: 0.4672 - sqrt_abs_min_loss: 0.4665 - accuracy: 0.3247 - val_loss: 0.4788 - val_sqrt_abs_min_loss: 0.4782 - val_accuracy: 0.3095 - 59s/epoch - 217ms/step
Epoch 64/100
273/273 - 61s - loss: 0.4650 - sqrt_abs_min_loss: 0.4643 - accuracy: 0.3489 - val_loss: 0.4581 - val_sqrt_abs_min_loss: 0.4574 - val_accuracy: 0.3528 - 61s/epoch - 222ms/step
Epoch 65/100
273/273 - 61s - loss: 0.4658 - sqrt_abs_min_loss: 0.4651 - accuracy: 0.3716 - val_loss: 0.4572 - val_sqrt_abs_min_loss: 0.4565 - val_accuracy: 0.3528 - 61s/epoch - 223ms/step
Epoch 66/100
273/273 - 62s - loss: 0.4673 - sqrt_abs_min_loss: 0.4666 - accuracy: 0.3451 - val_loss: 0.4709 - val_sqrt_abs_min_loss: 0.4703 - val_accuracy: 0.3397 - 62s/epoch - 227ms/step
Epoch 67/100
273/273 - 59s - loss: 0.4625 - sqrt_abs_min_loss: 0.4618 - accuracy: 0.3046 - val_loss: 0.4574 - val_sqrt_abs_min_loss: 0.4568 - val_accuracy: 0.3690 - 59s/epoch - 217ms/step
Epoch 68/100
273/273 - 61s - loss: 0.4654 - sqrt_abs_min_loss: 0.4647 - accuracy: 0.3333 - val_loss: 0.4551 - val_sqrt_abs_min_loss: 0.4545 - val_accuracy: 0.2450 - 61s/epoch - 223ms/step
Epoch 69/100
273/273 - 61s - loss: 0.4596 - sqrt_abs_min_loss: 0.4589 - accuracy: 0.3455 - val_loss: 0.4897 - val_sqrt_abs_min_loss: 0.4890 - val_accuracy: 0.3024 - 61s/epoch - 222ms/step
Epoch 70/100
273/273 - 62s - loss: 0.4624 - sqrt_abs_min_loss: 0.4618 - accuracy: 0.3923 - val_loss: 0.4797 - val_sqrt_abs_min_loss: 0.4791 - val_accuracy: 0.2772 - 62s/epoch - 227ms/step
Epoch 71/100
273/273 - 62s - loss: 0.4599 - sqrt_abs_min_loss: 0.4593 - accuracy: 0.3354 - val_loss: 0.4787 - val_sqrt_abs_min_loss: 0.4781 - val_accuracy: 0.3548 - 62s/epoch - 227ms/step
Epoch 72/100
273/273 - 60s - loss: 0.4641 - sqrt_abs_min_loss: 0.4634 - accuracy: 0.3645 - val_loss: 0.4628 - val_sqrt_abs_min_loss: 0.4622 - val_accuracy: 0.2853 - 60s/epoch - 222ms/step
Epoch 73/100
273/273 - 62s - loss: 0.4669 - sqrt_abs_min_loss: 0.4662 - accuracy: 0.3243 - val_loss: 0.4505 - val_sqrt_abs_min_loss: 0.4498 - val_accuracy: 0.3377 - 62s/epoch - 226ms/step
Epoch 74/100
273/273 - 60s - loss: 0.4666 - sqrt_abs_min_loss: 0.4659 - accuracy: 0.3607 - val_loss: 0.4587 - val_sqrt_abs_min_loss: 0.4581 - val_accuracy: 0.2067 - 60s/epoch - 221ms/step
Epoch 75/100
273/273 - 61s - loss: 0.4728 - sqrt_abs_min_loss: 0.4722 - accuracy: 0.3315 - val_loss: 0.4969 - val_sqrt_abs_min_loss: 0.4963 - val_accuracy: 0.2631 - 61s/epoch - 223ms/step
Epoch 76/100
273/273 - 59s - loss: 0.4677 - sqrt_abs_min_loss: 0.4670 - accuracy: 0.3286 - val_loss: 0.4449 - val_sqrt_abs_min_loss: 0.4443 - val_accuracy: 0.2016 - 59s/epoch - 217ms/step
Epoch 77/100
273/273 - 61s - loss: 0.4609 - sqrt_abs_min_loss: 0.4603 - accuracy: 0.3457 - val_loss: 0.4782 - val_sqrt_abs_min_loss: 0.4775 - val_accuracy: 0.2651 - 61s/epoch - 222ms/step
Epoch 78/100
273/273 - 61s - loss: 0.4613 - sqrt_abs_min_loss: 0.4606 - accuracy: 0.3446 - val_loss: 0.4672 - val_sqrt_abs_min_loss: 0.4665 - val_accuracy: 0.4345 - 61s/epoch - 222ms/step
Epoch 79/100
273/273 - 59s - loss: 0.4667 - sqrt_abs_min_loss: 0.4660 - accuracy: 0.3513 - val_loss: 0.4852 - val_sqrt_abs_min_loss: 0.4845 - val_accuracy: 0.3649 - 59s/epoch - 217ms/step
Epoch 80/100
273/273 - 60s - loss: 0.4612 - sqrt_abs_min_loss: 0.4606 - accuracy: 0.3043 - val_loss: 0.4881 - val_sqrt_abs_min_loss: 0.4874 - val_accuracy: 0.2772 - 60s/epoch - 219ms/step
Epoch 81/100
273/273 - 60s - loss: 0.4633 - sqrt_abs_min_loss: 0.4627 - accuracy: 0.3427 - val_loss: 0.4506 - val_sqrt_abs_min_loss: 0.4500 - val_accuracy: 0.2964 - 60s/epoch - 219ms/step
Epoch 82/100
273/273 - 60s - loss: 0.4703 - sqrt_abs_min_loss: 0.4696 - accuracy: 0.3410 - val_loss: 0.4546 - val_sqrt_abs_min_loss: 0.4539 - val_accuracy: 0.4808 - 60s/epoch - 220ms/step
Epoch 83/100
273/273 - 60s - loss: 0.4670 - sqrt_abs_min_loss: 0.4663 - accuracy: 0.3752 - val_loss: 0.4630 - val_sqrt_abs_min_loss: 0.4623 - val_accuracy: 0.3629 - 60s/epoch - 219ms/step
Epoch 84/100
273/273 - 61s - loss: 0.4635 - sqrt_abs_min_loss: 0.4627 - accuracy: 0.3522 - val_loss: 0.4845 - val_sqrt_abs_min_loss: 0.4837 - val_accuracy: 0.2974 - 61s/epoch - 223ms/step
Epoch 85/100
273/273 - 61s - loss: 0.4546 - sqrt_abs_min_loss: 0.4538 - accuracy: 0.3682 - val_loss: 0.4835 - val_sqrt_abs_min_loss: 0.4828 - val_accuracy: 0.2772 - 61s/epoch - 223ms/step
Epoch 86/100
273/273 - 62s - loss: 0.4619 - sqrt_abs_min_loss: 0.4612 - accuracy: 0.3634 - val_loss: 0.4697 - val_sqrt_abs_min_loss: 0.4690 - val_accuracy: 0.3861 - 62s/epoch - 226ms/step
Epoch 87/100
273/273 - 62s - loss: 0.4576 - sqrt_abs_min_loss: 0.4569 - accuracy: 0.3043 - val_loss: 0.4525 - val_sqrt_abs_min_loss: 0.4519 - val_accuracy: 0.2681 - 62s/epoch - 227ms/step
Epoch 88/100
273/273 - 62s - loss: 0.4681 - sqrt_abs_min_loss: 0.4675 - accuracy: 0.3452 - val_loss: 0.4536 - val_sqrt_abs_min_loss: 0.4530 - val_accuracy: 0.3407 - 62s/epoch - 227ms/step
Epoch 89/100
273/273 - 62s - loss: 0.4607 - sqrt_abs_min_loss: 0.4600 - accuracy: 0.3166 - val_loss: 0.4975 - val_sqrt_abs_min_loss: 0.4968 - val_accuracy: 0.3498 - 62s/epoch - 226ms/step
Epoch 90/100
273/273 - 62s - loss: 0.4615 - sqrt_abs_min_loss: 0.4609 - accuracy: 0.3490 - val_loss: 0.4815 - val_sqrt_abs_min_loss: 0.4809 - val_accuracy: 0.2611 - 62s/epoch - 227ms/step
Epoch 91/100
273/273 - 61s - loss: 0.4567 - sqrt_abs_min_loss: 0.4560 - accuracy: 0.3360 - val_loss: 0.4876 - val_sqrt_abs_min_loss: 0.4870 - val_accuracy: 0.4032 - 61s/epoch - 223ms/step
Epoch 92/100
273/273 - 61s - loss: 0.4600 - sqrt_abs_min_loss: 0.4594 - accuracy: 0.3255 - val_loss: 0.4867 - val_sqrt_abs_min_loss: 0.4861 - val_accuracy: 0.2692 - 61s/epoch - 224ms/step
Epoch 93/100
273/273 - 60s - loss: 0.4611 - sqrt_abs_min_loss: 0.4604 - accuracy: 0.3336 - val_loss: 0.4702 - val_sqrt_abs_min_loss: 0.4695 - val_accuracy: 0.3921 - 60s/epoch - 219ms/step
Epoch 94/100
273/273 - 59s - loss: 0.4620 - sqrt_abs_min_loss: 0.4613 - accuracy: 0.3151 - val_loss: 0.4954 - val_sqrt_abs_min_loss: 0.4947 - val_accuracy: 0.4032 - 59s/epoch - 217ms/step
Epoch 95/100
273/273 - 60s - loss: 0.4603 - sqrt_abs_min_loss: 0.4596 - accuracy: 0.3346 - val_loss: 0.4569 - val_sqrt_abs_min_loss: 0.4562 - val_accuracy: 0.2107 - 60s/epoch - 219ms/step
Epoch 96/100
273/273 - 60s - loss: 0.4574 - sqrt_abs_min_loss: 0.4567 - accuracy: 0.3259 - val_loss: 0.4833 - val_sqrt_abs_min_loss: 0.4826 - val_accuracy: 0.3659 - 60s/epoch - 219ms/step
Epoch 97/100
273/273 - 62s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.3340 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.3931 - 62s/epoch - 227ms/step
Epoch 98/100
273/273 - 62s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.3426 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.4012 - 62s/epoch - 227ms/step
Epoch 99/100
273/273 - 61s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.3388 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.3468 - 61s/epoch - 223ms/step
Epoch 100/100
273/273 - 61s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.3235 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.4204 - 61s/epoch - 222ms/step
############### PREDICTIONS ###############
----------0----------
phi1 54.7
PHI 36.1
phi2 23.5
1/1 [==============================] - ETA: 0s1/1 [==============================] - 0s 261ms/step
predicted values [[nan nan nan]]
----------1----------
phi1 76.0
PHI 83.7
phi2 2.9
1/1 [==============================] - ETA: 0s1/1 [==============================] - 0s 19ms/step
predicted values [[nan nan nan]]
----------2----------
phi1 17.8
PHI 63.8
phi2 50.8
1/1 [==============================] - ETA: 0s1/1 [==============================] - 0s 18ms/step
predicted values [[nan nan nan]]
----------3----------
phi1 17.5
PHI 15.5
phi2 50.4
1/1 [==============================] - ETA: 0s1/1 [==============================] - 0s 17ms/step
predicted values [[nan nan nan]]
----------4----------
phi1 47.5
PHI 32.6
phi2 29.8
1/1 [==============================] - ETA: 0s1/1 [==============================] - 0s 17ms/step
predicted values [[nan nan nan]]
----------5----------
phi1 33.3
PHI 39.6
phi2 28.5
1/1 [==============================] - ETA: 0s1/1 [==============================] - 0s 16ms/step
predicted values [[nan nan nan]]
----------6----------
phi1 60.8
PHI 28.2
phi2 9.9
1/1 [==============================] - ETA: 0s1/1 [==============================] - 0s 16ms/step
predicted values [[nan nan nan]]
----------7----------
phi1 26.6
PHI 6.8
phi2 75.8
1/1 [==============================] - ETA: 0s1/1 [==============================] - 0s 18ms/step
predicted values [[nan nan nan]]
----------8----------
phi1 39.3
PHI 40.9
phi2 7.6
1/1 [==============================] - ETA: 0s1/1 [==============================] - 0s 17ms/step
predicted values [[nan nan nan]]
----------9----------
phi1 3.9
PHI 87.4
phi2 25.8
1/1 [==============================] - ETA: 0s1/1 [==============================] - 0s 17ms/step
predicted values [[nan nan nan]]
############### PREDICTIONS ###############
 1/31 [..............................] - ETA: 7s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.1875 2/31 [>.............................] - ETA: 5s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.1875 3/31 [=>............................] - ETA: 5s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.1875 4/31 [==>...........................] - ETA: 5s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.1953 5/31 [===>..........................] - ETA: 5s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.2000 6/31 [====>.........................] - ETA: 4s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.1979 7/31 [=====>........................] - ETA: 4s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.2009 8/31 [======>.......................] - ETA: 4s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.1992 9/31 [=======>......................] - ETA: 4s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.201410/31 [========>.....................] - ETA: 4s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.206211/31 [=========>....................] - ETA: 3s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.210212/31 [==========>...................] - ETA: 3s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.213513/31 [===========>..................] - ETA: 3s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.216314/31 [============>.................] - ETA: 3s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.218815/31 [=============>................] - ETA: 3s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.220816/31 [==============>...............] - ETA: 2s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.224617/31 [===============>..............] - ETA: 2s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.226118/31 [================>.............] - ETA: 2s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.227419/31 [=================>............] - ETA: 2s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.230320/31 [==================>...........] - ETA: 2s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.232821/31 [===================>..........] - ETA: 1s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.235122/31 [====================>.........] - ETA: 1s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.238623/31 [=====================>........] - ETA: 1s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.243224/31 [======================>.......] - ETA: 1s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.247425/31 [=======================>......] - ETA: 1s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.251226/31 [========================>.....] - ETA: 0s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.254827/31 [=========================>....] - ETA: 0s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.256928/31 [==========================>...] - ETA: 0s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.258929/31 [===========================>..] - ETA: 0s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.261930/31 [============================>.] - ETA: 0s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.264631/31 [==============================] - ETA: 0s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.267131/31 [==============================] - 6s 194ms/step - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.2671
test loss, test acc: [nan, nan, 0.2671371102333069]

------------------------------------------------------------
Sender: LSF System <lsfadmin@hpc.dtu.dk>
Subject: Job 15232417: <s202741-train> in cluster <dcc> Done

Job <s202741-train> was submitted from host <n-62-20-1> by user <s202741> in cluster <dcc> at Sun Jan 22 12:32:54 2023
Job was executed on host(s) <4*n-62-11-16>, in queue <gpuv100>, as user <s202741> in cluster <dcc> at Wed Jan 25 08:25:28 2023
</zhome/ab/7/153983> was used as the home directory.
</zhome/ab/7/153983/project/scripts> was used as the working directory.
Started at Wed Jan 25 08:25:28 2023
Terminated at Wed Jan 25 10:07:54 2023
Results reported at Wed Jan 25 10:07:54 2023

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#!/bin/bash
### General options
### -- specify queue --   NOTE: TitanX is significantly faster than K80
#BSUB -q gpuv100
#BSUB -gpu "num=1:mode=exclusive_process"
### -- set the job Name --
#BSUB -J s202741-train
### -- ask for number of cores (default: 1) --
#BSUB -n 4
#BSUB -R "span[hosts=1]"
### -- set walltime limit: hh:mm --  maximum 24 hours for GPU-queues right now
#BSUB -W 5:00
# request 5GB of memory
#BSUB -R "rusage[mem=5GB]"
### -- Specify the output and error file. %J is the job-id --
### -- -o and -e mean append, -oo and -eo mean overwrite --
#BSUB -o iter6/Logs/RMSprop_sqrt_abs_min_loss_0001_model_d_%J.out
# -- end of LSF options --

# Necessary modules
cd ..
source venv/bin/activate

python trainModelIter3.py 100 "RMSprop(learning_rate=0.001)" "sqrt_abs_min_loss" "black_background_500x500.csv" 2 "RMSprop_sqrt_abs_min_loss_0001_model_d_" "iter6" "load_model_d"

    
------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   8604.20 sec.
    Max Memory :                                 3060 MB
    Average Memory :                             2954.50 MB
    Total Requested Memory :                     20480.00 MB
    Delta Memory :                               17420.00 MB
    Max Swap :                                   -
    Max Processes :                              4
    Max Threads :                                35
    Run time :                                   6146 sec.
    Turnaround time :                            250500 sec.

The output (if any) is above this job summary.

