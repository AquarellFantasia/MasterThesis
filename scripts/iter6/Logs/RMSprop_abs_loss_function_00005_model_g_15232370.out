Loaded dependency [python3/3.10.7]: gcc/11.3.0-binutils-2.38
Loaded module: python3/3.10.7

Loading python3/3.10.7
  Loading requirement: gcc/11.3.0-binutils-2.38
Loaded module: cuda/11.6
Loaded module: cudnn/v8.3.2.44-prod-cuda-11.X
2023-01-23 16:25:48.507671: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2023-01-23 16:25:50.213462: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer.so.7'; dlerror: libnvinfer.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /appl/cudnn/v8.3.2.44-prod-cuda-11.5/lib:/appl/cuda/11.6.0/lib64:/appl/python/3.10.7/lib:/appl/gcc/11.3.0-binutils-2.38/lib64:/appl/gcc/11.3.0-binutils-2.38/lib:/lsf/10.1/linux3.10-glibc2.17-x86_64/lib
2023-01-23 16:25:50.214168: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer_plugin.so.7'; dlerror: libnvinfer_plugin.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /appl/cudnn/v8.3.2.44-prod-cuda-11.5/lib:/appl/cuda/11.6.0/lib64:/appl/python/3.10.7/lib:/appl/gcc/11.3.0-binutils-2.38/lib64:/appl/gcc/11.3.0-binutils-2.38/lib:/lsf/10.1/linux3.10-glibc2.17-x86_64/lib
2023-01-23 16:25:50.214180: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Cannot dlopen some TensorRT libraries. If you would like to use Nvidia GPU with TensorRT, please make sure the missing libraries mentioned above are installed properly.
2023-01-23 16:25:54.172207: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2023-01-23 16:25:54.859265: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1613] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 30961 MB memory:  -> device: 0, name: Tesla V100-SXM2-32GB, pci bus id: 0000:3b:00.0, compute capability: 7.0
Epochs:  100
Optimizer:  RMSprop(learning_rate=0.0005)
Loss function name:  abs_loss_function
Csv file used:  black_background_500x500.csv
Verbose:  2
Unique name:  RMSprop_abs_loss_function_00005_model_g_
Output folder:  iter6
Model name:  load_model_g
 
        ################ MODEL ############### 

        inputs = keras.Input(shape=(input_size, input_size, 1))
        x = layers.Conv2D(filters=64, kernel_size=11, activation="relu")(inputs)
        x = layers.Conv2D(filters=64, kernel_size=11, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=5, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=5, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Flatten()(x)
        x = layers.Dense(210, activation="relu")(x)
        x = layers.Dense(64, activation="relu")(x)
        x = layers.Dense(16, activation="sigmoid")(x)
        outputs = layers.Dense(3)(x)

        model = keras.Model(inputs=inputs, outputs=outputs)
    
Model: "model"
_________________________________________________________________
 Layer (type)                Output Shape              Param #   
=================================================================
 input_1 (InputLayer)        [(None, 500, 500, 1)]     0         
                                                                 
 conv2d (Conv2D)             (None, 490, 490, 64)      7808      
                                                                 
 conv2d_1 (Conv2D)           (None, 480, 480, 64)      495680    
                                                                 
 max_pooling2d (MaxPooling2D  (None, 240, 240, 64)     0         
 )                                                               
                                                                 
 conv2d_2 (Conv2D)           (None, 236, 236, 64)      102464    
                                                                 
 conv2d_3 (Conv2D)           (None, 232, 232, 64)      102464    
                                                                 
 max_pooling2d_1 (MaxPooling  (None, 116, 116, 64)     0         
 2D)                                                             
                                                                 
 conv2d_4 (Conv2D)           (None, 114, 114, 64)      36928     
                                                                 
 conv2d_5 (Conv2D)           (None, 112, 112, 64)      36928     
                                                                 
 max_pooling2d_2 (MaxPooling  (None, 56, 56, 64)       0         
 2D)                                                             
                                                                 
 conv2d_6 (Conv2D)           (None, 54, 54, 64)        36928     
                                                                 
 conv2d_7 (Conv2D)           (None, 52, 52, 64)        36928     
                                                                 
 max_pooling2d_3 (MaxPooling  (None, 26, 26, 64)       0         
 2D)                                                             
                                                                 
 conv2d_8 (Conv2D)           (None, 24, 24, 64)        36928     
                                                                 
 conv2d_9 (Conv2D)           (None, 22, 22, 64)        36928     
                                                                 
 max_pooling2d_4 (MaxPooling  (None, 11, 11, 64)       0         
 2D)                                                             
                                                                 
 conv2d_10 (Conv2D)          (None, 9, 9, 64)          36928     
                                                                 
 conv2d_11 (Conv2D)          (None, 7, 7, 64)          36928     
                                                                 
 max_pooling2d_5 (MaxPooling  (None, 3, 3, 64)         0         
 2D)                                                             
                                                                 
 flatten (Flatten)           (None, 576)               0         
                                                                 
 dense (Dense)               (None, 210)               121170    
                                                                 
 dense_1 (Dense)             (None, 64)                13504     
                                                                 
 dense_2 (Dense)             (None, 16)                1040      
                                                                 
 dense_3 (Dense)             (None, 3)                 51        
                                                                 
=================================================================
Total params: 1,139,605
Trainable params: 1,139,605
Non-trainable params: 0
_________________________________________________________________
/zhome/ab/7/153983/project/venv/lib/python3.10/site-packages/keras/utils/image_utils.py:409: UserWarning: grayscale is deprecated. Please use color_mode = "grayscale"
  warnings.warn(
Epoch 1/100
2023-01-23 16:25:58.546034: I tensorflow/compiler/xla/stream_executor/cuda/cuda_dnn.cc:428] Loaded cuDNN version 8302
273/273 - 251s - loss: 0.2430 - abs_loss_function: 0.2430 - accuracy: 0.2850 - val_loss: 0.2686 - val_abs_loss_function: 0.2686 - val_accuracy: 0.3558 - 251s/epoch - 920ms/step
Epoch 2/100
273/273 - 225s - loss: 0.2406 - abs_loss_function: 0.2406 - accuracy: 0.3452 - val_loss: 0.2418 - val_abs_loss_function: 0.2418 - val_accuracy: 0.3800 - 225s/epoch - 826ms/step
Epoch 3/100
273/273 - 226s - loss: 0.2434 - abs_loss_function: 0.2434 - accuracy: 0.3135 - val_loss: 0.2491 - val_abs_loss_function: 0.2491 - val_accuracy: 0.3327 - 226s/epoch - 827ms/step
Epoch 4/100
273/273 - 226s - loss: 0.2454 - abs_loss_function: 0.2454 - accuracy: 0.3003 - val_loss: 0.2473 - val_abs_loss_function: 0.2473 - val_accuracy: 0.2520 - 226s/epoch - 829ms/step
Epoch 5/100
273/273 - 225s - loss: 0.2467 - abs_loss_function: 0.2467 - accuracy: 0.3516 - val_loss: 0.2402 - val_abs_loss_function: 0.2402 - val_accuracy: 0.3851 - 225s/epoch - 825ms/step
Epoch 6/100
273/273 - 225s - loss: 0.2440 - abs_loss_function: 0.2440 - accuracy: 0.3739 - val_loss: 0.2652 - val_abs_loss_function: 0.2652 - val_accuracy: 0.3397 - 225s/epoch - 824ms/step
Epoch 7/100
273/273 - 225s - loss: 0.2412 - abs_loss_function: 0.2412 - accuracy: 0.3647 - val_loss: 0.2528 - val_abs_loss_function: 0.2528 - val_accuracy: 0.3488 - 225s/epoch - 826ms/step
Epoch 8/100
273/273 - 225s - loss: 0.2446 - abs_loss_function: 0.2446 - accuracy: 0.3646 - val_loss: 0.2506 - val_abs_loss_function: 0.2506 - val_accuracy: 0.3054 - 225s/epoch - 824ms/step
Epoch 9/100
273/273 - 224s - loss: 0.2396 - abs_loss_function: 0.2396 - accuracy: 0.3039 - val_loss: 0.2511 - val_abs_loss_function: 0.2511 - val_accuracy: 0.4446 - 224s/epoch - 822ms/step
Epoch 10/100
273/273 - 225s - loss: 0.2352 - abs_loss_function: 0.2352 - accuracy: 0.3187 - val_loss: 0.2390 - val_abs_loss_function: 0.2390 - val_accuracy: 0.2853 - 225s/epoch - 825ms/step
Epoch 11/100
273/273 - 225s - loss: 0.2430 - abs_loss_function: 0.2430 - accuracy: 0.3688 - val_loss: 0.2539 - val_abs_loss_function: 0.2539 - val_accuracy: 0.2964 - 225s/epoch - 826ms/step
Epoch 12/100
273/273 - 225s - loss: 0.2416 - abs_loss_function: 0.2416 - accuracy: 0.3167 - val_loss: 0.2615 - val_abs_loss_function: 0.2615 - val_accuracy: 0.3851 - 225s/epoch - 823ms/step
Epoch 13/100
273/273 - 226s - loss: 0.2522 - abs_loss_function: 0.2522 - accuracy: 0.3650 - val_loss: 0.2538 - val_abs_loss_function: 0.2538 - val_accuracy: 0.3135 - 226s/epoch - 827ms/step
Epoch 14/100
273/273 - 226s - loss: 0.2489 - abs_loss_function: 0.2489 - accuracy: 0.2967 - val_loss: 0.2673 - val_abs_loss_function: 0.2673 - val_accuracy: 0.2500 - 226s/epoch - 827ms/step
Epoch 15/100
273/273 - 224s - loss: 0.2427 - abs_loss_function: 0.2427 - accuracy: 0.3049 - val_loss: 0.2643 - val_abs_loss_function: 0.2643 - val_accuracy: 0.3690 - 224s/epoch - 822ms/step
Epoch 16/100
273/273 - 225s - loss: 0.2412 - abs_loss_function: 0.2412 - accuracy: 0.3100 - val_loss: 0.2336 - val_abs_loss_function: 0.2336 - val_accuracy: 0.3276 - 225s/epoch - 825ms/step
Epoch 17/100
273/273 - 225s - loss: 0.2481 - abs_loss_function: 0.2481 - accuracy: 0.3086 - val_loss: 0.2519 - val_abs_loss_function: 0.2519 - val_accuracy: 0.3276 - 225s/epoch - 823ms/step
Epoch 18/100
273/273 - 224s - loss: 0.2458 - abs_loss_function: 0.2458 - accuracy: 0.3376 - val_loss: 0.2351 - val_abs_loss_function: 0.2351 - val_accuracy: 0.4083 - 224s/epoch - 821ms/step
Epoch 19/100
273/273 - 224s - loss: 0.2513 - abs_loss_function: 0.2513 - accuracy: 0.3466 - val_loss: 0.2366 - val_abs_loss_function: 0.2366 - val_accuracy: 0.3952 - 224s/epoch - 822ms/step
Epoch 20/100
273/273 - 224s - loss: 0.2475 - abs_loss_function: 0.2475 - accuracy: 0.3019 - val_loss: 0.2417 - val_abs_loss_function: 0.2417 - val_accuracy: 0.4577 - 224s/epoch - 821ms/step
Epoch 21/100
273/273 - 224s - loss: 0.2397 - abs_loss_function: 0.2397 - accuracy: 0.3595 - val_loss: 0.2319 - val_abs_loss_function: 0.2319 - val_accuracy: 0.2137 - 224s/epoch - 821ms/step
Epoch 22/100
273/273 - 226s - loss: 0.2417 - abs_loss_function: 0.2417 - accuracy: 0.3152 - val_loss: 0.2493 - val_abs_loss_function: 0.2493 - val_accuracy: 0.3226 - 226s/epoch - 826ms/step
Epoch 23/100
273/273 - 225s - loss: 0.2377 - abs_loss_function: 0.2377 - accuracy: 0.3199 - val_loss: 0.2732 - val_abs_loss_function: 0.2732 - val_accuracy: 0.3175 - 225s/epoch - 823ms/step
Epoch 24/100
273/273 - 225s - loss: 0.2467 - abs_loss_function: 0.2467 - accuracy: 0.3069 - val_loss: 0.2429 - val_abs_loss_function: 0.2429 - val_accuracy: 0.4032 - 225s/epoch - 824ms/step
Epoch 25/100
273/273 - 224s - loss: 0.2462 - abs_loss_function: 0.2462 - accuracy: 0.3108 - val_loss: 0.2586 - val_abs_loss_function: 0.2586 - val_accuracy: 0.2913 - 224s/epoch - 822ms/step
Epoch 26/100
273/273 - 226s - loss: 0.2363 - abs_loss_function: 0.2363 - accuracy: 0.3235 - val_loss: 0.2379 - val_abs_loss_function: 0.2379 - val_accuracy: 0.3558 - 226s/epoch - 827ms/step
Epoch 27/100
273/273 - 224s - loss: 0.2374 - abs_loss_function: 0.2374 - accuracy: 0.3494 - val_loss: 0.2482 - val_abs_loss_function: 0.2482 - val_accuracy: 0.3881 - 224s/epoch - 822ms/step
Epoch 28/100
273/273 - 225s - loss: 0.2474 - abs_loss_function: 0.2474 - accuracy: 0.3418 - val_loss: 0.2383 - val_abs_loss_function: 0.2383 - val_accuracy: 0.2923 - 225s/epoch - 825ms/step
Epoch 29/100
273/273 - 226s - loss: 0.2510 - abs_loss_function: 0.2510 - accuracy: 0.3592 - val_loss: 0.2472 - val_abs_loss_function: 0.2472 - val_accuracy: 0.1724 - 226s/epoch - 829ms/step
Epoch 30/100
273/273 - 225s - loss: 0.2434 - abs_loss_function: 0.2434 - accuracy: 0.3750 - val_loss: 0.2465 - val_abs_loss_function: 0.2465 - val_accuracy: 0.2782 - 225s/epoch - 824ms/step
Epoch 31/100
273/273 - 226s - loss: 0.2384 - abs_loss_function: 0.2384 - accuracy: 0.3075 - val_loss: 0.2501 - val_abs_loss_function: 0.2501 - val_accuracy: 0.4335 - 226s/epoch - 827ms/step
Epoch 32/100
273/273 - 226s - loss: 0.2483 - abs_loss_function: 0.2483 - accuracy: 0.3511 - val_loss: 0.2543 - val_abs_loss_function: 0.2543 - val_accuracy: 0.2157 - 226s/epoch - 827ms/step
Epoch 33/100
273/273 - 225s - loss: 0.2433 - abs_loss_function: 0.2433 - accuracy: 0.3285 - val_loss: 0.2536 - val_abs_loss_function: 0.2536 - val_accuracy: 0.3286 - 225s/epoch - 823ms/step
Epoch 34/100
273/273 - 226s - loss: 0.2464 - abs_loss_function: 0.2464 - accuracy: 0.2924 - val_loss: 0.2679 - val_abs_loss_function: 0.2679 - val_accuracy: 0.4375 - 226s/epoch - 827ms/step
Epoch 35/100
273/273 - 226s - loss: 0.2501 - abs_loss_function: 0.2501 - accuracy: 0.3497 - val_loss: 0.2599 - val_abs_loss_function: 0.2599 - val_accuracy: 0.3155 - 226s/epoch - 827ms/step
Epoch 36/100
273/273 - 225s - loss: 0.2472 - abs_loss_function: 0.2472 - accuracy: 0.3591 - val_loss: 0.2592 - val_abs_loss_function: 0.2592 - val_accuracy: 0.2954 - 225s/epoch - 824ms/step
Epoch 37/100
273/273 - 225s - loss: 0.2426 - abs_loss_function: 0.2426 - accuracy: 0.3134 - val_loss: 0.2539 - val_abs_loss_function: 0.2539 - val_accuracy: 0.3317 - 225s/epoch - 823ms/step
Epoch 38/100
273/273 - 225s - loss: 0.2469 - abs_loss_function: 0.2469 - accuracy: 0.3760 - val_loss: 0.2545 - val_abs_loss_function: 0.2545 - val_accuracy: 0.2802 - 225s/epoch - 823ms/step
Epoch 39/100
273/273 - 224s - loss: 0.2475 - abs_loss_function: 0.2475 - accuracy: 0.3347 - val_loss: 0.2506 - val_abs_loss_function: 0.2506 - val_accuracy: 0.3498 - 224s/epoch - 822ms/step
Epoch 40/100
273/273 - 224s - loss: 0.2406 - abs_loss_function: 0.2406 - accuracy: 0.3246 - val_loss: 0.2437 - val_abs_loss_function: 0.2437 - val_accuracy: 0.2228 - 224s/epoch - 821ms/step
Epoch 41/100
273/273 - 225s - loss: 0.2481 - abs_loss_function: 0.2481 - accuracy: 0.3158 - val_loss: 0.2487 - val_abs_loss_function: 0.2487 - val_accuracy: 0.2843 - 225s/epoch - 823ms/step
Epoch 42/100
273/273 - 225s - loss: 0.2432 - abs_loss_function: 0.2432 - accuracy: 0.3218 - val_loss: 0.2375 - val_abs_loss_function: 0.2375 - val_accuracy: 0.3286 - 225s/epoch - 825ms/step
Epoch 43/100
273/273 - 225s - loss: 0.2563 - abs_loss_function: 0.2563 - accuracy: 0.3441 - val_loss: 0.2451 - val_abs_loss_function: 0.2451 - val_accuracy: 0.3196 - 225s/epoch - 823ms/step
Epoch 44/100
273/273 - 226s - loss: 0.2417 - abs_loss_function: 0.2417 - accuracy: 0.3144 - val_loss: 0.2487 - val_abs_loss_function: 0.2487 - val_accuracy: 0.2722 - 226s/epoch - 827ms/step
Epoch 45/100
273/273 - 225s - loss: 0.2490 - abs_loss_function: 0.2490 - accuracy: 0.3535 - val_loss: 0.2400 - val_abs_loss_function: 0.2400 - val_accuracy: 0.3438 - 225s/epoch - 824ms/step
Epoch 46/100
273/273 - 225s - loss: 0.2513 - abs_loss_function: 0.2513 - accuracy: 0.3473 - val_loss: 0.2308 - val_abs_loss_function: 0.2308 - val_accuracy: 0.2782 - 225s/epoch - 825ms/step
Epoch 47/100
273/273 - 226s - loss: 0.2450 - abs_loss_function: 0.2450 - accuracy: 0.3225 - val_loss: 0.2445 - val_abs_loss_function: 0.2445 - val_accuracy: 0.3569 - 226s/epoch - 827ms/step
Epoch 48/100
273/273 - 225s - loss: 0.2397 - abs_loss_function: 0.2397 - accuracy: 0.2875 - val_loss: 0.2555 - val_abs_loss_function: 0.2555 - val_accuracy: 0.4123 - 225s/epoch - 823ms/step
Epoch 49/100
273/273 - 225s - loss: 0.2388 - abs_loss_function: 0.2388 - accuracy: 0.3017 - val_loss: 0.2579 - val_abs_loss_function: 0.2579 - val_accuracy: 0.2389 - 225s/epoch - 824ms/step
Epoch 50/100
273/273 - 225s - loss: 0.2424 - abs_loss_function: 0.2424 - accuracy: 0.3241 - val_loss: 0.2510 - val_abs_loss_function: 0.2510 - val_accuracy: 0.3538 - 225s/epoch - 824ms/step
Epoch 51/100
273/273 - 225s - loss: 0.2458 - abs_loss_function: 0.2458 - accuracy: 0.3294 - val_loss: 0.2582 - val_abs_loss_function: 0.2582 - val_accuracy: 0.4869 - 225s/epoch - 823ms/step
Epoch 52/100
273/273 - 225s - loss: 0.2523 - abs_loss_function: 0.2523 - accuracy: 0.3413 - val_loss: 0.2504 - val_abs_loss_function: 0.2504 - val_accuracy: 0.3901 - 225s/epoch - 826ms/step
Epoch 53/100
273/273 - 225s - loss: 0.2469 - abs_loss_function: 0.2469 - accuracy: 0.3592 - val_loss: 0.2623 - val_abs_loss_function: 0.2623 - val_accuracy: 0.3135 - 225s/epoch - 824ms/step
Epoch 54/100
273/273 - 225s - loss: 0.2459 - abs_loss_function: 0.2459 - accuracy: 0.3587 - val_loss: 0.2386 - val_abs_loss_function: 0.2386 - val_accuracy: 0.3700 - 225s/epoch - 825ms/step
Epoch 55/100
273/273 - 225s - loss: 0.2463 - abs_loss_function: 0.2463 - accuracy: 0.3283 - val_loss: 0.2484 - val_abs_loss_function: 0.2484 - val_accuracy: 0.3266 - 225s/epoch - 826ms/step
Epoch 56/100
273/273 - 225s - loss: 0.2419 - abs_loss_function: 0.2419 - accuracy: 0.3337 - val_loss: 0.2405 - val_abs_loss_function: 0.2405 - val_accuracy: 0.3579 - 225s/epoch - 825ms/step
Epoch 57/100
273/273 - 224s - loss: 0.2404 - abs_loss_function: 0.2404 - accuracy: 0.3057 - val_loss: 0.2566 - val_abs_loss_function: 0.2566 - val_accuracy: 0.3790 - 224s/epoch - 822ms/step
Epoch 58/100
273/273 - 225s - loss: 0.2401 - abs_loss_function: 0.2401 - accuracy: 0.2823 - val_loss: 0.2396 - val_abs_loss_function: 0.2396 - val_accuracy: 0.1815 - 225s/epoch - 823ms/step
Epoch 59/100
273/273 - 225s - loss: 0.2430 - abs_loss_function: 0.2430 - accuracy: 0.3179 - val_loss: 0.2404 - val_abs_loss_function: 0.2404 - val_accuracy: 0.3730 - 225s/epoch - 826ms/step
Epoch 60/100
273/273 - 224s - loss: 0.2488 - abs_loss_function: 0.2488 - accuracy: 0.3299 - val_loss: 0.2506 - val_abs_loss_function: 0.2506 - val_accuracy: 0.3024 - 224s/epoch - 821ms/step
Epoch 61/100
273/273 - 225s - loss: 0.2457 - abs_loss_function: 0.2457 - accuracy: 0.2965 - val_loss: 0.2570 - val_abs_loss_function: 0.2570 - val_accuracy: 0.2208 - 225s/epoch - 823ms/step
Epoch 62/100
273/273 - 225s - loss: 0.2376 - abs_loss_function: 0.2376 - accuracy: 0.2840 - val_loss: 0.2487 - val_abs_loss_function: 0.2487 - val_accuracy: 0.3075 - 225s/epoch - 824ms/step
Epoch 63/100
273/273 - 224s - loss: 0.2457 - abs_loss_function: 0.2457 - accuracy: 0.3734 - val_loss: 0.2645 - val_abs_loss_function: 0.2645 - val_accuracy: 0.2772 - 224s/epoch - 822ms/step
Epoch 64/100
273/273 - 224s - loss: 0.2431 - abs_loss_function: 0.2431 - accuracy: 0.3325 - val_loss: 0.2282 - val_abs_loss_function: 0.2282 - val_accuracy: 0.3942 - 224s/epoch - 822ms/step
Epoch 65/100
273/273 - 225s - loss: 0.2516 - abs_loss_function: 0.2516 - accuracy: 0.3273 - val_loss: 0.2426 - val_abs_loss_function: 0.2426 - val_accuracy: 0.2762 - 225s/epoch - 824ms/step
Epoch 66/100
273/273 - 225s - loss: 0.2504 - abs_loss_function: 0.2504 - accuracy: 0.3062 - val_loss: 0.2422 - val_abs_loss_function: 0.2422 - val_accuracy: 0.2923 - 225s/epoch - 823ms/step
Epoch 67/100
273/273 - 225s - loss: 0.2370 - abs_loss_function: 0.2370 - accuracy: 0.3930 - val_loss: 0.2426 - val_abs_loss_function: 0.2426 - val_accuracy: 0.2692 - 225s/epoch - 825ms/step
Epoch 68/100
273/273 - 224s - loss: 0.2420 - abs_loss_function: 0.2420 - accuracy: 0.3966 - val_loss: 0.2413 - val_abs_loss_function: 0.2413 - val_accuracy: 0.3851 - 224s/epoch - 822ms/step
Epoch 69/100
273/273 - 225s - loss: 0.2473 - abs_loss_function: 0.2473 - accuracy: 0.3452 - val_loss: 0.2556 - val_abs_loss_function: 0.2556 - val_accuracy: 0.3256 - 225s/epoch - 823ms/step
Epoch 70/100
273/273 - 226s - loss: 0.2474 - abs_loss_function: 0.2474 - accuracy: 0.3602 - val_loss: 0.2372 - val_abs_loss_function: 0.2372 - val_accuracy: 0.3760 - 226s/epoch - 828ms/step
Epoch 71/100
273/273 - 225s - loss: 0.2404 - abs_loss_function: 0.2404 - accuracy: 0.3412 - val_loss: 0.2429 - val_abs_loss_function: 0.2429 - val_accuracy: 0.3206 - 225s/epoch - 823ms/step
Epoch 72/100
273/273 - 224s - loss: 0.2416 - abs_loss_function: 0.2416 - accuracy: 0.3221 - val_loss: 0.2443 - val_abs_loss_function: 0.2443 - val_accuracy: 0.4183 - 224s/epoch - 821ms/step
Epoch 73/100
273/273 - 224s - loss: 0.2415 - abs_loss_function: 0.2415 - accuracy: 0.3602 - val_loss: 0.2505 - val_abs_loss_function: 0.2505 - val_accuracy: 0.2984 - 224s/epoch - 821ms/step
Epoch 74/100
273/273 - 224s - loss: 0.2528 - abs_loss_function: 0.2528 - accuracy: 0.3305 - val_loss: 0.2734 - val_abs_loss_function: 0.2734 - val_accuracy: 0.3750 - 224s/epoch - 819ms/step
Epoch 75/100
273/273 - 225s - loss: 0.2406 - abs_loss_function: 0.2406 - accuracy: 0.3156 - val_loss: 0.2456 - val_abs_loss_function: 0.2456 - val_accuracy: 0.2933 - 225s/epoch - 823ms/step
Epoch 76/100
273/273 - 225s - loss: 0.2504 - abs_loss_function: 0.2504 - accuracy: 0.3603 - val_loss: 0.2367 - val_abs_loss_function: 0.2367 - val_accuracy: 0.2611 - 225s/epoch - 825ms/step
Epoch 77/100
273/273 - 224s - loss: 0.2403 - abs_loss_function: 0.2403 - accuracy: 0.2956 - val_loss: 0.2396 - val_abs_loss_function: 0.2396 - val_accuracy: 0.3861 - 224s/epoch - 820ms/step
Epoch 78/100
273/273 - 223s - loss: 0.2451 - abs_loss_function: 0.2451 - accuracy: 0.3109 - val_loss: 0.2386 - val_abs_loss_function: 0.2386 - val_accuracy: 0.3599 - 223s/epoch - 819ms/step
Epoch 79/100
273/273 - 225s - loss: 0.2481 - abs_loss_function: 0.2481 - accuracy: 0.3476 - val_loss: 0.2637 - val_abs_loss_function: 0.2637 - val_accuracy: 0.3528 - 225s/epoch - 826ms/step
Epoch 80/100
273/273 - 224s - loss: 0.2511 - abs_loss_function: 0.2511 - accuracy: 0.3479 - val_loss: 0.2517 - val_abs_loss_function: 0.2517 - val_accuracy: 0.3165 - 224s/epoch - 819ms/step
Epoch 81/100
User defined signal 2

------------------------------------------------------------
Sender: LSF System <lsfadmin@hpc.dtu.dk>
Subject: Job 15232370: <s202741-train> in cluster <dcc> Exited

Job <s202741-train> was submitted from host <n-62-20-1> by user <s202741> in cluster <dcc> at Sun Jan 22 12:32:40 2023
Job was executed on host(s) <4*n-62-20-11>, in queue <gpuv100>, as user <s202741> in cluster <dcc> at Mon Jan 23 16:25:45 2023
</zhome/ab/7/153983> was used as the home directory.
</zhome/ab/7/153983/project/scripts> was used as the working directory.
Started at Mon Jan 23 16:25:45 2023
Terminated at Mon Jan 23 21:27:28 2023
Results reported at Mon Jan 23 21:27:28 2023

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#!/bin/bash
### General options
### -- specify queue --   NOTE: TitanX is significantly faster than K80
#BSUB -q gpuv100
#BSUB -gpu "num=1:mode=exclusive_process"
### -- set the job Name --
#BSUB -J s202741-train
### -- ask for number of cores (default: 1) --
#BSUB -n 4
#BSUB -R "span[hosts=1]"
### -- set walltime limit: hh:mm --  maximum 24 hours for GPU-queues right now
#BSUB -W 5:00
# request 5GB of memory
#BSUB -R "rusage[mem=5GB]"
### -- Specify the output and error file. %J is the job-id --
### -- -o and -e mean append, -oo and -eo mean overwrite --
#BSUB -o iter6/Logs/RMSprop_abs_loss_function_00005_model_g_%J.out
# -- end of LSF options --

# Necessary modules
cd ..
source venv/bin/activate

python trainModelIter3.py 100 "RMSprop(learning_rate=0.0005)" "abs_loss_function" "black_background_500x500.csv" 2 "RMSprop_abs_loss_function_00005_model_g_" "iter6" "load_model_g"

    
------------------------------------------------------------

TERM_RUNLIMIT: job killed after reaching LSF run time limit.
Exited with exit code 140.

Resource usage summary:

    CPU time :                                   21775.00 sec.
    Max Memory :                                 3019 MB
    Average Memory :                             2918.35 MB
    Total Requested Memory :                     20480.00 MB
    Delta Memory :                               17461.00 MB
    Max Swap :                                   -
    Max Processes :                              4
    Max Threads :                                33
    Run time :                                   18104 sec.
    Turnaround time :                            118488 sec.

The output (if any) is above this job summary.

