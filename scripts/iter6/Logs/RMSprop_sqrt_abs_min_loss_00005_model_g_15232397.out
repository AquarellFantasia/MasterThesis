Loaded dependency [python3/3.10.7]: gcc/11.3.0-binutils-2.38
Loaded module: python3/3.10.7

Loading python3/3.10.7
  Loading requirement: gcc/11.3.0-binutils-2.38
Loaded module: cuda/11.6
Loaded module: cudnn/v8.3.2.44-prod-cuda-11.X
2023-01-24 16:27:11.786818: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F AVX512_VNNI FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2023-01-24 16:27:11.954373: I tensorflow/core/util/port.cc:104] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2023-01-24 16:27:13.811819: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer.so.7'; dlerror: libnvinfer.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /appl/cudnn/v8.3.2.44-prod-cuda-11.5/lib:/appl/cuda/11.6.0/lib64:/appl/python/3.10.7/lib:/appl/gcc/11.3.0-binutils-2.38/lib64:/appl/gcc/11.3.0-binutils-2.38/lib:/lsf/10.1/linux3.10-glibc2.17-x86_64/lib
2023-01-24 16:27:13.812512: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer_plugin.so.7'; dlerror: libnvinfer_plugin.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /appl/cudnn/v8.3.2.44-prod-cuda-11.5/lib:/appl/cuda/11.6.0/lib64:/appl/python/3.10.7/lib:/appl/gcc/11.3.0-binutils-2.38/lib64:/appl/gcc/11.3.0-binutils-2.38/lib:/lsf/10.1/linux3.10-glibc2.17-x86_64/lib
2023-01-24 16:27:13.812539: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Cannot dlopen some TensorRT libraries. If you would like to use Nvidia GPU with TensorRT, please make sure the missing libraries mentioned above are installed properly.
2023-01-24 16:27:17.943975: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F AVX512_VNNI FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2023-01-24 16:27:18.621083: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1613] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 30960 MB memory:  -> device: 0, name: Tesla V100-PCIE-32GB, pci bus id: 0000:58:00.0, compute capability: 7.0
Epochs:  100
Optimizer:  RMSprop(learning_rate=0.0005)
Loss function name:  sqrt_abs_min_loss
Csv file used:  black_background_500x500.csv
Verbose:  2
Unique name:  RMSprop_sqrt_abs_min_loss_00005_model_g_
Output folder:  iter6
Model name:  load_model_g
 
        ################ MODEL ############### 

        inputs = keras.Input(shape=(input_size, input_size, 1))
        x = layers.Conv2D(filters=64, kernel_size=11, activation="relu")(inputs)
        x = layers.Conv2D(filters=64, kernel_size=11, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=5, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=5, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Flatten()(x)
        x = layers.Dense(210, activation="relu")(x)
        x = layers.Dense(64, activation="relu")(x)
        x = layers.Dense(16, activation="sigmoid")(x)
        outputs = layers.Dense(3)(x)

        model = keras.Model(inputs=inputs, outputs=outputs)
    
Model: "model"
_________________________________________________________________
 Layer (type)                Output Shape              Param #   
=================================================================
 input_1 (InputLayer)        [(None, 500, 500, 1)]     0         
                                                                 
 conv2d (Conv2D)             (None, 490, 490, 64)      7808      
                                                                 
 conv2d_1 (Conv2D)           (None, 480, 480, 64)      495680    
                                                                 
 max_pooling2d (MaxPooling2D  (None, 240, 240, 64)     0         
 )                                                               
                                                                 
 conv2d_2 (Conv2D)           (None, 236, 236, 64)      102464    
                                                                 
 conv2d_3 (Conv2D)           (None, 232, 232, 64)      102464    
                                                                 
 max_pooling2d_1 (MaxPooling  (None, 116, 116, 64)     0         
 2D)                                                             
                                                                 
 conv2d_4 (Conv2D)           (None, 114, 114, 64)      36928     
                                                                 
 conv2d_5 (Conv2D)           (None, 112, 112, 64)      36928     
                                                                 
 max_pooling2d_2 (MaxPooling  (None, 56, 56, 64)       0         
 2D)                                                             
                                                                 
 conv2d_6 (Conv2D)           (None, 54, 54, 64)        36928     
                                                                 
 conv2d_7 (Conv2D)           (None, 52, 52, 64)        36928     
                                                                 
 max_pooling2d_3 (MaxPooling  (None, 26, 26, 64)       0         
 2D)                                                             
                                                                 
 conv2d_8 (Conv2D)           (None, 24, 24, 64)        36928     
                                                                 
 conv2d_9 (Conv2D)           (None, 22, 22, 64)        36928     
                                                                 
 max_pooling2d_4 (MaxPooling  (None, 11, 11, 64)       0         
 2D)                                                             
                                                                 
 conv2d_10 (Conv2D)          (None, 9, 9, 64)          36928     
                                                                 
 conv2d_11 (Conv2D)          (None, 7, 7, 64)          36928     
                                                                 
 max_pooling2d_5 (MaxPooling  (None, 3, 3, 64)         0         
 2D)                                                             
                                                                 
 flatten (Flatten)           (None, 576)               0         
                                                                 
 dense (Dense)               (None, 210)               121170    
                                                                 
 dense_1 (Dense)             (None, 64)                13504     
                                                                 
 dense_2 (Dense)             (None, 16)                1040      
                                                                 
 dense_3 (Dense)             (None, 3)                 51        
                                                                 
=================================================================
Total params: 1,139,605
Trainable params: 1,139,605
Non-trainable params: 0
_________________________________________________________________
/zhome/ab/7/153983/project/venv/lib/python3.10/site-packages/keras/utils/image_utils.py:409: UserWarning: grayscale is deprecated. Please use color_mode = "grayscale"
  warnings.warn(
Epoch 1/100
2023-01-24 16:27:22.331599: I tensorflow/compiler/xla/stream_executor/cuda/cuda_dnn.cc:428] Loaded cuDNN version 8302
273/273 - 269s - loss: 0.4760 - sqrt_abs_min_loss: 0.4760 - accuracy: 0.2833 - val_loss: 0.4549 - val_sqrt_abs_min_loss: 0.4549 - val_accuracy: 0.3558 - 269s/epoch - 987ms/step
Epoch 2/100
273/273 - 240s - loss: 0.4699 - sqrt_abs_min_loss: 0.4699 - accuracy: 0.3201 - val_loss: 0.4659 - val_sqrt_abs_min_loss: 0.4659 - val_accuracy: 0.4062 - 240s/epoch - 879ms/step
Epoch 3/100
273/273 - 240s - loss: 0.4619 - sqrt_abs_min_loss: 0.4619 - accuracy: 0.3591 - val_loss: 0.4911 - val_sqrt_abs_min_loss: 0.4911 - val_accuracy: 0.3427 - 240s/epoch - 881ms/step
Epoch 4/100
273/273 - 240s - loss: 0.4692 - sqrt_abs_min_loss: 0.4692 - accuracy: 0.2993 - val_loss: 0.4843 - val_sqrt_abs_min_loss: 0.4843 - val_accuracy: 0.3105 - 240s/epoch - 881ms/step
Epoch 5/100
273/273 - 240s - loss: 0.4652 - sqrt_abs_min_loss: 0.4652 - accuracy: 0.3226 - val_loss: 0.4823 - val_sqrt_abs_min_loss: 0.4823 - val_accuracy: 0.2923 - 240s/epoch - 880ms/step
Epoch 6/100
273/273 - 240s - loss: 0.4701 - sqrt_abs_min_loss: 0.4701 - accuracy: 0.3620 - val_loss: 0.4874 - val_sqrt_abs_min_loss: 0.4874 - val_accuracy: 0.2661 - 240s/epoch - 881ms/step
Epoch 7/100
273/273 - 240s - loss: 0.4595 - sqrt_abs_min_loss: 0.4595 - accuracy: 0.3070 - val_loss: 0.4618 - val_sqrt_abs_min_loss: 0.4618 - val_accuracy: 0.3458 - 240s/epoch - 881ms/step
Epoch 8/100
273/273 - 241s - loss: 0.4617 - sqrt_abs_min_loss: 0.4617 - accuracy: 0.3310 - val_loss: 0.4747 - val_sqrt_abs_min_loss: 0.4747 - val_accuracy: 0.3286 - 241s/epoch - 881ms/step
Epoch 9/100
273/273 - 240s - loss: 0.4644 - sqrt_abs_min_loss: 0.4644 - accuracy: 0.3766 - val_loss: 0.4744 - val_sqrt_abs_min_loss: 0.4744 - val_accuracy: 0.2036 - 240s/epoch - 880ms/step
Epoch 10/100
273/273 - 240s - loss: 0.4687 - sqrt_abs_min_loss: 0.4687 - accuracy: 0.3897 - val_loss: 0.4761 - val_sqrt_abs_min_loss: 0.4761 - val_accuracy: 0.2823 - 240s/epoch - 881ms/step
Epoch 11/100
273/273 - 241s - loss: 0.4714 - sqrt_abs_min_loss: 0.4714 - accuracy: 0.3614 - val_loss: 0.4743 - val_sqrt_abs_min_loss: 0.4743 - val_accuracy: 0.3538 - 241s/epoch - 882ms/step
Epoch 12/100
273/273 - 240s - loss: 0.4690 - sqrt_abs_min_loss: 0.4690 - accuracy: 0.3148 - val_loss: 0.4716 - val_sqrt_abs_min_loss: 0.4716 - val_accuracy: 0.3054 - 240s/epoch - 879ms/step
Epoch 13/100
273/273 - 240s - loss: 0.4698 - sqrt_abs_min_loss: 0.4698 - accuracy: 0.3542 - val_loss: 0.4581 - val_sqrt_abs_min_loss: 0.4581 - val_accuracy: 0.3317 - 240s/epoch - 880ms/step
Epoch 14/100
273/273 - 241s - loss: 0.4502 - sqrt_abs_min_loss: 0.4502 - accuracy: 0.3415 - val_loss: 0.4611 - val_sqrt_abs_min_loss: 0.4611 - val_accuracy: 0.4103 - 241s/epoch - 881ms/step
Epoch 15/100
273/273 - 241s - loss: 0.4763 - sqrt_abs_min_loss: 0.4763 - accuracy: 0.2953 - val_loss: 0.4699 - val_sqrt_abs_min_loss: 0.4699 - val_accuracy: 0.4536 - 241s/epoch - 883ms/step
Epoch 16/100
273/273 - 240s - loss: 0.4638 - sqrt_abs_min_loss: 0.4638 - accuracy: 0.3346 - val_loss: 0.4818 - val_sqrt_abs_min_loss: 0.4818 - val_accuracy: 0.3125 - 240s/epoch - 881ms/step
Epoch 17/100
273/273 - 240s - loss: 0.4568 - sqrt_abs_min_loss: 0.4568 - accuracy: 0.3284 - val_loss: 0.4699 - val_sqrt_abs_min_loss: 0.4699 - val_accuracy: 0.4294 - 240s/epoch - 879ms/step
Epoch 18/100
273/273 - 241s - loss: 0.4655 - sqrt_abs_min_loss: 0.4655 - accuracy: 0.2811 - val_loss: 0.4760 - val_sqrt_abs_min_loss: 0.4760 - val_accuracy: 0.3054 - 241s/epoch - 881ms/step
Epoch 19/100
273/273 - 240s - loss: 0.4656 - sqrt_abs_min_loss: 0.4656 - accuracy: 0.3036 - val_loss: 0.4704 - val_sqrt_abs_min_loss: 0.4704 - val_accuracy: 0.3690 - 240s/epoch - 879ms/step
Epoch 20/100
273/273 - 241s - loss: 0.4723 - sqrt_abs_min_loss: 0.4723 - accuracy: 0.3336 - val_loss: 0.4805 - val_sqrt_abs_min_loss: 0.4805 - val_accuracy: 0.3004 - 241s/epoch - 882ms/step
Epoch 21/100
273/273 - 240s - loss: 0.4641 - sqrt_abs_min_loss: 0.4641 - accuracy: 0.3494 - val_loss: 0.4546 - val_sqrt_abs_min_loss: 0.4546 - val_accuracy: 0.2782 - 240s/epoch - 880ms/step
Epoch 22/100
273/273 - 240s - loss: 0.4598 - sqrt_abs_min_loss: 0.4598 - accuracy: 0.3209 - val_loss: 0.4631 - val_sqrt_abs_min_loss: 0.4631 - val_accuracy: 0.3206 - 240s/epoch - 879ms/step
Epoch 23/100
273/273 - 240s - loss: 0.4690 - sqrt_abs_min_loss: 0.4690 - accuracy: 0.3408 - val_loss: 0.4790 - val_sqrt_abs_min_loss: 0.4790 - val_accuracy: 0.3427 - 240s/epoch - 879ms/step
Epoch 24/100
273/273 - 241s - loss: 0.4633 - sqrt_abs_min_loss: 0.4633 - accuracy: 0.3726 - val_loss: 0.4945 - val_sqrt_abs_min_loss: 0.4945 - val_accuracy: 0.4284 - 241s/epoch - 881ms/step
Epoch 25/100
273/273 - 240s - loss: 0.4715 - sqrt_abs_min_loss: 0.4715 - accuracy: 0.3143 - val_loss: 0.4602 - val_sqrt_abs_min_loss: 0.4602 - val_accuracy: 0.3548 - 240s/epoch - 878ms/step
Epoch 26/100
273/273 - 240s - loss: 0.4708 - sqrt_abs_min_loss: 0.4708 - accuracy: 0.3251 - val_loss: 0.4740 - val_sqrt_abs_min_loss: 0.4740 - val_accuracy: 0.3054 - 240s/epoch - 878ms/step
Epoch 27/100
273/273 - 240s - loss: 0.4644 - sqrt_abs_min_loss: 0.4644 - accuracy: 0.3028 - val_loss: 0.4584 - val_sqrt_abs_min_loss: 0.4584 - val_accuracy: 0.3397 - 240s/epoch - 880ms/step
Epoch 28/100
273/273 - 241s - loss: 0.4720 - sqrt_abs_min_loss: 0.4720 - accuracy: 0.3628 - val_loss: 0.4844 - val_sqrt_abs_min_loss: 0.4844 - val_accuracy: 0.4052 - 241s/epoch - 881ms/step
Epoch 29/100
273/273 - 240s - loss: 0.4654 - sqrt_abs_min_loss: 0.4654 - accuracy: 0.3638 - val_loss: 0.4518 - val_sqrt_abs_min_loss: 0.4518 - val_accuracy: 0.3548 - 240s/epoch - 878ms/step
Epoch 30/100
273/273 - 240s - loss: 0.4670 - sqrt_abs_min_loss: 0.4670 - accuracy: 0.2617 - val_loss: 0.4652 - val_sqrt_abs_min_loss: 0.4652 - val_accuracy: 0.2812 - 240s/epoch - 878ms/step
Epoch 31/100
273/273 - 240s - loss: 0.4526 - sqrt_abs_min_loss: 0.4526 - accuracy: 0.3731 - val_loss: 0.4688 - val_sqrt_abs_min_loss: 0.4688 - val_accuracy: 0.3276 - 240s/epoch - 880ms/step
Epoch 32/100
273/273 - 240s - loss: 0.4655 - sqrt_abs_min_loss: 0.4655 - accuracy: 0.3214 - val_loss: 0.4409 - val_sqrt_abs_min_loss: 0.4409 - val_accuracy: 0.4224 - 240s/epoch - 880ms/step
Epoch 33/100
273/273 - 240s - loss: 0.4705 - sqrt_abs_min_loss: 0.4705 - accuracy: 0.2957 - val_loss: 0.4897 - val_sqrt_abs_min_loss: 0.4897 - val_accuracy: 0.3196 - 240s/epoch - 878ms/step
Epoch 34/100
273/273 - 240s - loss: 0.4599 - sqrt_abs_min_loss: 0.4599 - accuracy: 0.3409 - val_loss: 0.4699 - val_sqrt_abs_min_loss: 0.4699 - val_accuracy: 0.4335 - 240s/epoch - 878ms/step
Epoch 35/100
273/273 - 240s - loss: 0.4609 - sqrt_abs_min_loss: 0.4609 - accuracy: 0.2958 - val_loss: 0.4615 - val_sqrt_abs_min_loss: 0.4615 - val_accuracy: 0.2954 - 240s/epoch - 877ms/step
Epoch 36/100
273/273 - 240s - loss: 0.4652 - sqrt_abs_min_loss: 0.4652 - accuracy: 0.3396 - val_loss: 0.4844 - val_sqrt_abs_min_loss: 0.4844 - val_accuracy: 0.2167 - 240s/epoch - 878ms/step
Epoch 37/100
273/273 - 240s - loss: 0.4609 - sqrt_abs_min_loss: 0.4609 - accuracy: 0.3124 - val_loss: 0.4584 - val_sqrt_abs_min_loss: 0.4584 - val_accuracy: 0.2954 - 240s/epoch - 878ms/step
Epoch 38/100
273/273 - 240s - loss: 0.4561 - sqrt_abs_min_loss: 0.4561 - accuracy: 0.3990 - val_loss: 0.4688 - val_sqrt_abs_min_loss: 0.4688 - val_accuracy: 0.3468 - 240s/epoch - 879ms/step
Epoch 39/100
273/273 - 240s - loss: 0.4666 - sqrt_abs_min_loss: 0.4666 - accuracy: 0.3336 - val_loss: 0.4746 - val_sqrt_abs_min_loss: 0.4746 - val_accuracy: 0.2581 - 240s/epoch - 878ms/step
Epoch 40/100
273/273 - 240s - loss: 0.4697 - sqrt_abs_min_loss: 0.4697 - accuracy: 0.3323 - val_loss: 0.4736 - val_sqrt_abs_min_loss: 0.4736 - val_accuracy: 0.4506 - 240s/epoch - 878ms/step
Epoch 41/100
273/273 - 240s - loss: 0.4697 - sqrt_abs_min_loss: 0.4697 - accuracy: 0.3569 - val_loss: 0.4510 - val_sqrt_abs_min_loss: 0.4510 - val_accuracy: 0.4698 - 240s/epoch - 878ms/step
Epoch 42/100
273/273 - 240s - loss: 0.4734 - sqrt_abs_min_loss: 0.4734 - accuracy: 0.2985 - val_loss: 0.4821 - val_sqrt_abs_min_loss: 0.4821 - val_accuracy: 0.3821 - 240s/epoch - 878ms/step
Epoch 43/100
273/273 - 239s - loss: 0.4599 - sqrt_abs_min_loss: 0.4599 - accuracy: 0.3130 - val_loss: 0.4831 - val_sqrt_abs_min_loss: 0.4831 - val_accuracy: 0.3589 - 239s/epoch - 877ms/step
Epoch 44/100
273/273 - 240s - loss: 0.4627 - sqrt_abs_min_loss: 0.4627 - accuracy: 0.3197 - val_loss: 0.4661 - val_sqrt_abs_min_loss: 0.4661 - val_accuracy: 0.3488 - 240s/epoch - 879ms/step
Epoch 45/100
273/273 - 240s - loss: 0.4693 - sqrt_abs_min_loss: 0.4693 - accuracy: 0.3601 - val_loss: 0.4776 - val_sqrt_abs_min_loss: 0.4776 - val_accuracy: 0.2893 - 240s/epoch - 878ms/step
Epoch 46/100
273/273 - 240s - loss: 0.4617 - sqrt_abs_min_loss: 0.4617 - accuracy: 0.2869 - val_loss: 0.4767 - val_sqrt_abs_min_loss: 0.4767 - val_accuracy: 0.2157 - 240s/epoch - 878ms/step
Epoch 47/100
273/273 - 240s - loss: 0.4629 - sqrt_abs_min_loss: 0.4629 - accuracy: 0.3151 - val_loss: 0.4868 - val_sqrt_abs_min_loss: 0.4868 - val_accuracy: 0.3609 - 240s/epoch - 878ms/step
Epoch 48/100
273/273 - 240s - loss: 0.4669 - sqrt_abs_min_loss: 0.4669 - accuracy: 0.3064 - val_loss: 0.4893 - val_sqrt_abs_min_loss: 0.4893 - val_accuracy: 0.3105 - 240s/epoch - 879ms/step
Epoch 49/100
273/273 - 239s - loss: 0.4561 - sqrt_abs_min_loss: 0.4561 - accuracy: 0.3523 - val_loss: 0.4688 - val_sqrt_abs_min_loss: 0.4688 - val_accuracy: 0.3085 - 239s/epoch - 877ms/step
Epoch 50/100
273/273 - 240s - loss: 0.4703 - sqrt_abs_min_loss: 0.4703 - accuracy: 0.3167 - val_loss: 0.4743 - val_sqrt_abs_min_loss: 0.4743 - val_accuracy: 0.4859 - 240s/epoch - 877ms/step
Epoch 51/100
273/273 - 240s - loss: 0.4608 - sqrt_abs_min_loss: 0.4608 - accuracy: 0.3488 - val_loss: 0.4727 - val_sqrt_abs_min_loss: 0.4727 - val_accuracy: 0.3982 - 240s/epoch - 878ms/step
Epoch 52/100
273/273 - 240s - loss: 0.4671 - sqrt_abs_min_loss: 0.4671 - accuracy: 0.3014 - val_loss: 0.4538 - val_sqrt_abs_min_loss: 0.4538 - val_accuracy: 0.3740 - 240s/epoch - 877ms/step
Epoch 53/100
273/273 - 240s - loss: 0.4679 - sqrt_abs_min_loss: 0.4679 - accuracy: 0.3045 - val_loss: 0.4742 - val_sqrt_abs_min_loss: 0.4742 - val_accuracy: 0.4042 - 240s/epoch - 877ms/step
Epoch 54/100
273/273 - 240s - loss: 0.4687 - sqrt_abs_min_loss: 0.4687 - accuracy: 0.2573 - val_loss: 0.4696 - val_sqrt_abs_min_loss: 0.4696 - val_accuracy: 0.2964 - 240s/epoch - 877ms/step
Epoch 55/100
273/273 - 239s - loss: 0.4753 - sqrt_abs_min_loss: 0.4753 - accuracy: 0.3527 - val_loss: 0.4668 - val_sqrt_abs_min_loss: 0.4668 - val_accuracy: 0.2591 - 239s/epoch - 877ms/step
Epoch 56/100
273/273 - 239s - loss: 0.4721 - sqrt_abs_min_loss: 0.4721 - accuracy: 0.3352 - val_loss: 0.4808 - val_sqrt_abs_min_loss: 0.4808 - val_accuracy: 0.4012 - 239s/epoch - 877ms/step
Epoch 57/100
273/273 - 240s - loss: 0.4649 - sqrt_abs_min_loss: 0.4649 - accuracy: 0.2961 - val_loss: 0.4756 - val_sqrt_abs_min_loss: 0.4756 - val_accuracy: 0.3407 - 240s/epoch - 877ms/step
Epoch 58/100
273/273 - 240s - loss: 0.4628 - sqrt_abs_min_loss: 0.4628 - accuracy: 0.3481 - val_loss: 0.4644 - val_sqrt_abs_min_loss: 0.4644 - val_accuracy: 0.3841 - 240s/epoch - 878ms/step
Epoch 59/100
273/273 - 239s - loss: 0.4636 - sqrt_abs_min_loss: 0.4636 - accuracy: 0.3275 - val_loss: 0.4876 - val_sqrt_abs_min_loss: 0.4876 - val_accuracy: 0.3740 - 239s/epoch - 877ms/step
Epoch 60/100
273/273 - 240s - loss: 0.4733 - sqrt_abs_min_loss: 0.4733 - accuracy: 0.2991 - val_loss: 0.4939 - val_sqrt_abs_min_loss: 0.4939 - val_accuracy: 0.3851 - 240s/epoch - 877ms/step
Epoch 61/100
273/273 - 240s - loss: 0.4661 - sqrt_abs_min_loss: 0.4661 - accuracy: 0.3219 - val_loss: 0.4686 - val_sqrt_abs_min_loss: 0.4686 - val_accuracy: 0.2863 - 240s/epoch - 877ms/step
Epoch 62/100
273/273 - 239s - loss: 0.4631 - sqrt_abs_min_loss: 0.4631 - accuracy: 0.3626 - val_loss: 0.4645 - val_sqrt_abs_min_loss: 0.4645 - val_accuracy: 0.3347 - 239s/epoch - 877ms/step
Epoch 63/100
273/273 - 240s - loss: 0.4587 - sqrt_abs_min_loss: 0.4587 - accuracy: 0.3779 - val_loss: 0.4739 - val_sqrt_abs_min_loss: 0.4739 - val_accuracy: 0.3226 - 240s/epoch - 877ms/step
Epoch 64/100
273/273 - 239s - loss: 0.4779 - sqrt_abs_min_loss: 0.4779 - accuracy: 0.3195 - val_loss: 0.4809 - val_sqrt_abs_min_loss: 0.4809 - val_accuracy: 0.3579 - 239s/epoch - 877ms/step
Epoch 65/100
273/273 - 240s - loss: 0.4642 - sqrt_abs_min_loss: 0.4642 - accuracy: 0.2863 - val_loss: 0.4803 - val_sqrt_abs_min_loss: 0.4803 - val_accuracy: 0.2984 - 240s/epoch - 877ms/step
Epoch 66/100
273/273 - 239s - loss: 0.4693 - sqrt_abs_min_loss: 0.4693 - accuracy: 0.3364 - val_loss: 0.4687 - val_sqrt_abs_min_loss: 0.4687 - val_accuracy: 0.3286 - 239s/epoch - 877ms/step
Epoch 67/100
273/273 - 239s - loss: 0.4766 - sqrt_abs_min_loss: 0.4766 - accuracy: 0.2823 - val_loss: 0.4781 - val_sqrt_abs_min_loss: 0.4781 - val_accuracy: 0.3206 - 239s/epoch - 877ms/step
Epoch 68/100
273/273 - 240s - loss: 0.4746 - sqrt_abs_min_loss: 0.4746 - accuracy: 0.3142 - val_loss: 0.4371 - val_sqrt_abs_min_loss: 0.4371 - val_accuracy: 0.3155 - 240s/epoch - 878ms/step
Epoch 69/100
273/273 - 240s - loss: 0.4623 - sqrt_abs_min_loss: 0.4623 - accuracy: 0.4000 - val_loss: 0.4577 - val_sqrt_abs_min_loss: 0.4577 - val_accuracy: 0.3871 - 240s/epoch - 879ms/step
Epoch 70/100
273/273 - 240s - loss: 0.4712 - sqrt_abs_min_loss: 0.4712 - accuracy: 0.2940 - val_loss: 0.4805 - val_sqrt_abs_min_loss: 0.4805 - val_accuracy: 0.2601 - 240s/epoch - 878ms/step
Epoch 71/100
273/273 - 240s - loss: 0.4666 - sqrt_abs_min_loss: 0.4666 - accuracy: 0.3032 - val_loss: 0.4676 - val_sqrt_abs_min_loss: 0.4676 - val_accuracy: 0.3286 - 240s/epoch - 878ms/step
Epoch 72/100
273/273 - 239s - loss: 0.4682 - sqrt_abs_min_loss: 0.4682 - accuracy: 0.3682 - val_loss: 0.4534 - val_sqrt_abs_min_loss: 0.4534 - val_accuracy: 0.2762 - 239s/epoch - 877ms/step
Epoch 73/100
273/273 - 240s - loss: 0.4664 - sqrt_abs_min_loss: 0.4664 - accuracy: 0.3378 - val_loss: 0.4620 - val_sqrt_abs_min_loss: 0.4620 - val_accuracy: 0.1683 - 240s/epoch - 878ms/step
Epoch 74/100
273/273 - 240s - loss: 0.4616 - sqrt_abs_min_loss: 0.4616 - accuracy: 0.3107 - val_loss: 0.4892 - val_sqrt_abs_min_loss: 0.4892 - val_accuracy: 0.1472 - 240s/epoch - 878ms/step
Epoch 75/100
User defined signal 2

------------------------------------------------------------
Sender: LSF System <lsfadmin@hpc.dtu.dk>
Subject: Job 15232397: <s202741-train> in cluster <dcc> Exited

Job <s202741-train> was submitted from host <n-62-20-1> by user <s202741> in cluster <dcc> at Sun Jan 22 12:32:48 2023
Job was executed on host(s) <4*n-62-11-14>, in queue <gpuv100>, as user <s202741> in cluster <dcc> at Tue Jan 24 16:27:07 2023
</zhome/ab/7/153983> was used as the home directory.
</zhome/ab/7/153983/project/scripts> was used as the working directory.
Started at Tue Jan 24 16:27:07 2023
Terminated at Tue Jan 24 21:27:20 2023
Results reported at Tue Jan 24 21:27:20 2023

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#!/bin/bash
### General options
### -- specify queue --   NOTE: TitanX is significantly faster than K80
#BSUB -q gpuv100
#BSUB -gpu "num=1:mode=exclusive_process"
### -- set the job Name --
#BSUB -J s202741-train
### -- ask for number of cores (default: 1) --
#BSUB -n 4
#BSUB -R "span[hosts=1]"
### -- set walltime limit: hh:mm --  maximum 24 hours for GPU-queues right now
#BSUB -W 5:00
# request 5GB of memory
#BSUB -R "rusage[mem=5GB]"
### -- Specify the output and error file. %J is the job-id --
### -- -o and -e mean append, -oo and -eo mean overwrite --
#BSUB -o iter6/Logs/RMSprop_sqrt_abs_min_loss_00005_model_g_%J.out
# -- end of LSF options --

# Necessary modules
cd ..
source venv/bin/activate

python trainModelIter3.py 100 "RMSprop(learning_rate=0.0005)" "sqrt_abs_min_loss" "black_background_500x500.csv" 2 "RMSprop_sqrt_abs_min_loss_00005_model_g_" "iter6" "load_model_g"

    
------------------------------------------------------------

TERM_RUNLIMIT: job killed after reaching LSF run time limit.
Exited with exit code 140.

Resource usage summary:

    CPU time :                                   21118.00 sec.
    Max Memory :                                 3124 MB
    Average Memory :                             2960.97 MB
    Total Requested Memory :                     20480.00 MB
    Delta Memory :                               17356.00 MB
    Max Swap :                                   -
    Max Processes :                              4
    Max Threads :                                33
    Run time :                                   18014 sec.
    Turnaround time :                            204872 sec.

The output (if any) is above this job summary.

