Loaded dependency [python3/3.10.7]: gcc/11.3.0-binutils-2.38
Loaded module: python3/3.10.7

Loading python3/3.10.7
  Loading requirement: gcc/11.3.0-binutils-2.38
Loaded module: cuda/11.6
Loaded module: cudnn/v8.3.2.44-prod-cuda-11.X
2023-01-23 19:18:50.833670: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2023-01-23 19:18:55.030660: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer.so.7'; dlerror: libnvinfer.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /appl/cudnn/v8.3.2.44-prod-cuda-11.5/lib:/appl/cuda/11.6.0/lib64:/appl/python/3.10.7/lib:/appl/gcc/11.3.0-binutils-2.38/lib64:/appl/gcc/11.3.0-binutils-2.38/lib:/lsf/10.1/linux3.10-glibc2.17-x86_64/lib
2023-01-23 19:18:55.031320: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer_plugin.so.7'; dlerror: libnvinfer_plugin.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /appl/cudnn/v8.3.2.44-prod-cuda-11.5/lib:/appl/cuda/11.6.0/lib64:/appl/python/3.10.7/lib:/appl/gcc/11.3.0-binutils-2.38/lib64:/appl/gcc/11.3.0-binutils-2.38/lib:/lsf/10.1/linux3.10-glibc2.17-x86_64/lib
2023-01-23 19:18:55.031333: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Cannot dlopen some TensorRT libraries. If you would like to use Nvidia GPU with TensorRT, please make sure the missing libraries mentioned above are installed properly.
2023-01-23 19:18:58.203527: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2023-01-23 19:18:58.864731: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1613] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 30961 MB memory:  -> device: 0, name: Tesla V100-SXM2-32GB, pci bus id: 0000:3b:00.0, compute capability: 7.0
Epochs:  100
Optimizer:  RMSprop(learning_rate=0.002)
Loss function name:  abs_loss_function
Csv file used:  black_background_500x500.csv
Verbose:  2
Unique name:  RMSprop_abs_loss_function_0002_model_g_
Output folder:  iter6
Model name:  load_model_g
 
        ################ MODEL ############### 

        inputs = keras.Input(shape=(input_size, input_size, 1))
        x = layers.Conv2D(filters=64, kernel_size=11, activation="relu")(inputs)
        x = layers.Conv2D(filters=64, kernel_size=11, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=5, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=5, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Flatten()(x)
        x = layers.Dense(210, activation="relu")(x)
        x = layers.Dense(64, activation="relu")(x)
        x = layers.Dense(16, activation="sigmoid")(x)
        outputs = layers.Dense(3)(x)

        model = keras.Model(inputs=inputs, outputs=outputs)
    
Model: "model"
_________________________________________________________________
 Layer (type)                Output Shape              Param #   
=================================================================
 input_1 (InputLayer)        [(None, 500, 500, 1)]     0         
                                                                 
 conv2d (Conv2D)             (None, 490, 490, 64)      7808      
                                                                 
 conv2d_1 (Conv2D)           (None, 480, 480, 64)      495680    
                                                                 
 max_pooling2d (MaxPooling2D  (None, 240, 240, 64)     0         
 )                                                               
                                                                 
 conv2d_2 (Conv2D)           (None, 236, 236, 64)      102464    
                                                                 
 conv2d_3 (Conv2D)           (None, 232, 232, 64)      102464    
                                                                 
 max_pooling2d_1 (MaxPooling  (None, 116, 116, 64)     0         
 2D)                                                             
                                                                 
 conv2d_4 (Conv2D)           (None, 114, 114, 64)      36928     
                                                                 
 conv2d_5 (Conv2D)           (None, 112, 112, 64)      36928     
                                                                 
 max_pooling2d_2 (MaxPooling  (None, 56, 56, 64)       0         
 2D)                                                             
                                                                 
 conv2d_6 (Conv2D)           (None, 54, 54, 64)        36928     
                                                                 
 conv2d_7 (Conv2D)           (None, 52, 52, 64)        36928     
                                                                 
 max_pooling2d_3 (MaxPooling  (None, 26, 26, 64)       0         
 2D)                                                             
                                                                 
 conv2d_8 (Conv2D)           (None, 24, 24, 64)        36928     
                                                                 
 conv2d_9 (Conv2D)           (None, 22, 22, 64)        36928     
                                                                 
 max_pooling2d_4 (MaxPooling  (None, 11, 11, 64)       0         
 2D)                                                             
                                                                 
 conv2d_10 (Conv2D)          (None, 9, 9, 64)          36928     
                                                                 
 conv2d_11 (Conv2D)          (None, 7, 7, 64)          36928     
                                                                 
 max_pooling2d_5 (MaxPooling  (None, 3, 3, 64)         0         
 2D)                                                             
                                                                 
 flatten (Flatten)           (None, 576)               0         
                                                                 
 dense (Dense)               (None, 210)               121170    
                                                                 
 dense_1 (Dense)             (None, 64)                13504     
                                                                 
 dense_2 (Dense)             (None, 16)                1040      
                                                                 
 dense_3 (Dense)             (None, 3)                 51        
                                                                 
=================================================================
Total params: 1,139,605
Trainable params: 1,139,605
Non-trainable params: 0
_________________________________________________________________
/zhome/ab/7/153983/project/venv/lib/python3.10/site-packages/keras/utils/image_utils.py:409: UserWarning: grayscale is deprecated. Please use color_mode = "grayscale"
  warnings.warn(
Epoch 1/100
2023-01-23 19:19:02.065581: I tensorflow/compiler/xla/stream_executor/cuda/cuda_dnn.cc:428] Loaded cuDNN version 8302
273/273 - 249s - loss: 0.2514 - abs_loss_function: 0.2514 - accuracy: 0.2849 - val_loss: 0.2449 - val_abs_loss_function: 0.2449 - val_accuracy: 0.3558 - 249s/epoch - 912ms/step
Epoch 2/100
273/273 - 225s - loss: 0.2411 - abs_loss_function: 0.2411 - accuracy: 0.3637 - val_loss: 0.2461 - val_abs_loss_function: 0.2461 - val_accuracy: 0.3488 - 225s/epoch - 823ms/step
Epoch 3/100
273/273 - 226s - loss: 0.2441 - abs_loss_function: 0.2441 - accuracy: 0.3504 - val_loss: 0.2464 - val_abs_loss_function: 0.2464 - val_accuracy: 0.3085 - 226s/epoch - 827ms/step
Epoch 4/100
273/273 - 225s - loss: 0.2375 - abs_loss_function: 0.2375 - accuracy: 0.2735 - val_loss: 0.2404 - val_abs_loss_function: 0.2404 - val_accuracy: 0.2752 - 225s/epoch - 823ms/step
Epoch 5/100
273/273 - 222s - loss: 0.2434 - abs_loss_function: 0.2434 - accuracy: 0.3156 - val_loss: 0.2580 - val_abs_loss_function: 0.2580 - val_accuracy: 0.3065 - 222s/epoch - 815ms/step
Epoch 6/100
273/273 - 225s - loss: 0.2435 - abs_loss_function: 0.2435 - accuracy: 0.3243 - val_loss: 0.2423 - val_abs_loss_function: 0.2423 - val_accuracy: 0.3196 - 225s/epoch - 824ms/step
Epoch 7/100
273/273 - 227s - loss: 0.2471 - abs_loss_function: 0.2471 - accuracy: 0.2886 - val_loss: 0.2467 - val_abs_loss_function: 0.2467 - val_accuracy: 0.3619 - 227s/epoch - 831ms/step
Epoch 8/100
273/273 - 223s - loss: 0.2348 - abs_loss_function: 0.2348 - accuracy: 0.3017 - val_loss: 0.2625 - val_abs_loss_function: 0.2625 - val_accuracy: 0.2379 - 223s/epoch - 819ms/step
Epoch 9/100
273/273 - 225s - loss: 0.2452 - abs_loss_function: 0.2452 - accuracy: 0.2752 - val_loss: 0.2476 - val_abs_loss_function: 0.2476 - val_accuracy: 0.2903 - 225s/epoch - 825ms/step
Epoch 10/100
273/273 - 225s - loss: 0.2460 - abs_loss_function: 0.2460 - accuracy: 0.3217 - val_loss: 0.2512 - val_abs_loss_function: 0.2512 - val_accuracy: 0.2994 - 225s/epoch - 823ms/step
Epoch 11/100
273/273 - 225s - loss: 0.2418 - abs_loss_function: 0.2418 - accuracy: 0.3466 - val_loss: 0.2439 - val_abs_loss_function: 0.2439 - val_accuracy: 0.2419 - 225s/epoch - 822ms/step
Epoch 12/100
273/273 - 225s - loss: 0.2448 - abs_loss_function: 0.2448 - accuracy: 0.3222 - val_loss: 0.2566 - val_abs_loss_function: 0.2566 - val_accuracy: 0.4083 - 225s/epoch - 825ms/step
Epoch 13/100
273/273 - 223s - loss: 0.2466 - abs_loss_function: 0.2466 - accuracy: 0.3312 - val_loss: 0.2494 - val_abs_loss_function: 0.2494 - val_accuracy: 0.3700 - 223s/epoch - 816ms/step
Epoch 14/100
273/273 - 226s - loss: 0.2413 - abs_loss_function: 0.2413 - accuracy: 0.3193 - val_loss: 0.2577 - val_abs_loss_function: 0.2577 - val_accuracy: 0.2944 - 226s/epoch - 829ms/step
Epoch 15/100
273/273 - 225s - loss: 0.2420 - abs_loss_function: 0.2420 - accuracy: 0.2934 - val_loss: 0.2273 - val_abs_loss_function: 0.2273 - val_accuracy: 0.2833 - 225s/epoch - 825ms/step
Epoch 16/100
273/273 - 223s - loss: 0.2482 - abs_loss_function: 0.2482 - accuracy: 0.3554 - val_loss: 0.2602 - val_abs_loss_function: 0.2602 - val_accuracy: 0.2812 - 223s/epoch - 816ms/step
Epoch 17/100
273/273 - 225s - loss: 0.2396 - abs_loss_function: 0.2396 - accuracy: 0.3091 - val_loss: 0.2612 - val_abs_loss_function: 0.2612 - val_accuracy: 0.3821 - 225s/epoch - 823ms/step
Epoch 18/100
273/273 - 227s - loss: 0.2432 - abs_loss_function: 0.2432 - accuracy: 0.3173 - val_loss: 0.2489 - val_abs_loss_function: 0.2489 - val_accuracy: 0.2984 - 227s/epoch - 831ms/step
Epoch 19/100
273/273 - 224s - loss: 0.2473 - abs_loss_function: 0.2473 - accuracy: 0.3519 - val_loss: 0.2434 - val_abs_loss_function: 0.2434 - val_accuracy: 0.2954 - 224s/epoch - 821ms/step
Epoch 20/100
273/273 - 223s - loss: 0.2365 - abs_loss_function: 0.2365 - accuracy: 0.3119 - val_loss: 0.2411 - val_abs_loss_function: 0.2411 - val_accuracy: 0.2440 - 223s/epoch - 818ms/step
Epoch 21/100
273/273 - 225s - loss: 0.2402 - abs_loss_function: 0.2402 - accuracy: 0.3910 - val_loss: 0.2562 - val_abs_loss_function: 0.2562 - val_accuracy: 0.3972 - 225s/epoch - 824ms/step
Epoch 22/100
273/273 - 225s - loss: 0.2506 - abs_loss_function: 0.2506 - accuracy: 0.3751 - val_loss: 0.2372 - val_abs_loss_function: 0.2372 - val_accuracy: 0.4234 - 225s/epoch - 824ms/step
Epoch 23/100
273/273 - 225s - loss: 0.2417 - abs_loss_function: 0.2417 - accuracy: 0.3444 - val_loss: 0.2559 - val_abs_loss_function: 0.2559 - val_accuracy: 0.4405 - 225s/epoch - 824ms/step
Epoch 24/100
273/273 - 223s - loss: 0.2408 - abs_loss_function: 0.2408 - accuracy: 0.3962 - val_loss: 0.2623 - val_abs_loss_function: 0.2623 - val_accuracy: 0.3125 - 223s/epoch - 816ms/step
Epoch 25/100
273/273 - 226s - loss: 0.2393 - abs_loss_function: 0.2393 - accuracy: 0.3731 - val_loss: 0.2476 - val_abs_loss_function: 0.2476 - val_accuracy: 0.3800 - 226s/epoch - 828ms/step
Epoch 26/100
273/273 - 224s - loss: 0.2431 - abs_loss_function: 0.2431 - accuracy: 0.3363 - val_loss: 0.2716 - val_abs_loss_function: 0.2716 - val_accuracy: 0.3407 - 224s/epoch - 822ms/step
Epoch 27/100
273/273 - 223s - loss: 0.2385 - abs_loss_function: 0.2385 - accuracy: 0.3108 - val_loss: 0.2410 - val_abs_loss_function: 0.2410 - val_accuracy: 0.2429 - 223s/epoch - 816ms/step
Epoch 28/100
273/273 - 225s - loss: 0.2364 - abs_loss_function: 0.2364 - accuracy: 0.2911 - val_loss: 0.2374 - val_abs_loss_function: 0.2374 - val_accuracy: 0.2933 - 225s/epoch - 824ms/step
Epoch 29/100
273/273 - 225s - loss: 0.2385 - abs_loss_function: 0.2385 - accuracy: 0.3163 - val_loss: 0.2585 - val_abs_loss_function: 0.2585 - val_accuracy: 0.3881 - 225s/epoch - 825ms/step
Epoch 30/100
273/273 - 225s - loss: 0.2465 - abs_loss_function: 0.2465 - accuracy: 0.3332 - val_loss: 0.2597 - val_abs_loss_function: 0.2597 - val_accuracy: 0.2601 - 225s/epoch - 825ms/step
Epoch 31/100
273/273 - 223s - loss: 0.2456 - abs_loss_function: 0.2456 - accuracy: 0.3162 - val_loss: 0.2476 - val_abs_loss_function: 0.2476 - val_accuracy: 0.2268 - 223s/epoch - 817ms/step
Epoch 32/100
273/273 - 227s - loss: 0.2374 - abs_loss_function: 0.2374 - accuracy: 0.3314 - val_loss: 0.2609 - val_abs_loss_function: 0.2609 - val_accuracy: 0.2288 - 227s/epoch - 832ms/step
Epoch 33/100
273/273 - 224s - loss: 0.2393 - abs_loss_function: 0.2393 - accuracy: 0.3070 - val_loss: 0.2343 - val_abs_loss_function: 0.2343 - val_accuracy: 0.3387 - 224s/epoch - 821ms/step
Epoch 34/100
273/273 - 224s - loss: 0.2393 - abs_loss_function: 0.2393 - accuracy: 0.3156 - val_loss: 0.2732 - val_abs_loss_function: 0.2732 - val_accuracy: 0.3115 - 224s/epoch - 821ms/step
Epoch 35/100
273/273 - 223s - loss: 0.2394 - abs_loss_function: 0.2394 - accuracy: 0.3118 - val_loss: 0.2410 - val_abs_loss_function: 0.2410 - val_accuracy: 0.2571 - 223s/epoch - 816ms/step
Epoch 36/100
273/273 - 225s - loss: 0.2432 - abs_loss_function: 0.2432 - accuracy: 0.3262 - val_loss: 0.2590 - val_abs_loss_function: 0.2590 - val_accuracy: 0.3558 - 225s/epoch - 822ms/step
Epoch 37/100
273/273 - 225s - loss: 0.2426 - abs_loss_function: 0.2426 - accuracy: 0.3543 - val_loss: 0.2520 - val_abs_loss_function: 0.2520 - val_accuracy: 0.2823 - 225s/epoch - 823ms/step
Epoch 38/100
273/273 - 223s - loss: 0.2420 - abs_loss_function: 0.2420 - accuracy: 0.3563 - val_loss: 0.2288 - val_abs_loss_function: 0.2288 - val_accuracy: 0.2480 - 223s/epoch - 818ms/step
Epoch 39/100
273/273 - 225s - loss: 0.2370 - abs_loss_function: 0.2370 - accuracy: 0.3188 - val_loss: 0.2453 - val_abs_loss_function: 0.2453 - val_accuracy: 0.2500 - 225s/epoch - 825ms/step
Epoch 40/100
273/273 - 225s - loss: 0.2465 - abs_loss_function: 0.2465 - accuracy: 0.3391 - val_loss: 0.2513 - val_abs_loss_function: 0.2513 - val_accuracy: 0.3034 - 225s/epoch - 824ms/step
Epoch 41/100
273/273 - 226s - loss: 0.2395 - abs_loss_function: 0.2395 - accuracy: 0.3284 - val_loss: 0.2725 - val_abs_loss_function: 0.2725 - val_accuracy: 0.3488 - 226s/epoch - 829ms/step
Epoch 42/100
273/273 - 224s - loss: 0.2422 - abs_loss_function: 0.2422 - accuracy: 0.3923 - val_loss: 0.2396 - val_abs_loss_function: 0.2396 - val_accuracy: 0.2954 - 224s/epoch - 822ms/step
Epoch 43/100
273/273 - 222s - loss: 0.2453 - abs_loss_function: 0.2453 - accuracy: 0.3122 - val_loss: 0.2536 - val_abs_loss_function: 0.2536 - val_accuracy: 0.3417 - 222s/epoch - 815ms/step
Epoch 44/100
273/273 - 224s - loss: 0.2404 - abs_loss_function: 0.2404 - accuracy: 0.2801 - val_loss: 0.2649 - val_abs_loss_function: 0.2649 - val_accuracy: 0.4778 - 224s/epoch - 821ms/step
Epoch 45/100
273/273 - 224s - loss: 0.2455 - abs_loss_function: 0.2455 - accuracy: 0.3147 - val_loss: 0.2586 - val_abs_loss_function: 0.2586 - val_accuracy: 0.3841 - 224s/epoch - 822ms/step
Epoch 46/100
273/273 - 223s - loss: 0.2464 - abs_loss_function: 0.2464 - accuracy: 0.2772 - val_loss: 0.2567 - val_abs_loss_function: 0.2567 - val_accuracy: 0.3629 - 223s/epoch - 817ms/step
Epoch 47/100
273/273 - 225s - loss: 0.2426 - abs_loss_function: 0.2426 - accuracy: 0.3317 - val_loss: 0.2382 - val_abs_loss_function: 0.2382 - val_accuracy: 0.3256 - 225s/epoch - 824ms/step
Epoch 48/100
273/273 - 225s - loss: 0.2415 - abs_loss_function: 0.2415 - accuracy: 0.3040 - val_loss: 0.2632 - val_abs_loss_function: 0.2632 - val_accuracy: 0.3145 - 225s/epoch - 825ms/step
Epoch 49/100
273/273 - 225s - loss: 0.2417 - abs_loss_function: 0.2417 - accuracy: 0.2872 - val_loss: 0.2469 - val_abs_loss_function: 0.2469 - val_accuracy: 0.3629 - 225s/epoch - 825ms/step
Epoch 50/100
273/273 - 223s - loss: 0.2401 - abs_loss_function: 0.2401 - accuracy: 0.2970 - val_loss: 0.2350 - val_abs_loss_function: 0.2350 - val_accuracy: 0.3226 - 223s/epoch - 817ms/step
Epoch 51/100
273/273 - 225s - loss: 0.2382 - abs_loss_function: 0.2382 - accuracy: 0.2981 - val_loss: 0.2687 - val_abs_loss_function: 0.2687 - val_accuracy: 0.3659 - 225s/epoch - 823ms/step
Epoch 52/100
273/273 - 224s - loss: 0.2399 - abs_loss_function: 0.2399 - accuracy: 0.2786 - val_loss: 0.2579 - val_abs_loss_function: 0.2579 - val_accuracy: 0.3226 - 224s/epoch - 822ms/step
Epoch 53/100
273/273 - 225s - loss: 0.2435 - abs_loss_function: 0.2435 - accuracy: 0.3265 - val_loss: 0.2426 - val_abs_loss_function: 0.2426 - val_accuracy: 0.3901 - 225s/epoch - 824ms/step
Epoch 54/100
273/273 - 223s - loss: 0.2416 - abs_loss_function: 0.2416 - accuracy: 0.3541 - val_loss: 0.2736 - val_abs_loss_function: 0.2736 - val_accuracy: 0.3669 - 223s/epoch - 816ms/step
Epoch 55/100
273/273 - 225s - loss: 0.2369 - abs_loss_function: 0.2369 - accuracy: 0.3260 - val_loss: 0.2525 - val_abs_loss_function: 0.2525 - val_accuracy: 0.2651 - 225s/epoch - 823ms/step
Epoch 56/100
273/273 - 227s - loss: 0.2404 - abs_loss_function: 0.2404 - accuracy: 0.3603 - val_loss: 0.2495 - val_abs_loss_function: 0.2495 - val_accuracy: 0.3085 - 227s/epoch - 831ms/step
Epoch 57/100
273/273 - 223s - loss: 0.2406 - abs_loss_function: 0.2406 - accuracy: 0.2880 - val_loss: 0.2427 - val_abs_loss_function: 0.2427 - val_accuracy: 0.3206 - 223s/epoch - 816ms/step
Epoch 58/100
273/273 - 225s - loss: 0.2436 - abs_loss_function: 0.2436 - accuracy: 0.3439 - val_loss: 0.2505 - val_abs_loss_function: 0.2505 - val_accuracy: 0.2974 - 225s/epoch - 823ms/step
Epoch 59/100
273/273 - 224s - loss: 0.2444 - abs_loss_function: 0.2444 - accuracy: 0.3314 - val_loss: 0.2433 - val_abs_loss_function: 0.2433 - val_accuracy: 0.3528 - 224s/epoch - 821ms/step
Epoch 60/100
273/273 - 225s - loss: 0.2358 - abs_loss_function: 0.2358 - accuracy: 0.2847 - val_loss: 0.2687 - val_abs_loss_function: 0.2687 - val_accuracy: 0.2409 - 225s/epoch - 825ms/step
Epoch 61/100
273/273 - 224s - loss: 0.2436 - abs_loss_function: 0.2436 - accuracy: 0.3212 - val_loss: 0.2542 - val_abs_loss_function: 0.2542 - val_accuracy: 0.3599 - 224s/epoch - 822ms/step
Epoch 62/100
273/273 - 223s - loss: 0.2435 - abs_loss_function: 0.2435 - accuracy: 0.3710 - val_loss: 0.2381 - val_abs_loss_function: 0.2381 - val_accuracy: 0.3438 - 223s/epoch - 818ms/step
Epoch 63/100
273/273 - 225s - loss: 0.2449 - abs_loss_function: 0.2449 - accuracy: 0.3370 - val_loss: 0.2640 - val_abs_loss_function: 0.2640 - val_accuracy: 0.5101 - 225s/epoch - 825ms/step
Epoch 64/100
273/273 - 225s - loss: 0.2422 - abs_loss_function: 0.2422 - accuracy: 0.3155 - val_loss: 0.2490 - val_abs_loss_function: 0.2490 - val_accuracy: 0.4607 - 225s/epoch - 823ms/step
Epoch 65/100
273/273 - 223s - loss: 0.2448 - abs_loss_function: 0.2448 - accuracy: 0.3338 - val_loss: 0.2465 - val_abs_loss_function: 0.2465 - val_accuracy: 0.3367 - 223s/epoch - 818ms/step
Epoch 66/100
273/273 - 225s - loss: 0.2489 - abs_loss_function: 0.2489 - accuracy: 0.3388 - val_loss: 0.2437 - val_abs_loss_function: 0.2437 - val_accuracy: 0.3690 - 225s/epoch - 825ms/step
Epoch 67/100
273/273 - 225s - loss: 0.2472 - abs_loss_function: 0.2472 - accuracy: 0.3828 - val_loss: 0.2540 - val_abs_loss_function: 0.2540 - val_accuracy: 0.4304 - 225s/epoch - 822ms/step
Epoch 68/100
273/273 - 223s - loss: 0.2431 - abs_loss_function: 0.2431 - accuracy: 0.3585 - val_loss: 0.2508 - val_abs_loss_function: 0.2508 - val_accuracy: 0.3135 - 223s/epoch - 815ms/step
Epoch 69/100
273/273 - 225s - loss: 0.2429 - abs_loss_function: 0.2429 - accuracy: 0.3249 - val_loss: 0.2730 - val_abs_loss_function: 0.2730 - val_accuracy: 0.2560 - 225s/epoch - 823ms/step
Epoch 70/100
273/273 - 225s - loss: 0.2394 - abs_loss_function: 0.2394 - accuracy: 0.3063 - val_loss: 0.2298 - val_abs_loss_function: 0.2298 - val_accuracy: 0.3538 - 225s/epoch - 825ms/step
Epoch 71/100
273/273 - 225s - loss: 0.2456 - abs_loss_function: 0.2456 - accuracy: 0.3546 - val_loss: 0.2374 - val_abs_loss_function: 0.2374 - val_accuracy: 0.3871 - 225s/epoch - 825ms/step
Epoch 72/100
273/273 - 225s - loss: 0.2453 - abs_loss_function: 0.2453 - accuracy: 0.3472 - val_loss: 0.2497 - val_abs_loss_function: 0.2497 - val_accuracy: 0.3831 - 225s/epoch - 822ms/step
Epoch 73/100
273/273 - 223s - loss: 0.2410 - abs_loss_function: 0.2410 - accuracy: 0.3215 - val_loss: 0.2780 - val_abs_loss_function: 0.2780 - val_accuracy: 0.4597 - 223s/epoch - 816ms/step
Epoch 74/100
273/273 - 225s - loss: 0.2379 - abs_loss_function: 0.2379 - accuracy: 0.2772 - val_loss: 0.2340 - val_abs_loss_function: 0.2340 - val_accuracy: 0.2198 - 225s/epoch - 824ms/step
Epoch 75/100
273/273 - 225s - loss: 0.2428 - abs_loss_function: 0.2428 - accuracy: 0.3270 - val_loss: 0.2536 - val_abs_loss_function: 0.2536 - val_accuracy: 0.3327 - 225s/epoch - 824ms/step
Epoch 76/100
273/273 - 222s - loss: 0.2393 - abs_loss_function: 0.2393 - accuracy: 0.3373 - val_loss: 0.2519 - val_abs_loss_function: 0.2519 - val_accuracy: 0.4002 - 222s/epoch - 815ms/step
Epoch 77/100
273/273 - 225s - loss: 0.2426 - abs_loss_function: 0.2426 - accuracy: 0.3388 - val_loss: 0.2481 - val_abs_loss_function: 0.2481 - val_accuracy: 0.2863 - 225s/epoch - 824ms/step
Epoch 78/100
273/273 - 224s - loss: 0.2362 - abs_loss_function: 0.2362 - accuracy: 0.2847 - val_loss: 0.2368 - val_abs_loss_function: 0.2368 - val_accuracy: 0.2964 - 224s/epoch - 822ms/step
Epoch 79/100
273/273 - 223s - loss: 0.2391 - abs_loss_function: 0.2391 - accuracy: 0.3563 - val_loss: 0.2574 - val_abs_loss_function: 0.2574 - val_accuracy: 0.2177 - 223s/epoch - 815ms/step
Epoch 80/100
273/273 - 227s - loss: 0.2423 - abs_loss_function: 0.2423 - accuracy: 0.3392 - val_loss: 0.2474 - val_abs_loss_function: 0.2474 - val_accuracy: 0.3044 - 227s/epoch - 832ms/step
Epoch 81/100
User defined signal 2

------------------------------------------------------------
Sender: LSF System <lsfadmin@hpc.dtu.dk>
Subject: Job 15232373: <s202741-train> in cluster <dcc> Exited

Job <s202741-train> was submitted from host <n-62-20-1> by user <s202741> in cluster <dcc> at Sun Jan 22 12:32:41 2023
Job was executed on host(s) <4*n-62-20-12>, in queue <gpuv100>, as user <s202741> in cluster <dcc> at Mon Jan 23 19:18:48 2023
</zhome/ab/7/153983> was used as the home directory.
</zhome/ab/7/153983/project/scripts> was used as the working directory.
Started at Mon Jan 23 19:18:48 2023
Terminated at Tue Jan 24 00:19:22 2023
Results reported at Tue Jan 24 00:19:22 2023

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#!/bin/bash
### General options
### -- specify queue --   NOTE: TitanX is significantly faster than K80
#BSUB -q gpuv100
#BSUB -gpu "num=1:mode=exclusive_process"
### -- set the job Name --
#BSUB -J s202741-train
### -- ask for number of cores (default: 1) --
#BSUB -n 4
#BSUB -R "span[hosts=1]"
### -- set walltime limit: hh:mm --  maximum 24 hours for GPU-queues right now
#BSUB -W 5:00
# request 5GB of memory
#BSUB -R "rusage[mem=5GB]"
### -- Specify the output and error file. %J is the job-id --
### -- -o and -e mean append, -oo and -eo mean overwrite --
#BSUB -o iter6/Logs/RMSprop_abs_loss_function_0002_model_g_%J.out
# -- end of LSF options --

# Necessary modules
cd ..
source venv/bin/activate

python trainModelIter3.py 100 "RMSprop(learning_rate=0.002)" "abs_loss_function" "black_background_500x500.csv" 2 "RMSprop_abs_loss_function_0002_model_g_" "iter6" "load_model_g"

    
------------------------------------------------------------

TERM_RUNLIMIT: job killed after reaching LSF run time limit.
Exited with exit code 140.

Resource usage summary:

    CPU time :                                   20311.00 sec.
    Max Memory :                                 3056 MB
    Average Memory :                             2945.50 MB
    Total Requested Memory :                     20480.00 MB
    Delta Memory :                               17424.00 MB
    Max Swap :                                   -
    Max Processes :                              4
    Max Threads :                                33
    Run time :                                   18035 sec.
    Turnaround time :                            128801 sec.

The output (if any) is above this job summary.

