Loaded dependency [python3/3.10.7]: gcc/11.3.0-binutils-2.38
Loaded module: python3/3.10.7

Loading python3/3.10.7
  Loading requirement: gcc/11.3.0-binutils-2.38
Loaded module: cuda/11.6
Loaded module: cudnn/v8.3.2.44-prod-cuda-11.X
2023-01-25 16:45:06.328188: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2023-01-25 16:45:18.032820: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer.so.7'; dlerror: libnvinfer.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /appl/cudnn/v8.3.2.44-prod-cuda-11.5/lib:/appl/cuda/11.6.0/lib64:/appl/python/3.10.7/lib:/appl/gcc/11.3.0-binutils-2.38/lib64:/appl/gcc/11.3.0-binutils-2.38/lib:/lsf/10.1/linux3.10-glibc2.17-x86_64/lib
2023-01-25 16:45:18.033454: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer_plugin.so.7'; dlerror: libnvinfer_plugin.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /appl/cudnn/v8.3.2.44-prod-cuda-11.5/lib:/appl/cuda/11.6.0/lib64:/appl/python/3.10.7/lib:/appl/gcc/11.3.0-binutils-2.38/lib64:/appl/gcc/11.3.0-binutils-2.38/lib:/lsf/10.1/linux3.10-glibc2.17-x86_64/lib
2023-01-25 16:45:18.033466: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Cannot dlopen some TensorRT libraries. If you would like to use Nvidia GPU with TensorRT, please make sure the missing libraries mentioned above are installed properly.
2023-01-25 16:45:27.273084: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2023-01-25 16:45:32.053177: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1613] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 30961 MB memory:  -> device: 0, name: Tesla V100-SXM2-32GB, pci bus id: 0000:3b:00.0, compute capability: 7.0
Epochs:  100
Optimizer:  RMSprop(learning_rate=0.002)
Loss function name:  abs_loss_function
Csv file used:  black_background_500x500.csv
Verbose:  2
Unique name:  RMSprop_abs_loss_function_0002_model_h_
Output folder:  iter6
Model name:  load_model_h
 
        ################ MODEL ############### 

        inputs = keras.Input(shape=(input_size, input_size, 1))
        x = layers.Conv2D(filters=64, kernel_size=11, activation="relu")(inputs)
        x = layers.Conv2D(filters=64, kernel_size=11, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=5, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=5, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Flatten()(x)
        x = layers.Dense(210, activation="relu")(x)
        x = layers.Dense(210, activation="relu")(x)
        x = layers.Dense(210, activation="relu")(x)
        x = layers.Dense(32, activation="sigmoid")(x)
        outputs = layers.Dense(3)(x)

        model = keras.Model(inputs=inputs, outputs=outputs)
    
Model: "model"
_________________________________________________________________
 Layer (type)                Output Shape              Param #   
=================================================================
 input_1 (InputLayer)        [(None, 500, 500, 1)]     0         
                                                                 
 conv2d (Conv2D)             (None, 490, 490, 64)      7808      
                                                                 
 conv2d_1 (Conv2D)           (None, 480, 480, 64)      495680    
                                                                 
 max_pooling2d (MaxPooling2D  (None, 240, 240, 64)     0         
 )                                                               
                                                                 
 conv2d_2 (Conv2D)           (None, 236, 236, 64)      102464    
                                                                 
 conv2d_3 (Conv2D)           (None, 232, 232, 64)      102464    
                                                                 
 max_pooling2d_1 (MaxPooling  (None, 116, 116, 64)     0         
 2D)                                                             
                                                                 
 conv2d_4 (Conv2D)           (None, 114, 114, 64)      36928     
                                                                 
 conv2d_5 (Conv2D)           (None, 112, 112, 64)      36928     
                                                                 
 max_pooling2d_2 (MaxPooling  (None, 56, 56, 64)       0         
 2D)                                                             
                                                                 
 conv2d_6 (Conv2D)           (None, 54, 54, 64)        36928     
                                                                 
 conv2d_7 (Conv2D)           (None, 52, 52, 64)        36928     
                                                                 
 max_pooling2d_3 (MaxPooling  (None, 26, 26, 64)       0         
 2D)                                                             
                                                                 
 conv2d_8 (Conv2D)           (None, 24, 24, 64)        36928     
                                                                 
 conv2d_9 (Conv2D)           (None, 22, 22, 64)        36928     
                                                                 
 max_pooling2d_4 (MaxPooling  (None, 11, 11, 64)       0         
 2D)                                                             
                                                                 
 conv2d_10 (Conv2D)          (None, 9, 9, 64)          36928     
                                                                 
 conv2d_11 (Conv2D)          (None, 7, 7, 64)          36928     
                                                                 
 max_pooling2d_5 (MaxPooling  (None, 3, 3, 64)         0         
 2D)                                                             
                                                                 
 flatten (Flatten)           (None, 576)               0         
                                                                 
 dense (Dense)               (None, 210)               121170    
                                                                 
 dense_1 (Dense)             (None, 210)               44310     
                                                                 
 dense_2 (Dense)             (None, 210)               44310     
                                                                 
 dense_3 (Dense)             (None, 32)                6752      
                                                                 
 dense_4 (Dense)             (None, 3)                 99        
                                                                 
=================================================================
Total params: 1,220,481
Trainable params: 1,220,481
Non-trainable params: 0
_________________________________________________________________
/zhome/ab/7/153983/project/venv/lib/python3.10/site-packages/keras/utils/image_utils.py:409: UserWarning: grayscale is deprecated. Please use color_mode = "grayscale"
  warnings.warn(
Epoch 1/100
2023-01-25 16:45:37.606139: I tensorflow/compiler/xla/stream_executor/cuda/cuda_dnn.cc:428] Loaded cuDNN version 8302
273/273 - 256s - loss: 0.2655 - abs_loss_function: 0.2655 - accuracy: 0.2851 - val_loss: 0.2606 - val_abs_loss_function: 0.2606 - val_accuracy: 0.3558 - 256s/epoch - 936ms/step
Epoch 2/100
273/273 - 227s - loss: 0.2466 - abs_loss_function: 0.2466 - accuracy: 0.3725 - val_loss: 0.2742 - val_abs_loss_function: 0.2742 - val_accuracy: 0.4274 - 227s/epoch - 830ms/step
Epoch 3/100
273/273 - 226s - loss: 0.2433 - abs_loss_function: 0.2433 - accuracy: 0.3531 - val_loss: 0.2605 - val_abs_loss_function: 0.2605 - val_accuracy: 0.3790 - 226s/epoch - 829ms/step
Epoch 4/100
273/273 - 226s - loss: 0.2434 - abs_loss_function: 0.2434 - accuracy: 0.3535 - val_loss: 0.2406 - val_abs_loss_function: 0.2406 - val_accuracy: 0.3589 - 226s/epoch - 828ms/step
Epoch 5/100
273/273 - 225s - loss: 0.2425 - abs_loss_function: 0.2425 - accuracy: 0.2720 - val_loss: 0.2505 - val_abs_loss_function: 0.2505 - val_accuracy: 0.3196 - 225s/epoch - 824ms/step
Epoch 6/100
273/273 - 231s - loss: 0.2426 - abs_loss_function: 0.2426 - accuracy: 0.3207 - val_loss: 0.2557 - val_abs_loss_function: 0.2557 - val_accuracy: 0.3700 - 231s/epoch - 847ms/step
Epoch 7/100
273/273 - 232s - loss: 0.2416 - abs_loss_function: 0.2416 - accuracy: 0.3259 - val_loss: 0.2674 - val_abs_loss_function: 0.2674 - val_accuracy: 0.4103 - 232s/epoch - 849ms/step
Epoch 8/100
273/273 - 232s - loss: 0.2454 - abs_loss_function: 0.2454 - accuracy: 0.3481 - val_loss: 0.2573 - val_abs_loss_function: 0.2573 - val_accuracy: 0.3800 - 232s/epoch - 850ms/step
Epoch 9/100
273/273 - 230s - loss: 0.2396 - abs_loss_function: 0.2396 - accuracy: 0.3193 - val_loss: 0.2444 - val_abs_loss_function: 0.2444 - val_accuracy: 0.3357 - 230s/epoch - 844ms/step
Epoch 10/100
273/273 - 231s - loss: 0.2428 - abs_loss_function: 0.2428 - accuracy: 0.3087 - val_loss: 0.2311 - val_abs_loss_function: 0.2311 - val_accuracy: 0.2510 - 231s/epoch - 846ms/step
Epoch 11/100
273/273 - 232s - loss: 0.2439 - abs_loss_function: 0.2439 - accuracy: 0.3226 - val_loss: 0.2578 - val_abs_loss_function: 0.2578 - val_accuracy: 0.4052 - 232s/epoch - 848ms/step
Epoch 12/100
273/273 - 229s - loss: 0.2452 - abs_loss_function: 0.2452 - accuracy: 0.2990 - val_loss: 0.2557 - val_abs_loss_function: 0.2557 - val_accuracy: 0.3347 - 229s/epoch - 840ms/step
Epoch 13/100
273/273 - 227s - loss: 0.2424 - abs_loss_function: 0.2424 - accuracy: 0.3260 - val_loss: 0.2549 - val_abs_loss_function: 0.2549 - val_accuracy: 0.2470 - 227s/epoch - 832ms/step
Epoch 14/100
273/273 - 231s - loss: 0.2445 - abs_loss_function: 0.2445 - accuracy: 0.2735 - val_loss: 0.2363 - val_abs_loss_function: 0.2363 - val_accuracy: 0.2419 - 231s/epoch - 845ms/step
Epoch 15/100
273/273 - 231s - loss: 0.2380 - abs_loss_function: 0.2380 - accuracy: 0.3280 - val_loss: 0.2581 - val_abs_loss_function: 0.2581 - val_accuracy: 0.3185 - 231s/epoch - 848ms/step
Epoch 16/100
273/273 - 235s - loss: 0.2427 - abs_loss_function: 0.2427 - accuracy: 0.3036 - val_loss: 0.2609 - val_abs_loss_function: 0.2609 - val_accuracy: 0.3962 - 235s/epoch - 859ms/step
Epoch 17/100
273/273 - 233s - loss: 0.2436 - abs_loss_function: 0.2436 - accuracy: 0.3141 - val_loss: 0.2347 - val_abs_loss_function: 0.2347 - val_accuracy: 0.3357 - 233s/epoch - 853ms/step
Epoch 18/100
273/273 - 227s - loss: 0.2424 - abs_loss_function: 0.2424 - accuracy: 0.3083 - val_loss: 0.2532 - val_abs_loss_function: 0.2532 - val_accuracy: 0.4526 - 227s/epoch - 832ms/step
Epoch 19/100
273/273 - 231s - loss: 0.2363 - abs_loss_function: 0.2363 - accuracy: 0.3454 - val_loss: 0.2758 - val_abs_loss_function: 0.2758 - val_accuracy: 0.5030 - 231s/epoch - 848ms/step
Epoch 20/100
273/273 - 231s - loss: 0.2435 - abs_loss_function: 0.2435 - accuracy: 0.3452 - val_loss: 0.2451 - val_abs_loss_function: 0.2451 - val_accuracy: 0.3548 - 231s/epoch - 848ms/step
Epoch 21/100
273/273 - 232s - loss: 0.2391 - abs_loss_function: 0.2391 - accuracy: 0.3536 - val_loss: 0.2436 - val_abs_loss_function: 0.2436 - val_accuracy: 0.3075 - 232s/epoch - 849ms/step
Epoch 22/100
273/273 - 227s - loss: 0.2383 - abs_loss_function: 0.2383 - accuracy: 0.3272 - val_loss: 0.2320 - val_abs_loss_function: 0.2320 - val_accuracy: 0.3740 - 227s/epoch - 833ms/step
Epoch 23/100
273/273 - 225s - loss: 0.2422 - abs_loss_function: 0.2422 - accuracy: 0.3028 - val_loss: 0.2540 - val_abs_loss_function: 0.2540 - val_accuracy: 0.2994 - 225s/epoch - 824ms/step
Epoch 24/100
273/273 - 225s - loss: 0.2474 - abs_loss_function: 0.2474 - accuracy: 0.3436 - val_loss: 0.2331 - val_abs_loss_function: 0.2331 - val_accuracy: 0.2692 - 225s/epoch - 824ms/step
Epoch 25/100
273/273 - 225s - loss: 0.2411 - abs_loss_function: 0.2411 - accuracy: 0.3000 - val_loss: 0.2510 - val_abs_loss_function: 0.2510 - val_accuracy: 0.3478 - 225s/epoch - 824ms/step
Epoch 26/100
273/273 - 225s - loss: 0.2411 - abs_loss_function: 0.2411 - accuracy: 0.2943 - val_loss: 0.2630 - val_abs_loss_function: 0.2630 - val_accuracy: 0.5121 - 225s/epoch - 825ms/step
Epoch 27/100
273/273 - 225s - loss: 0.2432 - abs_loss_function: 0.2432 - accuracy: 0.3454 - val_loss: 0.2536 - val_abs_loss_function: 0.2536 - val_accuracy: 0.2308 - 225s/epoch - 824ms/step
Epoch 28/100
273/273 - 225s - loss: 0.2435 - abs_loss_function: 0.2435 - accuracy: 0.3011 - val_loss: 0.2616 - val_abs_loss_function: 0.2616 - val_accuracy: 0.3579 - 225s/epoch - 825ms/step
Epoch 29/100
273/273 - 225s - loss: 0.2426 - abs_loss_function: 0.2426 - accuracy: 0.3305 - val_loss: 0.2716 - val_abs_loss_function: 0.2716 - val_accuracy: 0.3034 - 225s/epoch - 824ms/step
Epoch 30/100
273/273 - 225s - loss: 0.2394 - abs_loss_function: 0.2394 - accuracy: 0.3368 - val_loss: 0.2486 - val_abs_loss_function: 0.2486 - val_accuracy: 0.3629 - 225s/epoch - 822ms/step
Epoch 31/100
273/273 - 226s - loss: 0.2422 - abs_loss_function: 0.2422 - accuracy: 0.3142 - val_loss: 0.2328 - val_abs_loss_function: 0.2328 - val_accuracy: 0.2611 - 226s/epoch - 829ms/step
Epoch 32/100
273/273 - 225s - loss: 0.2461 - abs_loss_function: 0.2461 - accuracy: 0.3554 - val_loss: 0.2646 - val_abs_loss_function: 0.2646 - val_accuracy: 0.3952 - 225s/epoch - 825ms/step
Epoch 33/100
273/273 - 225s - loss: 0.2475 - abs_loss_function: 0.2475 - accuracy: 0.3181 - val_loss: 0.2624 - val_abs_loss_function: 0.2624 - val_accuracy: 0.3841 - 225s/epoch - 823ms/step
Epoch 34/100
273/273 - 225s - loss: 0.2468 - abs_loss_function: 0.2468 - accuracy: 0.3471 - val_loss: 0.2487 - val_abs_loss_function: 0.2487 - val_accuracy: 0.4073 - 225s/epoch - 826ms/step
Epoch 35/100
273/273 - 225s - loss: 0.2407 - abs_loss_function: 0.2407 - accuracy: 0.3173 - val_loss: 0.2509 - val_abs_loss_function: 0.2509 - val_accuracy: 0.3972 - 225s/epoch - 824ms/step
Epoch 36/100
273/273 - 226s - loss: 0.2480 - abs_loss_function: 0.2480 - accuracy: 0.3371 - val_loss: 0.2437 - val_abs_loss_function: 0.2437 - val_accuracy: 0.4093 - 226s/epoch - 828ms/step
Epoch 37/100
273/273 - 226s - loss: 0.2467 - abs_loss_function: 0.2467 - accuracy: 0.3140 - val_loss: 0.2715 - val_abs_loss_function: 0.2715 - val_accuracy: 0.4516 - 226s/epoch - 828ms/step
Epoch 38/100
273/273 - 226s - loss: 0.2434 - abs_loss_function: 0.2434 - accuracy: 0.3173 - val_loss: 0.2490 - val_abs_loss_function: 0.2490 - val_accuracy: 0.3942 - 226s/epoch - 826ms/step
Epoch 39/100
273/273 - 225s - loss: 0.2376 - abs_loss_function: 0.2376 - accuracy: 0.2855 - val_loss: 0.2606 - val_abs_loss_function: 0.2606 - val_accuracy: 0.3851 - 225s/epoch - 822ms/step
Epoch 40/100
273/273 - 225s - loss: 0.2482 - abs_loss_function: 0.2482 - accuracy: 0.3122 - val_loss: 0.2501 - val_abs_loss_function: 0.2501 - val_accuracy: 0.3871 - 225s/epoch - 825ms/step
Epoch 41/100
273/273 - 225s - loss: 0.2454 - abs_loss_function: 0.2454 - accuracy: 0.3017 - val_loss: 0.2631 - val_abs_loss_function: 0.2631 - val_accuracy: 0.3135 - 225s/epoch - 823ms/step
Epoch 42/100
273/273 - 225s - loss: 0.2418 - abs_loss_function: 0.2418 - accuracy: 0.2918 - val_loss: 0.2440 - val_abs_loss_function: 0.2440 - val_accuracy: 0.3579 - 225s/epoch - 824ms/step
Epoch 43/100
273/273 - 225s - loss: 0.2398 - abs_loss_function: 0.2398 - accuracy: 0.2712 - val_loss: 0.2354 - val_abs_loss_function: 0.2354 - val_accuracy: 0.4103 - 225s/epoch - 826ms/step
Epoch 44/100
273/273 - 226s - loss: 0.2375 - abs_loss_function: 0.2375 - accuracy: 0.3502 - val_loss: 0.2623 - val_abs_loss_function: 0.2623 - val_accuracy: 0.3790 - 226s/epoch - 827ms/step
Epoch 45/100
273/273 - 226s - loss: 0.2381 - abs_loss_function: 0.2381 - accuracy: 0.3591 - val_loss: 0.2380 - val_abs_loss_function: 0.2380 - val_accuracy: 0.3427 - 226s/epoch - 827ms/step
Epoch 46/100
273/273 - 225s - loss: 0.2410 - abs_loss_function: 0.2410 - accuracy: 0.3191 - val_loss: 0.2750 - val_abs_loss_function: 0.2750 - val_accuracy: 0.3871 - 225s/epoch - 825ms/step
Epoch 47/100
273/273 - 225s - loss: 0.2430 - abs_loss_function: 0.2430 - accuracy: 0.3073 - val_loss: 0.2665 - val_abs_loss_function: 0.2665 - val_accuracy: 0.4577 - 225s/epoch - 823ms/step
Epoch 48/100
273/273 - 225s - loss: 0.2414 - abs_loss_function: 0.2414 - accuracy: 0.2948 - val_loss: 0.2557 - val_abs_loss_function: 0.2557 - val_accuracy: 0.3357 - 225s/epoch - 825ms/step
Epoch 49/100
273/273 - 225s - loss: 0.2428 - abs_loss_function: 0.2428 - accuracy: 0.3569 - val_loss: 0.2624 - val_abs_loss_function: 0.2624 - val_accuracy: 0.3377 - 225s/epoch - 823ms/step
Epoch 50/100
273/273 - 225s - loss: 0.2413 - abs_loss_function: 0.2413 - accuracy: 0.3054 - val_loss: 0.2364 - val_abs_loss_function: 0.2364 - val_accuracy: 0.1905 - 225s/epoch - 824ms/step
Epoch 51/100
273/273 - 225s - loss: 0.2381 - abs_loss_function: 0.2381 - accuracy: 0.3448 - val_loss: 0.2436 - val_abs_loss_function: 0.2436 - val_accuracy: 0.2984 - 225s/epoch - 824ms/step
Epoch 52/100
273/273 - 233s - loss: 0.2435 - abs_loss_function: 0.2435 - accuracy: 0.3125 - val_loss: 0.2382 - val_abs_loss_function: 0.2382 - val_accuracy: 0.3115 - 233s/epoch - 855ms/step
Epoch 53/100
273/273 - 229s - loss: 0.2394 - abs_loss_function: 0.2394 - accuracy: 0.3267 - val_loss: 0.2684 - val_abs_loss_function: 0.2684 - val_accuracy: 0.3710 - 229s/epoch - 837ms/step
Epoch 54/100
273/273 - 231s - loss: 0.2421 - abs_loss_function: 0.2421 - accuracy: 0.2973 - val_loss: 0.2287 - val_abs_loss_function: 0.2287 - val_accuracy: 0.2913 - 231s/epoch - 845ms/step
Epoch 55/100
273/273 - 235s - loss: 0.2422 - abs_loss_function: 0.2422 - accuracy: 0.3330 - val_loss: 0.2343 - val_abs_loss_function: 0.2343 - val_accuracy: 0.2974 - 235s/epoch - 861ms/step
Epoch 56/100
273/273 - 229s - loss: 0.2377 - abs_loss_function: 0.2377 - accuracy: 0.3515 - val_loss: 0.2590 - val_abs_loss_function: 0.2590 - val_accuracy: 0.1956 - 229s/epoch - 840ms/step
Epoch 57/100
273/273 - 231s - loss: 0.2383 - abs_loss_function: 0.2383 - accuracy: 0.3189 - val_loss: 0.2390 - val_abs_loss_function: 0.2390 - val_accuracy: 0.3589 - 231s/epoch - 848ms/step
Epoch 58/100
273/273 - 230s - loss: 0.2427 - abs_loss_function: 0.2427 - accuracy: 0.3539 - val_loss: 0.2505 - val_abs_loss_function: 0.2505 - val_accuracy: 0.4002 - 230s/epoch - 843ms/step
Epoch 59/100
273/273 - 229s - loss: 0.2432 - abs_loss_function: 0.2432 - accuracy: 0.3828 - val_loss: 0.2488 - val_abs_loss_function: 0.2488 - val_accuracy: 0.3780 - 229s/epoch - 839ms/step
Epoch 60/100
273/273 - 232s - loss: 0.2431 - abs_loss_function: 0.2431 - accuracy: 0.3096 - val_loss: 0.2404 - val_abs_loss_function: 0.2404 - val_accuracy: 0.3589 - 232s/epoch - 851ms/step
Epoch 61/100
273/273 - 229s - loss: 0.2338 - abs_loss_function: 0.2338 - accuracy: 0.3316 - val_loss: 0.2453 - val_abs_loss_function: 0.2453 - val_accuracy: 0.3407 - 229s/epoch - 840ms/step
Epoch 62/100
273/273 - 230s - loss: 0.2350 - abs_loss_function: 0.2350 - accuracy: 0.3243 - val_loss: 0.2437 - val_abs_loss_function: 0.2437 - val_accuracy: 0.3004 - 230s/epoch - 843ms/step
Epoch 63/100
273/273 - 231s - loss: 0.2441 - abs_loss_function: 0.2441 - accuracy: 0.2886 - val_loss: 0.2454 - val_abs_loss_function: 0.2454 - val_accuracy: 0.3196 - 231s/epoch - 846ms/step
Epoch 64/100
273/273 - 230s - loss: 0.2369 - abs_loss_function: 0.2369 - accuracy: 0.2948 - val_loss: 0.2557 - val_abs_loss_function: 0.2557 - val_accuracy: 0.3881 - 230s/epoch - 842ms/step
Epoch 65/100
273/273 - 231s - loss: 0.2413 - abs_loss_function: 0.2413 - accuracy: 0.3280 - val_loss: 0.2435 - val_abs_loss_function: 0.2435 - val_accuracy: 0.2288 - 231s/epoch - 845ms/step
Epoch 66/100
273/273 - 229s - loss: 0.2424 - abs_loss_function: 0.2424 - accuracy: 0.3584 - val_loss: 0.2725 - val_abs_loss_function: 0.2725 - val_accuracy: 0.2712 - 229s/epoch - 840ms/step
Epoch 67/100
273/273 - 229s - loss: 0.2379 - abs_loss_function: 0.2379 - accuracy: 0.3052 - val_loss: 0.2721 - val_abs_loss_function: 0.2721 - val_accuracy: 0.3196 - 229s/epoch - 838ms/step
Epoch 68/100
273/273 - 230s - loss: 0.2440 - abs_loss_function: 0.2440 - accuracy: 0.3218 - val_loss: 0.2644 - val_abs_loss_function: 0.2644 - val_accuracy: 0.3992 - 230s/epoch - 844ms/step
Epoch 69/100
273/273 - 229s - loss: 0.2444 - abs_loss_function: 0.2444 - accuracy: 0.3700 - val_loss: 0.2509 - val_abs_loss_function: 0.2509 - val_accuracy: 0.2964 - 229s/epoch - 839ms/step
Epoch 70/100
273/273 - 230s - loss: 0.2430 - abs_loss_function: 0.2430 - accuracy: 0.3417 - val_loss: 0.2513 - val_abs_loss_function: 0.2513 - val_accuracy: 0.4677 - 230s/epoch - 842ms/step
Epoch 71/100
273/273 - 230s - loss: 0.2426 - abs_loss_function: 0.2426 - accuracy: 0.3274 - val_loss: 0.2404 - val_abs_loss_function: 0.2404 - val_accuracy: 0.3609 - 230s/epoch - 844ms/step
Epoch 72/100
273/273 - 230s - loss: 0.2449 - abs_loss_function: 0.2449 - accuracy: 0.3130 - val_loss: 0.2783 - val_abs_loss_function: 0.2783 - val_accuracy: 0.4042 - 230s/epoch - 843ms/step
Epoch 73/100
273/273 - 232s - loss: 0.2409 - abs_loss_function: 0.2409 - accuracy: 0.3357 - val_loss: 0.2465 - val_abs_loss_function: 0.2465 - val_accuracy: 0.2843 - 232s/epoch - 849ms/step
Epoch 74/100
273/273 - 227s - loss: 0.2414 - abs_loss_function: 0.2414 - accuracy: 0.3373 - val_loss: 0.2377 - val_abs_loss_function: 0.2377 - val_accuracy: 0.3579 - 227s/epoch - 833ms/step
Epoch 75/100
273/273 - 231s - loss: 0.2386 - abs_loss_function: 0.2386 - accuracy: 0.3356 - val_loss: 0.2430 - val_abs_loss_function: 0.2430 - val_accuracy: 0.4214 - 231s/epoch - 848ms/step
Epoch 76/100
273/273 - 231s - loss: 0.2432 - abs_loss_function: 0.2432 - accuracy: 0.3386 - val_loss: 0.2653 - val_abs_loss_function: 0.2653 - val_accuracy: 0.2853 - 231s/epoch - 845ms/step
Epoch 77/100
273/273 - 229s - loss: 0.2438 - abs_loss_function: 0.2438 - accuracy: 0.3602 - val_loss: 0.2507 - val_abs_loss_function: 0.2507 - val_accuracy: 0.3639 - 229s/epoch - 839ms/step
Epoch 78/100
273/273 - 229s - loss: 0.2402 - abs_loss_function: 0.2402 - accuracy: 0.3257 - val_loss: 0.2526 - val_abs_loss_function: 0.2526 - val_accuracy: 0.3306 - 229s/epoch - 840ms/step
Epoch 79/100
User defined signal 2

------------------------------------------------------------
Sender: LSF System <lsfadmin@hpc.dtu.dk>
Subject: Job 15232424: <s202741-train> in cluster <dcc> Exited

Job <s202741-train> was submitted from host <n-62-20-1> by user <s202741> in cluster <dcc> at Sun Jan 22 12:32:56 2023
Job was executed on host(s) <4*n-62-20-12>, in queue <gpuv100>, as user <s202741> in cluster <dcc> at Wed Jan 25 16:44:59 2023
</zhome/ab/7/153983> was used as the home directory.
</zhome/ab/7/153983/project/scripts> was used as the working directory.
Started at Wed Jan 25 16:44:59 2023
Terminated at Wed Jan 25 21:45:15 2023
Results reported at Wed Jan 25 21:45:15 2023

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#!/bin/bash
### General options
### -- specify queue --   NOTE: TitanX is significantly faster than K80
#BSUB -q gpuv100
#BSUB -gpu "num=1:mode=exclusive_process"
### -- set the job Name --
#BSUB -J s202741-train
### -- ask for number of cores (default: 1) --
#BSUB -n 4
#BSUB -R "span[hosts=1]"
### -- set walltime limit: hh:mm --  maximum 24 hours for GPU-queues right now
#BSUB -W 5:00
# request 5GB of memory
#BSUB -R "rusage[mem=5GB]"
### -- Specify the output and error file. %J is the job-id --
### -- -o and -e mean append, -oo and -eo mean overwrite --
#BSUB -o iter6/Logs/RMSprop_abs_loss_function_0002_model_h_%J.out
# -- end of LSF options --

# Necessary modules
cd ..
source venv/bin/activate

python trainModelIter3.py 100 "RMSprop(learning_rate=0.002)" "abs_loss_function" "black_background_500x500.csv" 2 "RMSprop_abs_loss_function_0002_model_h_" "iter6" "load_model_h"

    
------------------------------------------------------------

TERM_RUNLIMIT: job killed after reaching LSF run time limit.
Exited with exit code 140.

Resource usage summary:

    CPU time :                                   21370.00 sec.
    Max Memory :                                 3059 MB
    Average Memory :                             2912.47 MB
    Total Requested Memory :                     20480.00 MB
    Delta Memory :                               17421.00 MB
    Max Swap :                                   -
    Max Processes :                              4
    Max Threads :                                33
    Run time :                                   18017 sec.
    Turnaround time :                            292339 sec.

The output (if any) is above this job summary.

