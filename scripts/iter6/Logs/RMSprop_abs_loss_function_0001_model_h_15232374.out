Loaded dependency [python3/3.10.7]: gcc/11.3.0-binutils-2.38
Loaded module: python3/3.10.7

Loading python3/3.10.7
  Loading requirement: gcc/11.3.0-binutils-2.38
Loaded module: cuda/11.6
Loaded module: cudnn/v8.3.2.44-prod-cuda-11.X
2023-01-23 21:06:41.616616: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2023-01-23 21:06:44.054753: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer.so.7'; dlerror: libnvinfer.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /appl/cudnn/v8.3.2.44-prod-cuda-11.5/lib:/appl/cuda/11.6.0/lib64:/appl/python/3.10.7/lib:/appl/gcc/11.3.0-binutils-2.38/lib64:/appl/gcc/11.3.0-binutils-2.38/lib:/lsf/10.1/linux3.10-glibc2.17-x86_64/lib
2023-01-23 21:06:44.055654: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer_plugin.so.7'; dlerror: libnvinfer_plugin.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /appl/cudnn/v8.3.2.44-prod-cuda-11.5/lib:/appl/cuda/11.6.0/lib64:/appl/python/3.10.7/lib:/appl/gcc/11.3.0-binutils-2.38/lib64:/appl/gcc/11.3.0-binutils-2.38/lib:/lsf/10.1/linux3.10-glibc2.17-x86_64/lib
2023-01-23 21:06:44.055666: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Cannot dlopen some TensorRT libraries. If you would like to use Nvidia GPU with TensorRT, please make sure the missing libraries mentioned above are installed properly.
2023-01-23 21:06:49.227659: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2023-01-23 21:06:49.860463: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1613] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 14610 MB memory:  -> device: 0, name: Tesla V100-PCIE-16GB, pci bus id: 0000:37:00.0, compute capability: 7.0
Epochs:  100
Optimizer:  RMSprop(learning_rate=0.001)
Loss function name:  abs_loss_function
Csv file used:  black_background_500x500.csv
Verbose:  2
Unique name:  RMSprop_abs_loss_function_0001_model_h_
Output folder:  iter6
Model name:  load_model_h
 
        ################ MODEL ############### 

        inputs = keras.Input(shape=(input_size, input_size, 1))
        x = layers.Conv2D(filters=64, kernel_size=11, activation="relu")(inputs)
        x = layers.Conv2D(filters=64, kernel_size=11, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=5, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=5, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Flatten()(x)
        x = layers.Dense(210, activation="relu")(x)
        x = layers.Dense(210, activation="relu")(x)
        x = layers.Dense(210, activation="relu")(x)
        x = layers.Dense(32, activation="sigmoid")(x)
        outputs = layers.Dense(3)(x)

        model = keras.Model(inputs=inputs, outputs=outputs)
    
Model: "model"
_________________________________________________________________
 Layer (type)                Output Shape              Param #   
=================================================================
 input_1 (InputLayer)        [(None, 500, 500, 1)]     0         
                                                                 
 conv2d (Conv2D)             (None, 490, 490, 64)      7808      
                                                                 
 conv2d_1 (Conv2D)           (None, 480, 480, 64)      495680    
                                                                 
 max_pooling2d (MaxPooling2D  (None, 240, 240, 64)     0         
 )                                                               
                                                                 
 conv2d_2 (Conv2D)           (None, 236, 236, 64)      102464    
                                                                 
 conv2d_3 (Conv2D)           (None, 232, 232, 64)      102464    
                                                                 
 max_pooling2d_1 (MaxPooling  (None, 116, 116, 64)     0         
 2D)                                                             
                                                                 
 conv2d_4 (Conv2D)           (None, 114, 114, 64)      36928     
                                                                 
 conv2d_5 (Conv2D)           (None, 112, 112, 64)      36928     
                                                                 
 max_pooling2d_2 (MaxPooling  (None, 56, 56, 64)       0         
 2D)                                                             
                                                                 
 conv2d_6 (Conv2D)           (None, 54, 54, 64)        36928     
                                                                 
 conv2d_7 (Conv2D)           (None, 52, 52, 64)        36928     
                                                                 
 max_pooling2d_3 (MaxPooling  (None, 26, 26, 64)       0         
 2D)                                                             
                                                                 
 conv2d_8 (Conv2D)           (None, 24, 24, 64)        36928     
                                                                 
 conv2d_9 (Conv2D)           (None, 22, 22, 64)        36928     
                                                                 
 max_pooling2d_4 (MaxPooling  (None, 11, 11, 64)       0         
 2D)                                                             
                                                                 
 conv2d_10 (Conv2D)          (None, 9, 9, 64)          36928     
                                                                 
 conv2d_11 (Conv2D)          (None, 7, 7, 64)          36928     
                                                                 
 max_pooling2d_5 (MaxPooling  (None, 3, 3, 64)         0         
 2D)                                                             
                                                                 
 flatten (Flatten)           (None, 576)               0         
                                                                 
 dense (Dense)               (None, 210)               121170    
                                                                 
 dense_1 (Dense)             (None, 210)               44310     
                                                                 
 dense_2 (Dense)             (None, 210)               44310     
                                                                 
 dense_3 (Dense)             (None, 32)                6752      
                                                                 
 dense_4 (Dense)             (None, 3)                 99        
                                                                 
=================================================================
Total params: 1,220,481
Trainable params: 1,220,481
Non-trainable params: 0
_________________________________________________________________
/zhome/ab/7/153983/project/venv/lib/python3.10/site-packages/keras/utils/image_utils.py:409: UserWarning: grayscale is deprecated. Please use color_mode = "grayscale"
  warnings.warn(
Epoch 1/100
2023-01-23 21:06:53.903622: I tensorflow/compiler/xla/stream_executor/cuda/cuda_dnn.cc:428] Loaded cuDNN version 8302
273/273 - 263s - loss: 0.2565 - abs_loss_function: 0.2565 - accuracy: 0.3987 - val_loss: 0.2441 - val_abs_loss_function: 0.2441 - val_accuracy: 0.3518 - 263s/epoch - 964ms/step
Epoch 2/100
273/273 - 235s - loss: 0.2358 - abs_loss_function: 0.2358 - accuracy: 0.3537 - val_loss: 0.2336 - val_abs_loss_function: 0.2336 - val_accuracy: 0.3629 - 235s/epoch - 861ms/step
Epoch 3/100
273/273 - 235s - loss: 0.2471 - abs_loss_function: 0.2471 - accuracy: 0.3966 - val_loss: 0.2342 - val_abs_loss_function: 0.2342 - val_accuracy: 0.2994 - 235s/epoch - 860ms/step
Epoch 4/100
273/273 - 235s - loss: 0.2422 - abs_loss_function: 0.2422 - accuracy: 0.3697 - val_loss: 0.2767 - val_abs_loss_function: 0.2767 - val_accuracy: 0.3387 - 235s/epoch - 860ms/step
Epoch 5/100
273/273 - 235s - loss: 0.2432 - abs_loss_function: 0.2432 - accuracy: 0.3331 - val_loss: 0.2486 - val_abs_loss_function: 0.2486 - val_accuracy: 0.3216 - 235s/epoch - 860ms/step
Epoch 6/100
273/273 - 235s - loss: 0.2369 - abs_loss_function: 0.2369 - accuracy: 0.2951 - val_loss: 0.2470 - val_abs_loss_function: 0.2470 - val_accuracy: 0.3034 - 235s/epoch - 862ms/step
Epoch 7/100
273/273 - 235s - loss: 0.2414 - abs_loss_function: 0.2414 - accuracy: 0.3693 - val_loss: 0.2685 - val_abs_loss_function: 0.2685 - val_accuracy: 0.1754 - 235s/epoch - 860ms/step
Epoch 8/100
273/273 - 235s - loss: 0.2415 - abs_loss_function: 0.2415 - accuracy: 0.2653 - val_loss: 0.2355 - val_abs_loss_function: 0.2355 - val_accuracy: 0.3185 - 235s/epoch - 859ms/step
Epoch 9/100
273/273 - 235s - loss: 0.2400 - abs_loss_function: 0.2400 - accuracy: 0.3765 - val_loss: 0.2618 - val_abs_loss_function: 0.2618 - val_accuracy: 0.3226 - 235s/epoch - 860ms/step
Epoch 10/100
273/273 - 235s - loss: 0.2405 - abs_loss_function: 0.2405 - accuracy: 0.3531 - val_loss: 0.2546 - val_abs_loss_function: 0.2546 - val_accuracy: 0.2530 - 235s/epoch - 860ms/step
Epoch 11/100
273/273 - 235s - loss: 0.2419 - abs_loss_function: 0.2419 - accuracy: 0.3117 - val_loss: 0.2561 - val_abs_loss_function: 0.2561 - val_accuracy: 0.3276 - 235s/epoch - 860ms/step
Epoch 12/100
273/273 - 235s - loss: 0.2479 - abs_loss_function: 0.2479 - accuracy: 0.3357 - val_loss: 0.2384 - val_abs_loss_function: 0.2384 - val_accuracy: 0.2742 - 235s/epoch - 861ms/step
Epoch 13/100
273/273 - 235s - loss: 0.2416 - abs_loss_function: 0.2416 - accuracy: 0.3520 - val_loss: 0.2755 - val_abs_loss_function: 0.2755 - val_accuracy: 0.4052 - 235s/epoch - 860ms/step
Epoch 14/100
273/273 - 235s - loss: 0.2444 - abs_loss_function: 0.2444 - accuracy: 0.3226 - val_loss: 0.2756 - val_abs_loss_function: 0.2756 - val_accuracy: 0.3911 - 235s/epoch - 860ms/step
Epoch 15/100
273/273 - 235s - loss: 0.2406 - abs_loss_function: 0.2406 - accuracy: 0.3555 - val_loss: 0.2499 - val_abs_loss_function: 0.2499 - val_accuracy: 0.3659 - 235s/epoch - 860ms/step
Epoch 16/100
273/273 - 236s - loss: 0.2471 - abs_loss_function: 0.2471 - accuracy: 0.3310 - val_loss: 0.2415 - val_abs_loss_function: 0.2415 - val_accuracy: 0.2802 - 236s/epoch - 863ms/step
Epoch 17/100
273/273 - 235s - loss: 0.2467 - abs_loss_function: 0.2467 - accuracy: 0.3110 - val_loss: 0.2307 - val_abs_loss_function: 0.2307 - val_accuracy: 0.2772 - 235s/epoch - 860ms/step
Epoch 18/100
273/273 - 235s - loss: 0.2394 - abs_loss_function: 0.2394 - accuracy: 0.3600 - val_loss: 0.2624 - val_abs_loss_function: 0.2624 - val_accuracy: 0.2762 - 235s/epoch - 862ms/step
Epoch 19/100
273/273 - 235s - loss: 0.2394 - abs_loss_function: 0.2394 - accuracy: 0.3225 - val_loss: 0.2341 - val_abs_loss_function: 0.2341 - val_accuracy: 0.3569 - 235s/epoch - 859ms/step
Epoch 20/100
273/273 - 235s - loss: 0.2384 - abs_loss_function: 0.2384 - accuracy: 0.2906 - val_loss: 0.2448 - val_abs_loss_function: 0.2448 - val_accuracy: 0.3155 - 235s/epoch - 860ms/step
Epoch 21/100
273/273 - 235s - loss: 0.2414 - abs_loss_function: 0.2414 - accuracy: 0.3451 - val_loss: 0.2715 - val_abs_loss_function: 0.2715 - val_accuracy: 0.3085 - 235s/epoch - 861ms/step
Epoch 22/100
273/273 - 235s - loss: 0.2365 - abs_loss_function: 0.2365 - accuracy: 0.3345 - val_loss: 0.2426 - val_abs_loss_function: 0.2426 - val_accuracy: 0.3508 - 235s/epoch - 859ms/step
Epoch 23/100
273/273 - 235s - loss: 0.2441 - abs_loss_function: 0.2441 - accuracy: 0.3411 - val_loss: 0.2564 - val_abs_loss_function: 0.2564 - val_accuracy: 0.2873 - 235s/epoch - 860ms/step
Epoch 24/100
273/273 - 235s - loss: 0.2363 - abs_loss_function: 0.2363 - accuracy: 0.2951 - val_loss: 0.2271 - val_abs_loss_function: 0.2271 - val_accuracy: 0.1643 - 235s/epoch - 860ms/step
Epoch 25/100
273/273 - 235s - loss: 0.2453 - abs_loss_function: 0.2453 - accuracy: 0.3210 - val_loss: 0.2128 - val_abs_loss_function: 0.2128 - val_accuracy: 0.3962 - 235s/epoch - 860ms/step
Epoch 26/100
273/273 - 235s - loss: 0.2406 - abs_loss_function: 0.2406 - accuracy: 0.2932 - val_loss: 0.2444 - val_abs_loss_function: 0.2444 - val_accuracy: 0.3942 - 235s/epoch - 860ms/step
Epoch 27/100
273/273 - 235s - loss: 0.2420 - abs_loss_function: 0.2420 - accuracy: 0.3700 - val_loss: 0.2595 - val_abs_loss_function: 0.2595 - val_accuracy: 0.2167 - 235s/epoch - 860ms/step
Epoch 28/100
273/273 - 235s - loss: 0.2399 - abs_loss_function: 0.2399 - accuracy: 0.3567 - val_loss: 0.2325 - val_abs_loss_function: 0.2325 - val_accuracy: 0.2712 - 235s/epoch - 861ms/step
Epoch 29/100
273/273 - 235s - loss: 0.2419 - abs_loss_function: 0.2419 - accuracy: 0.3284 - val_loss: 0.2678 - val_abs_loss_function: 0.2678 - val_accuracy: 0.3296 - 235s/epoch - 861ms/step
Epoch 30/100
273/273 - 235s - loss: 0.2371 - abs_loss_function: 0.2371 - accuracy: 0.2619 - val_loss: 0.2552 - val_abs_loss_function: 0.2552 - val_accuracy: 0.2883 - 235s/epoch - 861ms/step
Epoch 31/100
273/273 - 235s - loss: 0.2393 - abs_loss_function: 0.2393 - accuracy: 0.3338 - val_loss: 0.2348 - val_abs_loss_function: 0.2348 - val_accuracy: 0.3468 - 235s/epoch - 861ms/step
Epoch 32/100
273/273 - 235s - loss: 0.2435 - abs_loss_function: 0.2435 - accuracy: 0.2815 - val_loss: 0.2802 - val_abs_loss_function: 0.2802 - val_accuracy: 0.3448 - 235s/epoch - 860ms/step
Epoch 33/100
273/273 - 235s - loss: 0.2368 - abs_loss_function: 0.2368 - accuracy: 0.2924 - val_loss: 0.2162 - val_abs_loss_function: 0.2162 - val_accuracy: 0.2742 - 235s/epoch - 861ms/step
Epoch 34/100
273/273 - 235s - loss: 0.2468 - abs_loss_function: 0.2468 - accuracy: 0.3467 - val_loss: 0.2453 - val_abs_loss_function: 0.2453 - val_accuracy: 0.3438 - 235s/epoch - 860ms/step
Epoch 35/100
273/273 - 235s - loss: 0.2366 - abs_loss_function: 0.2366 - accuracy: 0.3027 - val_loss: 0.2402 - val_abs_loss_function: 0.2402 - val_accuracy: 0.4173 - 235s/epoch - 860ms/step
Epoch 36/100
273/273 - 235s - loss: 0.2356 - abs_loss_function: 0.2356 - accuracy: 0.3334 - val_loss: 0.2674 - val_abs_loss_function: 0.2674 - val_accuracy: 0.2631 - 235s/epoch - 860ms/step
Epoch 37/100
273/273 - 235s - loss: 0.2457 - abs_loss_function: 0.2457 - accuracy: 0.3202 - val_loss: 0.2283 - val_abs_loss_function: 0.2283 - val_accuracy: 0.3236 - 235s/epoch - 859ms/step
Epoch 38/100
273/273 - 235s - loss: 0.2375 - abs_loss_function: 0.2375 - accuracy: 0.3606 - val_loss: 0.2608 - val_abs_loss_function: 0.2608 - val_accuracy: 0.3619 - 235s/epoch - 860ms/step
Epoch 39/100
273/273 - 235s - loss: 0.2450 - abs_loss_function: 0.2450 - accuracy: 0.3837 - val_loss: 0.2229 - val_abs_loss_function: 0.2229 - val_accuracy: 0.4385 - 235s/epoch - 860ms/step
Epoch 40/100
273/273 - 235s - loss: 0.2350 - abs_loss_function: 0.2350 - accuracy: 0.3165 - val_loss: 0.2606 - val_abs_loss_function: 0.2606 - val_accuracy: 0.3790 - 235s/epoch - 860ms/step
Epoch 41/100
273/273 - 235s - loss: 0.2399 - abs_loss_function: 0.2399 - accuracy: 0.2919 - val_loss: 0.2607 - val_abs_loss_function: 0.2607 - val_accuracy: 0.2812 - 235s/epoch - 859ms/step
Epoch 42/100
273/273 - 235s - loss: 0.2378 - abs_loss_function: 0.2378 - accuracy: 0.2827 - val_loss: 0.2653 - val_abs_loss_function: 0.2653 - val_accuracy: 0.4274 - 235s/epoch - 860ms/step
Epoch 43/100
273/273 - 235s - loss: 0.2371 - abs_loss_function: 0.2371 - accuracy: 0.3136 - val_loss: 0.2735 - val_abs_loss_function: 0.2735 - val_accuracy: 0.3649 - 235s/epoch - 860ms/step
Epoch 44/100
273/273 - 235s - loss: 0.2429 - abs_loss_function: 0.2429 - accuracy: 0.3526 - val_loss: 0.2558 - val_abs_loss_function: 0.2558 - val_accuracy: 0.3690 - 235s/epoch - 859ms/step
Epoch 45/100
273/273 - 235s - loss: 0.2415 - abs_loss_function: 0.2415 - accuracy: 0.2420 - val_loss: 0.2553 - val_abs_loss_function: 0.2553 - val_accuracy: 0.4163 - 235s/epoch - 860ms/step
Epoch 46/100
273/273 - 235s - loss: 0.2440 - abs_loss_function: 0.2440 - accuracy: 0.3324 - val_loss: 0.2457 - val_abs_loss_function: 0.2457 - val_accuracy: 0.2812 - 235s/epoch - 860ms/step
Epoch 47/100
273/273 - 235s - loss: 0.2367 - abs_loss_function: 0.2367 - accuracy: 0.2744 - val_loss: 0.2403 - val_abs_loss_function: 0.2403 - val_accuracy: 0.2863 - 235s/epoch - 859ms/step
Epoch 48/100
273/273 - 235s - loss: 0.2419 - abs_loss_function: 0.2419 - accuracy: 0.3346 - val_loss: 0.2265 - val_abs_loss_function: 0.2265 - val_accuracy: 0.2198 - 235s/epoch - 861ms/step
Epoch 49/100
273/273 - 235s - loss: 0.2384 - abs_loss_function: 0.2384 - accuracy: 0.3229 - val_loss: 0.2394 - val_abs_loss_function: 0.2394 - val_accuracy: 0.2792 - 235s/epoch - 860ms/step
Epoch 50/100
273/273 - 235s - loss: 0.2471 - abs_loss_function: 0.2471 - accuracy: 0.3190 - val_loss: 0.2610 - val_abs_loss_function: 0.2610 - val_accuracy: 0.3720 - 235s/epoch - 860ms/step
Epoch 51/100
273/273 - 235s - loss: 0.2399 - abs_loss_function: 0.2399 - accuracy: 0.3874 - val_loss: 0.2462 - val_abs_loss_function: 0.2462 - val_accuracy: 0.3185 - 235s/epoch - 860ms/step
Epoch 52/100
273/273 - 235s - loss: 0.2348 - abs_loss_function: 0.2348 - accuracy: 0.2693 - val_loss: 0.2456 - val_abs_loss_function: 0.2456 - val_accuracy: 0.2661 - 235s/epoch - 860ms/step
Epoch 53/100
273/273 - 235s - loss: 0.2407 - abs_loss_function: 0.2407 - accuracy: 0.3755 - val_loss: 0.2321 - val_abs_loss_function: 0.2321 - val_accuracy: 0.3579 - 235s/epoch - 859ms/step
Epoch 54/100
273/273 - 235s - loss: 0.2416 - abs_loss_function: 0.2416 - accuracy: 0.3444 - val_loss: 0.2418 - val_abs_loss_function: 0.2418 - val_accuracy: 0.3246 - 235s/epoch - 860ms/step
Epoch 55/100
273/273 - 235s - loss: 0.2497 - abs_loss_function: 0.2497 - accuracy: 0.3391 - val_loss: 0.2625 - val_abs_loss_function: 0.2625 - val_accuracy: 0.2308 - 235s/epoch - 860ms/step
Epoch 56/100
273/273 - 235s - loss: 0.2479 - abs_loss_function: 0.2479 - accuracy: 0.3415 - val_loss: 0.2601 - val_abs_loss_function: 0.2601 - val_accuracy: 0.2984 - 235s/epoch - 860ms/step
Epoch 57/100
273/273 - 235s - loss: 0.2391 - abs_loss_function: 0.2391 - accuracy: 0.3658 - val_loss: 0.2467 - val_abs_loss_function: 0.2467 - val_accuracy: 0.1946 - 235s/epoch - 860ms/step
Epoch 58/100
273/273 - 235s - loss: 0.2415 - abs_loss_function: 0.2415 - accuracy: 0.3312 - val_loss: 0.2576 - val_abs_loss_function: 0.2576 - val_accuracy: 0.3750 - 235s/epoch - 860ms/step
Epoch 59/100
273/273 - 235s - loss: 0.2478 - abs_loss_function: 0.2478 - accuracy: 0.3875 - val_loss: 0.2755 - val_abs_loss_function: 0.2755 - val_accuracy: 0.3427 - 235s/epoch - 860ms/step
Epoch 60/100
273/273 - 234s - loss: 0.2454 - abs_loss_function: 0.2454 - accuracy: 0.3342 - val_loss: 0.2627 - val_abs_loss_function: 0.2627 - val_accuracy: 0.2429 - 234s/epoch - 859ms/step
Epoch 61/100
273/273 - 235s - loss: 0.2457 - abs_loss_function: 0.2457 - accuracy: 0.3229 - val_loss: 0.2437 - val_abs_loss_function: 0.2437 - val_accuracy: 0.2621 - 235s/epoch - 861ms/step
Epoch 62/100
273/273 - 235s - loss: 0.2428 - abs_loss_function: 0.2428 - accuracy: 0.3418 - val_loss: 0.2637 - val_abs_loss_function: 0.2637 - val_accuracy: 0.3054 - 235s/epoch - 861ms/step
Epoch 63/100
273/273 - 234s - loss: 0.2376 - abs_loss_function: 0.2376 - accuracy: 0.3360 - val_loss: 0.2614 - val_abs_loss_function: 0.2614 - val_accuracy: 0.3548 - 234s/epoch - 859ms/step
Epoch 64/100
273/273 - 235s - loss: 0.2486 - abs_loss_function: 0.2486 - accuracy: 0.2960 - val_loss: 0.2674 - val_abs_loss_function: 0.2674 - val_accuracy: 0.2611 - 235s/epoch - 861ms/step
Epoch 65/100
273/273 - 235s - loss: 0.2364 - abs_loss_function: 0.2364 - accuracy: 0.3474 - val_loss: 0.2356 - val_abs_loss_function: 0.2356 - val_accuracy: 0.2298 - 235s/epoch - 860ms/step
Epoch 66/100
273/273 - 235s - loss: 0.2400 - abs_loss_function: 0.2400 - accuracy: 0.3001 - val_loss: 0.2190 - val_abs_loss_function: 0.2190 - val_accuracy: 0.1855 - 235s/epoch - 860ms/step
Epoch 67/100
273/273 - 235s - loss: 0.2465 - abs_loss_function: 0.2465 - accuracy: 0.3741 - val_loss: 0.2470 - val_abs_loss_function: 0.2470 - val_accuracy: 0.3740 - 235s/epoch - 860ms/step
Epoch 68/100
273/273 - 235s - loss: 0.2387 - abs_loss_function: 0.2387 - accuracy: 0.3368 - val_loss: 0.2725 - val_abs_loss_function: 0.2725 - val_accuracy: 0.2933 - 235s/epoch - 860ms/step
Epoch 69/100
273/273 - 235s - loss: 0.2397 - abs_loss_function: 0.2397 - accuracy: 0.3613 - val_loss: 0.2429 - val_abs_loss_function: 0.2429 - val_accuracy: 0.3034 - 235s/epoch - 860ms/step
Epoch 70/100
273/273 - 235s - loss: 0.2454 - abs_loss_function: 0.2454 - accuracy: 0.3568 - val_loss: 0.2375 - val_abs_loss_function: 0.2375 - val_accuracy: 0.2107 - 235s/epoch - 860ms/step
Epoch 71/100
273/273 - 235s - loss: 0.2391 - abs_loss_function: 0.2391 - accuracy: 0.3822 - val_loss: 0.2454 - val_abs_loss_function: 0.2454 - val_accuracy: 0.2571 - 235s/epoch - 860ms/step
Epoch 72/100
273/273 - 235s - loss: 0.2492 - abs_loss_function: 0.2492 - accuracy: 0.3554 - val_loss: 0.2394 - val_abs_loss_function: 0.2394 - val_accuracy: 0.4335 - 235s/epoch - 860ms/step
Epoch 73/100
273/273 - 235s - loss: 0.2423 - abs_loss_function: 0.2423 - accuracy: 0.3337 - val_loss: 0.2554 - val_abs_loss_function: 0.2554 - val_accuracy: 0.2540 - 235s/epoch - 860ms/step
Epoch 74/100
273/273 - 235s - loss: 0.2443 - abs_loss_function: 0.2443 - accuracy: 0.3567 - val_loss: 0.2407 - val_abs_loss_function: 0.2407 - val_accuracy: 0.3972 - 235s/epoch - 860ms/step
Epoch 75/100
273/273 - 235s - loss: 0.2402 - abs_loss_function: 0.2402 - accuracy: 0.3085 - val_loss: 0.2532 - val_abs_loss_function: 0.2532 - val_accuracy: 0.4224 - 235s/epoch - 860ms/step
Epoch 76/100
273/273 - 235s - loss: 0.2378 - abs_loss_function: 0.2378 - accuracy: 0.3621 - val_loss: 0.2561 - val_abs_loss_function: 0.2561 - val_accuracy: 0.3044 - 235s/epoch - 860ms/step
Epoch 77/100
User defined signal 2

------------------------------------------------------------
Sender: LSF System <lsfadmin@hpc.dtu.dk>
Subject: Job 15232374: <s202741-train> in cluster <dcc> Exited

Job <s202741-train> was submitted from host <n-62-20-1> by user <s202741> in cluster <dcc> at Sun Jan 22 12:32:42 2023
Job was executed on host(s) <4*n-62-20-2>, in queue <gpuv100>, as user <s202741> in cluster <dcc> at Mon Jan 23 21:06:38 2023
</zhome/ab/7/153983> was used as the home directory.
</zhome/ab/7/153983/project/scripts> was used as the working directory.
Started at Mon Jan 23 21:06:38 2023
Terminated at Tue Jan 24 02:07:58 2023
Results reported at Tue Jan 24 02:07:58 2023

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#!/bin/bash
### General options
### -- specify queue --   NOTE: TitanX is significantly faster than K80
#BSUB -q gpuv100
#BSUB -gpu "num=1:mode=exclusive_process"
### -- set the job Name --
#BSUB -J s202741-train
### -- ask for number of cores (default: 1) --
#BSUB -n 4
#BSUB -R "span[hosts=1]"
### -- set walltime limit: hh:mm --  maximum 24 hours for GPU-queues right now
#BSUB -W 5:00
# request 5GB of memory
#BSUB -R "rusage[mem=5GB]"
### -- Specify the output and error file. %J is the job-id --
### -- -o and -e mean append, -oo and -eo mean overwrite --
#BSUB -o iter6/Logs/RMSprop_abs_loss_function_0001_model_h_%J.out
# -- end of LSF options --

# Necessary modules
cd ..
source venv/bin/activate

python trainModelIter3.py 100 "RMSprop(learning_rate=0.001)" "abs_loss_function" "black_background_500x500.csv" 2 "RMSprop_abs_loss_function_0001_model_h_" "iter6" "load_model_h"

    
------------------------------------------------------------

TERM_RUNLIMIT: job killed after reaching LSF run time limit.
Exited with exit code 140.

Resource usage summary:

    CPU time :                                   20767.00 sec.
    Max Memory :                                 2485 MB
    Average Memory :                             2377.31 MB
    Total Requested Memory :                     20480.00 MB
    Delta Memory :                               17995.00 MB
    Max Swap :                                   2 MB
    Max Processes :                              4
    Max Threads :                                33
    Run time :                                   18081 sec.
    Turnaround time :                            135316 sec.

The output (if any) is above this job summary.

