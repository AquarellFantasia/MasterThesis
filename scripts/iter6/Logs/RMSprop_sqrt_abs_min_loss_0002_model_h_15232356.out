Loaded dependency [python3/3.10.7]: gcc/11.3.0-binutils-2.38
Loaded module: python3/3.10.7

Loading python3/3.10.7
  Loading requirement: gcc/11.3.0-binutils-2.38
Loaded module: cuda/11.6
Loaded module: cudnn/v8.3.2.44-prod-cuda-11.X
2023-01-23 05:03:18.196423: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2023-01-23 05:03:19.650892: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer.so.7'; dlerror: libnvinfer.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /appl/cudnn/v8.3.2.44-prod-cuda-11.5/lib:/appl/cuda/11.6.0/lib64:/appl/python/3.10.7/lib:/appl/gcc/11.3.0-binutils-2.38/lib64:/appl/gcc/11.3.0-binutils-2.38/lib:/lsf/10.1/linux3.10-glibc2.17-x86_64/lib
2023-01-23 05:03:19.651559: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer_plugin.so.7'; dlerror: libnvinfer_plugin.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /appl/cudnn/v8.3.2.44-prod-cuda-11.5/lib:/appl/cuda/11.6.0/lib64:/appl/python/3.10.7/lib:/appl/gcc/11.3.0-binutils-2.38/lib64:/appl/gcc/11.3.0-binutils-2.38/lib:/lsf/10.1/linux3.10-glibc2.17-x86_64/lib
2023-01-23 05:03:19.651572: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Cannot dlopen some TensorRT libraries. If you would like to use Nvidia GPU with TensorRT, please make sure the missing libraries mentioned above are installed properly.
2023-01-23 05:03:22.788165: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2023-01-23 05:03:23.475004: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1613] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 30961 MB memory:  -> device: 0, name: Tesla V100-SXM2-32GB, pci bus id: 0000:16:00.0, compute capability: 7.0
Epochs:  100
Optimizer:  RMSprop(learning_rate=0.002)
Loss function name:  sqrt_abs_min_loss
Csv file used:  black_background_500x500.csv
Verbose:  2
Unique name:  RMSprop_sqrt_abs_min_loss_0002_model_h_
Output folder:  iter6
Model name:  load_model_h
 
        ################ MODEL ############### 

        inputs = keras.Input(shape=(input_size, input_size, 1))
        x = layers.Conv2D(filters=64, kernel_size=11, activation="relu")(inputs)
        x = layers.Conv2D(filters=64, kernel_size=11, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=5, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=5, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Flatten()(x)
        x = layers.Dense(210, activation="relu")(x)
        x = layers.Dense(210, activation="relu")(x)
        x = layers.Dense(210, activation="relu")(x)
        x = layers.Dense(32, activation="sigmoid")(x)
        outputs = layers.Dense(3)(x)

        model = keras.Model(inputs=inputs, outputs=outputs)
    
Model: "model"
_________________________________________________________________
 Layer (type)                Output Shape              Param #   
=================================================================
 input_1 (InputLayer)        [(None, 500, 500, 1)]     0         
                                                                 
 conv2d (Conv2D)             (None, 490, 490, 64)      7808      
                                                                 
 conv2d_1 (Conv2D)           (None, 480, 480, 64)      495680    
                                                                 
 max_pooling2d (MaxPooling2D  (None, 240, 240, 64)     0         
 )                                                               
                                                                 
 conv2d_2 (Conv2D)           (None, 236, 236, 64)      102464    
                                                                 
 conv2d_3 (Conv2D)           (None, 232, 232, 64)      102464    
                                                                 
 max_pooling2d_1 (MaxPooling  (None, 116, 116, 64)     0         
 2D)                                                             
                                                                 
 conv2d_4 (Conv2D)           (None, 114, 114, 64)      36928     
                                                                 
 conv2d_5 (Conv2D)           (None, 112, 112, 64)      36928     
                                                                 
 max_pooling2d_2 (MaxPooling  (None, 56, 56, 64)       0         
 2D)                                                             
                                                                 
 conv2d_6 (Conv2D)           (None, 54, 54, 64)        36928     
                                                                 
 conv2d_7 (Conv2D)           (None, 52, 52, 64)        36928     
                                                                 
 max_pooling2d_3 (MaxPooling  (None, 26, 26, 64)       0         
 2D)                                                             
                                                                 
 conv2d_8 (Conv2D)           (None, 24, 24, 64)        36928     
                                                                 
 conv2d_9 (Conv2D)           (None, 22, 22, 64)        36928     
                                                                 
 max_pooling2d_4 (MaxPooling  (None, 11, 11, 64)       0         
 2D)                                                             
                                                                 
 conv2d_10 (Conv2D)          (None, 9, 9, 64)          36928     
                                                                 
 conv2d_11 (Conv2D)          (None, 7, 7, 64)          36928     
                                                                 
 max_pooling2d_5 (MaxPooling  (None, 3, 3, 64)         0         
 2D)                                                             
                                                                 
 flatten (Flatten)           (None, 576)               0         
                                                                 
 dense (Dense)               (None, 210)               121170    
                                                                 
 dense_1 (Dense)             (None, 210)               44310     
                                                                 
 dense_2 (Dense)             (None, 210)               44310     
                                                                 
 dense_3 (Dense)             (None, 32)                6752      
                                                                 
 dense_4 (Dense)             (None, 3)                 99        
                                                                 
=================================================================
Total params: 1,220,481
Trainable params: 1,220,481
Non-trainable params: 0
_________________________________________________________________
/zhome/ab/7/153983/project/venv/lib/python3.10/site-packages/keras/utils/image_utils.py:409: UserWarning: grayscale is deprecated. Please use color_mode = "grayscale"
  warnings.warn(
Epoch 1/100
2023-01-23 05:03:26.776313: I tensorflow/compiler/xla/stream_executor/cuda/cuda_dnn.cc:428] Loaded cuDNN version 8302
273/273 - 249s - loss: 0.4608 - sqrt_abs_min_loss: 0.4608 - accuracy: 0.3219 - val_loss: 0.4869 - val_sqrt_abs_min_loss: 0.4869 - val_accuracy: 0.2923 - 249s/epoch - 911ms/step
Epoch 2/100
273/273 - 223s - loss: 0.4566 - sqrt_abs_min_loss: 0.4566 - accuracy: 0.2941 - val_loss: 0.4657 - val_sqrt_abs_min_loss: 0.4657 - val_accuracy: 0.2480 - 223s/epoch - 817ms/step
Epoch 3/100
273/273 - 223s - loss: 0.4677 - sqrt_abs_min_loss: 0.4677 - accuracy: 0.3522 - val_loss: 0.4813 - val_sqrt_abs_min_loss: 0.4813 - val_accuracy: 0.3286 - 223s/epoch - 818ms/step
Epoch 4/100
273/273 - 224s - loss: 0.4658 - sqrt_abs_min_loss: 0.4658 - accuracy: 0.3217 - val_loss: 0.4287 - val_sqrt_abs_min_loss: 0.4287 - val_accuracy: 0.2480 - 224s/epoch - 819ms/step
Epoch 5/100
273/273 - 223s - loss: 0.4610 - sqrt_abs_min_loss: 0.4610 - accuracy: 0.3143 - val_loss: 0.4701 - val_sqrt_abs_min_loss: 0.4701 - val_accuracy: 0.3558 - 223s/epoch - 816ms/step
Epoch 6/100
273/273 - 223s - loss: 0.4641 - sqrt_abs_min_loss: 0.4641 - accuracy: 0.3391 - val_loss: 0.4523 - val_sqrt_abs_min_loss: 0.4523 - val_accuracy: 0.3982 - 223s/epoch - 818ms/step
Epoch 7/100
273/273 - 223s - loss: 0.4672 - sqrt_abs_min_loss: 0.4672 - accuracy: 0.3591 - val_loss: 0.4819 - val_sqrt_abs_min_loss: 0.4819 - val_accuracy: 0.3770 - 223s/epoch - 816ms/step
Epoch 8/100
273/273 - 223s - loss: 0.4646 - sqrt_abs_min_loss: 0.4646 - accuracy: 0.3433 - val_loss: 0.4795 - val_sqrt_abs_min_loss: 0.4795 - val_accuracy: 0.3206 - 223s/epoch - 816ms/step
Epoch 9/100
273/273 - 223s - loss: 0.4675 - sqrt_abs_min_loss: 0.4675 - accuracy: 0.3932 - val_loss: 0.4642 - val_sqrt_abs_min_loss: 0.4642 - val_accuracy: 0.3226 - 223s/epoch - 816ms/step
Epoch 10/100
273/273 - 223s - loss: 0.4607 - sqrt_abs_min_loss: 0.4607 - accuracy: 0.3579 - val_loss: 0.4726 - val_sqrt_abs_min_loss: 0.4726 - val_accuracy: 0.3175 - 223s/epoch - 818ms/step
Epoch 11/100
273/273 - 223s - loss: 0.4666 - sqrt_abs_min_loss: 0.4666 - accuracy: 0.3489 - val_loss: 0.4574 - val_sqrt_abs_min_loss: 0.4574 - val_accuracy: 0.3357 - 223s/epoch - 818ms/step
Epoch 12/100
273/273 - 223s - loss: 0.4605 - sqrt_abs_min_loss: 0.4605 - accuracy: 0.2857 - val_loss: 0.4757 - val_sqrt_abs_min_loss: 0.4757 - val_accuracy: 0.3196 - 223s/epoch - 818ms/step
Epoch 13/100
273/273 - 223s - loss: 0.4634 - sqrt_abs_min_loss: 0.4634 - accuracy: 0.3458 - val_loss: 0.4422 - val_sqrt_abs_min_loss: 0.4422 - val_accuracy: 0.4375 - 223s/epoch - 818ms/step
Epoch 14/100
273/273 - 223s - loss: 0.4646 - sqrt_abs_min_loss: 0.4646 - accuracy: 0.2941 - val_loss: 0.4698 - val_sqrt_abs_min_loss: 0.4698 - val_accuracy: 0.4536 - 223s/epoch - 817ms/step
Epoch 15/100
273/273 - 223s - loss: 0.4597 - sqrt_abs_min_loss: 0.4597 - accuracy: 0.3148 - val_loss: 0.4726 - val_sqrt_abs_min_loss: 0.4726 - val_accuracy: 0.2308 - 223s/epoch - 816ms/step
Epoch 16/100
273/273 - 223s - loss: 0.4646 - sqrt_abs_min_loss: 0.4646 - accuracy: 0.3402 - val_loss: 0.4674 - val_sqrt_abs_min_loss: 0.4674 - val_accuracy: 0.3468 - 223s/epoch - 816ms/step
Epoch 17/100
273/273 - 223s - loss: 0.4740 - sqrt_abs_min_loss: 0.4740 - accuracy: 0.3551 - val_loss: 0.4505 - val_sqrt_abs_min_loss: 0.4505 - val_accuracy: 0.2994 - 223s/epoch - 816ms/step
Epoch 18/100
273/273 - 223s - loss: 0.4657 - sqrt_abs_min_loss: 0.4657 - accuracy: 0.3213 - val_loss: 0.4812 - val_sqrt_abs_min_loss: 0.4812 - val_accuracy: 0.3075 - 223s/epoch - 815ms/step
Epoch 19/100
273/273 - 223s - loss: 0.4699 - sqrt_abs_min_loss: 0.4699 - accuracy: 0.3628 - val_loss: 0.4885 - val_sqrt_abs_min_loss: 0.4885 - val_accuracy: 0.3498 - 223s/epoch - 817ms/step
Epoch 20/100
273/273 - 223s - loss: 0.4674 - sqrt_abs_min_loss: 0.4674 - accuracy: 0.3421 - val_loss: 0.4916 - val_sqrt_abs_min_loss: 0.4916 - val_accuracy: 0.1623 - 223s/epoch - 815ms/step
Epoch 21/100
273/273 - 223s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.3179 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.3226 - 223s/epoch - 816ms/step
Epoch 22/100
273/273 - 222s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.3275 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.3115 - 222s/epoch - 814ms/step
Epoch 23/100
273/273 - 222s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.3250 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.4798 - 222s/epoch - 814ms/step
Epoch 24/100
273/273 - 222s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.3324 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.3427 - 222s/epoch - 814ms/step
Epoch 25/100
273/273 - 222s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.3632 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.3427 - 222s/epoch - 814ms/step
Epoch 26/100
273/273 - 223s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.3127 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.2621 - 223s/epoch - 816ms/step
Epoch 27/100
273/273 - 222s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.3368 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.3216 - 222s/epoch - 815ms/step
Epoch 28/100
273/273 - 222s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.3133 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.3931 - 222s/epoch - 814ms/step
Epoch 29/100
273/273 - 222s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.3264 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.3911 - 222s/epoch - 813ms/step
Epoch 30/100
273/273 - 222s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.3712 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.2450 - 222s/epoch - 813ms/step
Epoch 31/100
273/273 - 222s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.3337 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.3800 - 222s/epoch - 814ms/step
Epoch 32/100
273/273 - 222s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.3249 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.2812 - 222s/epoch - 814ms/step
Epoch 33/100
273/273 - 222s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.3062 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.4173 - 222s/epoch - 814ms/step
Epoch 34/100
273/273 - 223s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.3664 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.4919 - 223s/epoch - 817ms/step
Epoch 35/100
273/273 - 223s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.3467 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.3286 - 223s/epoch - 816ms/step
Epoch 36/100
273/273 - 222s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.3657 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.1915 - 222s/epoch - 815ms/step
Epoch 37/100
273/273 - 223s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.3687 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.3044 - 223s/epoch - 815ms/step
Epoch 38/100
273/273 - 222s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.3340 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.3034 - 222s/epoch - 814ms/step
Epoch 39/100
273/273 - 222s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.3381 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.3518 - 222s/epoch - 814ms/step
Epoch 40/100
273/273 - 222s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.2890 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.4486 - 222s/epoch - 814ms/step
Epoch 41/100
273/273 - 222s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.3152 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.2732 - 222s/epoch - 815ms/step
Epoch 42/100
273/273 - 223s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.3464 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.4950 - 223s/epoch - 815ms/step
Epoch 43/100
273/273 - 222s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.3294 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.3921 - 222s/epoch - 813ms/step
Epoch 44/100
273/273 - 222s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.2933 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.2782 - 222s/epoch - 814ms/step
Epoch 45/100
273/273 - 222s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.3481 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.4587 - 222s/epoch - 814ms/step
Epoch 46/100
273/273 - 222s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.3191 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.3881 - 222s/epoch - 815ms/step
Epoch 47/100
273/273 - 222s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.2739 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.3196 - 222s/epoch - 814ms/step
Epoch 48/100
273/273 - 222s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.2743 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.4526 - 222s/epoch - 814ms/step
Epoch 49/100
273/273 - 222s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.3299 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.2490 - 222s/epoch - 814ms/step
Epoch 50/100
273/273 - 222s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.3038 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.3236 - 222s/epoch - 815ms/step
Epoch 51/100
273/273 - 222s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.3188 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.3397 - 222s/epoch - 813ms/step
Epoch 52/100
273/273 - 222s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.2804 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.3498 - 222s/epoch - 814ms/step
Epoch 53/100
273/273 - 222s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.3296 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.4536 - 222s/epoch - 813ms/step
Epoch 54/100
273/273 - 224s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.3562 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.2419 - 224s/epoch - 822ms/step
Epoch 55/100
273/273 - 223s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.3273 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.3357 - 223s/epoch - 817ms/step
Epoch 56/100
273/273 - 223s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.3182 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.3286 - 223s/epoch - 816ms/step
Epoch 57/100
273/273 - 226s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.2961 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.3780 - 226s/epoch - 828ms/step
Epoch 58/100
273/273 - 222s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.3618 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.2974 - 222s/epoch - 815ms/step
Epoch 59/100
273/273 - 222s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.3492 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.3427 - 222s/epoch - 815ms/step
Epoch 60/100
273/273 - 226s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.2720 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.2923 - 226s/epoch - 827ms/step
Epoch 61/100
273/273 - 223s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.3246 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.3407 - 223s/epoch - 816ms/step
Epoch 62/100
273/273 - 227s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.3440 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.3256 - 227s/epoch - 833ms/step
Epoch 63/100
273/273 - 222s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.3409 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.2732 - 222s/epoch - 814ms/step
Epoch 64/100
273/273 - 223s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.2962 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.3639 - 223s/epoch - 815ms/step
Epoch 65/100
273/273 - 243s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.2977 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.3569 - 243s/epoch - 891ms/step
Epoch 66/100
273/273 - 239s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.3178 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.3498 - 239s/epoch - 874ms/step
Epoch 67/100
273/273 - 239s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.3017 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.3125 - 239s/epoch - 876ms/step
Epoch 68/100
273/273 - 224s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.3489 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.3720 - 224s/epoch - 822ms/step
Epoch 69/100
273/273 - 222s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.3559 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.2692 - 222s/epoch - 813ms/step
Epoch 70/100
273/273 - 222s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.3181 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.3528 - 222s/epoch - 814ms/step
Epoch 71/100
273/273 - 226s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.3727 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.4194 - 226s/epoch - 827ms/step
Epoch 72/100
273/273 - 239s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.3268 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.3538 - 239s/epoch - 874ms/step
Epoch 73/100
273/273 - 226s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.3576 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.3629 - 226s/epoch - 828ms/step
Epoch 74/100
273/273 - 239s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.3429 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.3085 - 239s/epoch - 875ms/step
Epoch 75/100
273/273 - 222s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.3407 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.3579 - 222s/epoch - 813ms/step
Epoch 76/100
273/273 - 226s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.3378 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.3024 - 226s/epoch - 828ms/step
Epoch 77/100
273/273 - 228s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.3306 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.2591 - 228s/epoch - 835ms/step
Epoch 78/100
273/273 - 222s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.3180 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.3649 - 222s/epoch - 814ms/step
Epoch 79/100
273/273 - 248s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.3558 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.3458 - 248s/epoch - 907ms/step
Epoch 80/100
273/273 - 225s - loss: nan - sqrt_abs_min_loss: nan - accuracy: 0.2932 - val_loss: nan - val_sqrt_abs_min_loss: nan - val_accuracy: 0.2419 - 225s/epoch - 825ms/step
Epoch 81/100
User defined signal 2

------------------------------------------------------------
Sender: LSF System <lsfadmin@hpc.dtu.dk>
Subject: Job 15232356: <s202741-train> in cluster <dcc> Exited

Job <s202741-train> was submitted from host <n-62-20-1> by user <s202741> in cluster <dcc> at Sun Jan 22 12:32:37 2023
Job was executed on host(s) <4*n-62-20-10>, in queue <gpuv100>, as user <s202741> in cluster <dcc> at Mon Jan 23 05:03:14 2023
</zhome/ab/7/153983> was used as the home directory.
</zhome/ab/7/153983/project/scripts> was used as the working directory.
Started at Mon Jan 23 05:03:14 2023
Terminated at Mon Jan 23 10:04:04 2023
Results reported at Mon Jan 23 10:04:04 2023

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#!/bin/bash
### General options
### -- specify queue --   NOTE: TitanX is significantly faster than K80
#BSUB -q gpuv100
#BSUB -gpu "num=1:mode=exclusive_process"
### -- set the job Name --
#BSUB -J s202741-train
### -- ask for number of cores (default: 1) --
#BSUB -n 4
#BSUB -R "span[hosts=1]"
### -- set walltime limit: hh:mm --  maximum 24 hours for GPU-queues right now
#BSUB -W 5:00
# request 5GB of memory
#BSUB -R "rusage[mem=5GB]"
### -- Specify the output and error file. %J is the job-id --
### -- -o and -e mean append, -oo and -eo mean overwrite --
#BSUB -o iter6/Logs/RMSprop_sqrt_abs_min_loss_0002_model_h_%J.out
# -- end of LSF options --

# Necessary modules
cd ..
source venv/bin/activate

python trainModelIter3.py 100 "RMSprop(learning_rate=0.002)" "sqrt_abs_min_loss" "black_background_500x500.csv" 2 "RMSprop_sqrt_abs_min_loss_0002_model_h_" "iter6" "load_model_h"

    
------------------------------------------------------------

TERM_RUNLIMIT: job killed after reaching LSF run time limit.
Exited with exit code 140.

Resource usage summary:

    CPU time :                                   20312.00 sec.
    Max Memory :                                 3030 MB
    Average Memory :                             2945.37 MB
    Total Requested Memory :                     20480.00 MB
    Delta Memory :                               17450.00 MB
    Max Swap :                                   -
    Max Processes :                              4
    Max Threads :                                33
    Run time :                                   18050 sec.
    Turnaround time :                            77487 sec.

The output (if any) is above this job summary.

