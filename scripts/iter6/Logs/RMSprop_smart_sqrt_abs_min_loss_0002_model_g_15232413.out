Loaded dependency [python3/3.10.7]: gcc/11.3.0-binutils-2.38
Loaded module: python3/3.10.7

Loading python3/3.10.7
  Loading requirement: gcc/11.3.0-binutils-2.38
Loaded module: cuda/11.6
Loaded module: cudnn/v8.3.2.44-prod-cuda-11.X
2023-01-25 03:24:21.530183: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F AVX512_VNNI FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2023-01-25 03:24:21.667309: I tensorflow/core/util/port.cc:104] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2023-01-25 03:24:22.944934: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer.so.7'; dlerror: libnvinfer.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /appl/cudnn/v8.3.2.44-prod-cuda-11.5/lib:/appl/cuda/11.6.0/lib64:/appl/python/3.10.7/lib:/appl/gcc/11.3.0-binutils-2.38/lib64:/appl/gcc/11.3.0-binutils-2.38/lib:/lsf/10.1/linux3.10-glibc2.17-x86_64/lib
2023-01-25 03:24:22.945498: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer_plugin.so.7'; dlerror: libnvinfer_plugin.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /appl/cudnn/v8.3.2.44-prod-cuda-11.5/lib:/appl/cuda/11.6.0/lib64:/appl/python/3.10.7/lib:/appl/gcc/11.3.0-binutils-2.38/lib64:/appl/gcc/11.3.0-binutils-2.38/lib:/lsf/10.1/linux3.10-glibc2.17-x86_64/lib
2023-01-25 03:24:22.945508: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Cannot dlopen some TensorRT libraries. If you would like to use Nvidia GPU with TensorRT, please make sure the missing libraries mentioned above are installed properly.
2023-01-25 03:24:26.565291: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F AVX512_VNNI FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2023-01-25 03:24:27.166032: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1613] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 30960 MB memory:  -> device: 0, name: Tesla V100-PCIE-32GB, pci bus id: 0000:d8:00.0, compute capability: 7.0
Epochs:  100
Optimizer:  RMSprop(learning_rate=0.002)
Loss function name:  smart_sqrt_abs_min_loss
Csv file used:  black_background_500x500.csv
Verbose:  2
Unique name:  RMSprop_smart_sqrt_abs_min_loss_0002_model_g_
Output folder:  iter6
Model name:  load_model_g
 
        ################ MODEL ############### 

        inputs = keras.Input(shape=(input_size, input_size, 1))
        x = layers.Conv2D(filters=64, kernel_size=11, activation="relu")(inputs)
        x = layers.Conv2D(filters=64, kernel_size=11, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=5, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=5, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Flatten()(x)
        x = layers.Dense(210, activation="relu")(x)
        x = layers.Dense(64, activation="relu")(x)
        x = layers.Dense(16, activation="sigmoid")(x)
        outputs = layers.Dense(3)(x)

        model = keras.Model(inputs=inputs, outputs=outputs)
    
Model: "model"
_________________________________________________________________
 Layer (type)                Output Shape              Param #   
=================================================================
 input_1 (InputLayer)        [(None, 500, 500, 1)]     0         
                                                                 
 conv2d (Conv2D)             (None, 490, 490, 64)      7808      
                                                                 
 conv2d_1 (Conv2D)           (None, 480, 480, 64)      495680    
                                                                 
 max_pooling2d (MaxPooling2D  (None, 240, 240, 64)     0         
 )                                                               
                                                                 
 conv2d_2 (Conv2D)           (None, 236, 236, 64)      102464    
                                                                 
 conv2d_3 (Conv2D)           (None, 232, 232, 64)      102464    
                                                                 
 max_pooling2d_1 (MaxPooling  (None, 116, 116, 64)     0         
 2D)                                                             
                                                                 
 conv2d_4 (Conv2D)           (None, 114, 114, 64)      36928     
                                                                 
 conv2d_5 (Conv2D)           (None, 112, 112, 64)      36928     
                                                                 
 max_pooling2d_2 (MaxPooling  (None, 56, 56, 64)       0         
 2D)                                                             
                                                                 
 conv2d_6 (Conv2D)           (None, 54, 54, 64)        36928     
                                                                 
 conv2d_7 (Conv2D)           (None, 52, 52, 64)        36928     
                                                                 
 max_pooling2d_3 (MaxPooling  (None, 26, 26, 64)       0         
 2D)                                                             
                                                                 
 conv2d_8 (Conv2D)           (None, 24, 24, 64)        36928     
                                                                 
 conv2d_9 (Conv2D)           (None, 22, 22, 64)        36928     
                                                                 
 max_pooling2d_4 (MaxPooling  (None, 11, 11, 64)       0         
 2D)                                                             
                                                                 
 conv2d_10 (Conv2D)          (None, 9, 9, 64)          36928     
                                                                 
 conv2d_11 (Conv2D)          (None, 7, 7, 64)          36928     
                                                                 
 max_pooling2d_5 (MaxPooling  (None, 3, 3, 64)         0         
 2D)                                                             
                                                                 
 flatten (Flatten)           (None, 576)               0         
                                                                 
 dense (Dense)               (None, 210)               121170    
                                                                 
 dense_1 (Dense)             (None, 64)                13504     
                                                                 
 dense_2 (Dense)             (None, 16)                1040      
                                                                 
 dense_3 (Dense)             (None, 3)                 51        
                                                                 
=================================================================
Total params: 1,139,605
Trainable params: 1,139,605
Non-trainable params: 0
_________________________________________________________________
/zhome/ab/7/153983/project/venv/lib/python3.10/site-packages/keras/utils/image_utils.py:409: UserWarning: grayscale is deprecated. Please use color_mode = "grayscale"
  warnings.warn(
Epoch 1/100
2023-01-25 03:24:30.362038: I tensorflow/compiler/xla/stream_executor/cuda/cuda_dnn.cc:428] Loaded cuDNN version 8302
273/273 - 265s - loss: 0.2553 - smart_sqrt_abs_min_loss: 0.2553 - accuracy: 0.3154 - val_loss: 0.2583 - val_smart_sqrt_abs_min_loss: 0.2583 - val_accuracy: 0.2923 - 265s/epoch - 970ms/step
Epoch 2/100
273/273 - 238s - loss: 0.2527 - smart_sqrt_abs_min_loss: 0.2527 - accuracy: 0.3119 - val_loss: 0.2439 - val_smart_sqrt_abs_min_loss: 0.2439 - val_accuracy: 0.3145 - 238s/epoch - 871ms/step
Epoch 3/100
273/273 - 237s - loss: 0.2436 - smart_sqrt_abs_min_loss: 0.2436 - accuracy: 0.3349 - val_loss: 0.2503 - val_smart_sqrt_abs_min_loss: 0.2503 - val_accuracy: 0.3206 - 237s/epoch - 869ms/step
Epoch 4/100
273/273 - 238s - loss: 0.3146 - smart_sqrt_abs_min_loss: 0.3146 - accuracy: 0.2913 - val_loss: 0.2490 - val_smart_sqrt_abs_min_loss: 0.2490 - val_accuracy: 0.3286 - 238s/epoch - 871ms/step
Epoch 5/100
273/273 - 238s - loss: 0.2449 - smart_sqrt_abs_min_loss: 0.2449 - accuracy: 0.3177 - val_loss: 0.2487 - val_smart_sqrt_abs_min_loss: 0.2487 - val_accuracy: 0.3629 - 238s/epoch - 870ms/step
Epoch 6/100
273/273 - 238s - loss: 0.2457 - smart_sqrt_abs_min_loss: 0.2457 - accuracy: 0.4018 - val_loss: 0.2479 - val_smart_sqrt_abs_min_loss: 0.2479 - val_accuracy: 0.3095 - 238s/epoch - 871ms/step
Epoch 7/100
273/273 - 238s - loss: 0.2469 - smart_sqrt_abs_min_loss: 0.2469 - accuracy: 0.3528 - val_loss: 0.2340 - val_smart_sqrt_abs_min_loss: 0.2340 - val_accuracy: 0.3810 - 238s/epoch - 871ms/step
Epoch 8/100
273/273 - 238s - loss: 0.2415 - smart_sqrt_abs_min_loss: 0.2415 - accuracy: 0.2739 - val_loss: 0.2525 - val_smart_sqrt_abs_min_loss: 0.2525 - val_accuracy: 0.2964 - 238s/epoch - 870ms/step
Epoch 9/100
273/273 - 238s - loss: 0.2510 - smart_sqrt_abs_min_loss: 0.2510 - accuracy: 0.3500 - val_loss: 0.2497 - val_smart_sqrt_abs_min_loss: 0.2497 - val_accuracy: 0.2802 - 238s/epoch - 871ms/step
Epoch 10/100
273/273 - 238s - loss: 0.2410 - smart_sqrt_abs_min_loss: 0.2410 - accuracy: 0.2912 - val_loss: 0.2391 - val_smart_sqrt_abs_min_loss: 0.2391 - val_accuracy: 0.3498 - 238s/epoch - 870ms/step
Epoch 11/100
273/273 - 238s - loss: 0.2478 - smart_sqrt_abs_min_loss: 0.2478 - accuracy: 0.3637 - val_loss: 0.2326 - val_smart_sqrt_abs_min_loss: 0.2326 - val_accuracy: 0.4012 - 238s/epoch - 871ms/step
Epoch 12/100
273/273 - 238s - loss: 0.2793 - smart_sqrt_abs_min_loss: 0.2793 - accuracy: 0.3104 - val_loss: 0.2438 - val_smart_sqrt_abs_min_loss: 0.2438 - val_accuracy: 0.3206 - 238s/epoch - 871ms/step
Epoch 13/100
273/273 - 238s - loss: 0.2504 - smart_sqrt_abs_min_loss: 0.2504 - accuracy: 0.3504 - val_loss: 0.2517 - val_smart_sqrt_abs_min_loss: 0.2517 - val_accuracy: 0.2853 - 238s/epoch - 870ms/step
Epoch 14/100
273/273 - 237s - loss: 0.2404 - smart_sqrt_abs_min_loss: 0.2404 - accuracy: 0.3957 - val_loss: 0.2559 - val_smart_sqrt_abs_min_loss: 0.2559 - val_accuracy: 0.3579 - 237s/epoch - 870ms/step
Epoch 15/100
273/273 - 238s - loss: 0.2415 - smart_sqrt_abs_min_loss: 0.2415 - accuracy: 0.3700 - val_loss: 0.2610 - val_smart_sqrt_abs_min_loss: 0.2610 - val_accuracy: 0.2460 - 238s/epoch - 871ms/step
Epoch 16/100
273/273 - 238s - loss: 0.2499 - smart_sqrt_abs_min_loss: 0.2499 - accuracy: 0.3611 - val_loss: 0.2589 - val_smart_sqrt_abs_min_loss: 0.2589 - val_accuracy: 0.3569 - 238s/epoch - 871ms/step
Epoch 17/100
273/273 - 238s - loss: 0.2417 - smart_sqrt_abs_min_loss: 0.2417 - accuracy: 0.3726 - val_loss: 0.2235 - val_smart_sqrt_abs_min_loss: 0.2235 - val_accuracy: 0.3014 - 238s/epoch - 870ms/step
Epoch 18/100
273/273 - 238s - loss: 0.2378 - smart_sqrt_abs_min_loss: 0.2378 - accuracy: 0.3648 - val_loss: 0.2587 - val_smart_sqrt_abs_min_loss: 0.2587 - val_accuracy: 0.2137 - 238s/epoch - 870ms/step
Epoch 19/100
273/273 - 238s - loss: 0.2777 - smart_sqrt_abs_min_loss: 0.2777 - accuracy: 0.2872 - val_loss: 0.2441 - val_smart_sqrt_abs_min_loss: 0.2441 - val_accuracy: 0.4425 - 238s/epoch - 871ms/step
Epoch 20/100
273/273 - 238s - loss: 0.2711 - smart_sqrt_abs_min_loss: 0.2711 - accuracy: 0.2684 - val_loss: 0.2310 - val_smart_sqrt_abs_min_loss: 0.2310 - val_accuracy: 0.4546 - 238s/epoch - 871ms/step
Epoch 21/100
273/273 - 238s - loss: 0.2631 - smart_sqrt_abs_min_loss: 0.2631 - accuracy: 0.3352 - val_loss: 0.2599 - val_smart_sqrt_abs_min_loss: 0.2599 - val_accuracy: 0.4435 - 238s/epoch - 870ms/step
Epoch 22/100
273/273 - 238s - loss: 0.2660 - smart_sqrt_abs_min_loss: 0.2660 - accuracy: 0.3234 - val_loss: 0.2527 - val_smart_sqrt_abs_min_loss: 0.2527 - val_accuracy: 0.4093 - 238s/epoch - 871ms/step
Epoch 23/100
273/273 - 237s - loss: 0.2850 - smart_sqrt_abs_min_loss: 0.2850 - accuracy: 0.2982 - val_loss: 0.2460 - val_smart_sqrt_abs_min_loss: 0.2460 - val_accuracy: 0.2742 - 237s/epoch - 870ms/step
Epoch 24/100
273/273 - 238s - loss: 0.2824 - smart_sqrt_abs_min_loss: 0.2824 - accuracy: 0.3452 - val_loss: 0.2452 - val_smart_sqrt_abs_min_loss: 0.2452 - val_accuracy: 0.4788 - 238s/epoch - 870ms/step
Epoch 25/100
273/273 - 237s - loss: 0.2795 - smart_sqrt_abs_min_loss: 0.2795 - accuracy: 0.3229 - val_loss: 0.2599 - val_smart_sqrt_abs_min_loss: 0.2599 - val_accuracy: 0.3276 - 237s/epoch - 870ms/step
Epoch 26/100
273/273 - 238s - loss: 0.2756 - smart_sqrt_abs_min_loss: 0.2756 - accuracy: 0.2590 - val_loss: 0.2409 - val_smart_sqrt_abs_min_loss: 0.2409 - val_accuracy: 0.3700 - 238s/epoch - 871ms/step
Epoch 27/100
273/273 - 238s - loss: 0.2487 - smart_sqrt_abs_min_loss: 0.2487 - accuracy: 0.3387 - val_loss: 0.2222 - val_smart_sqrt_abs_min_loss: 0.2222 - val_accuracy: 0.4274 - 238s/epoch - 870ms/step
Epoch 28/100
273/273 - 238s - loss: 0.2476 - smart_sqrt_abs_min_loss: 0.2476 - accuracy: 0.3401 - val_loss: 0.2508 - val_smart_sqrt_abs_min_loss: 0.2508 - val_accuracy: 0.3185 - 238s/epoch - 871ms/step
Epoch 29/100
273/273 - 238s - loss: 0.2756 - smart_sqrt_abs_min_loss: 0.2756 - accuracy: 0.3474 - val_loss: 0.6650 - val_smart_sqrt_abs_min_loss: 0.6650 - val_accuracy: 0.3014 - 238s/epoch - 870ms/step
Epoch 30/100
273/273 - 238s - loss: 0.2523 - smart_sqrt_abs_min_loss: 0.2523 - accuracy: 0.3228 - val_loss: 0.2390 - val_smart_sqrt_abs_min_loss: 0.2390 - val_accuracy: 0.2923 - 238s/epoch - 870ms/step
Epoch 31/100
273/273 - 238s - loss: 0.2418 - smart_sqrt_abs_min_loss: 0.2418 - accuracy: 0.3831 - val_loss: 0.2607 - val_smart_sqrt_abs_min_loss: 0.2607 - val_accuracy: 0.3216 - 238s/epoch - 870ms/step
Epoch 32/100
273/273 - 238s - loss: 0.2486 - smart_sqrt_abs_min_loss: 0.2486 - accuracy: 0.3776 - val_loss: 0.2403 - val_smart_sqrt_abs_min_loss: 0.2403 - val_accuracy: 0.3871 - 238s/epoch - 871ms/step
Epoch 33/100
273/273 - 238s - loss: 0.2431 - smart_sqrt_abs_min_loss: 0.2431 - accuracy: 0.3360 - val_loss: 0.2447 - val_smart_sqrt_abs_min_loss: 0.2447 - val_accuracy: 0.2752 - 238s/epoch - 870ms/step
Epoch 34/100
273/273 - 238s - loss: 0.2626 - smart_sqrt_abs_min_loss: 0.2626 - accuracy: 0.3370 - val_loss: 0.2580 - val_smart_sqrt_abs_min_loss: 0.2580 - val_accuracy: 0.3548 - 238s/epoch - 870ms/step
Epoch 35/100
273/273 - 237s - loss: 0.2958 - smart_sqrt_abs_min_loss: 0.2958 - accuracy: 0.3157 - val_loss: 0.2623 - val_smart_sqrt_abs_min_loss: 0.2623 - val_accuracy: 0.3226 - 237s/epoch - 870ms/step
Epoch 36/100
273/273 - 238s - loss: 0.2877 - smart_sqrt_abs_min_loss: 0.2877 - accuracy: 0.2991 - val_loss: 0.3741 - val_smart_sqrt_abs_min_loss: 0.3741 - val_accuracy: 0.4294 - 238s/epoch - 871ms/step
Epoch 37/100
273/273 - 238s - loss: 0.2841 - smart_sqrt_abs_min_loss: 0.2841 - accuracy: 0.3331 - val_loss: 0.2309 - val_smart_sqrt_abs_min_loss: 0.2309 - val_accuracy: 0.3145 - 238s/epoch - 871ms/step
Epoch 38/100
273/273 - 238s - loss: 0.2584 - smart_sqrt_abs_min_loss: 0.2584 - accuracy: 0.3357 - val_loss: 0.2313 - val_smart_sqrt_abs_min_loss: 0.2313 - val_accuracy: 0.3044 - 238s/epoch - 871ms/step
Epoch 39/100
273/273 - 238s - loss: 0.2633 - smart_sqrt_abs_min_loss: 0.2633 - accuracy: 0.3457 - val_loss: 0.2402 - val_smart_sqrt_abs_min_loss: 0.2402 - val_accuracy: 0.2782 - 238s/epoch - 871ms/step
Epoch 40/100
273/273 - 238s - loss: 0.2542 - smart_sqrt_abs_min_loss: 0.2542 - accuracy: 0.3502 - val_loss: 0.2578 - val_smart_sqrt_abs_min_loss: 0.2578 - val_accuracy: 0.2389 - 238s/epoch - 871ms/step
Epoch 41/100
273/273 - 237s - loss: 0.2443 - smart_sqrt_abs_min_loss: 0.2443 - accuracy: 0.3693 - val_loss: 0.2519 - val_smart_sqrt_abs_min_loss: 0.2519 - val_accuracy: 0.4264 - 237s/epoch - 870ms/step
Epoch 42/100
273/273 - 238s - loss: 0.2419 - smart_sqrt_abs_min_loss: 0.2419 - accuracy: 0.3775 - val_loss: 0.2505 - val_smart_sqrt_abs_min_loss: 0.2505 - val_accuracy: 0.4002 - 238s/epoch - 870ms/step
Epoch 43/100
273/273 - 238s - loss: 0.2405 - smart_sqrt_abs_min_loss: 0.2405 - accuracy: 0.3261 - val_loss: 0.2576 - val_smart_sqrt_abs_min_loss: 0.2576 - val_accuracy: 0.2641 - 238s/epoch - 870ms/step
Epoch 44/100
273/273 - 238s - loss: 0.2400 - smart_sqrt_abs_min_loss: 0.2400 - accuracy: 0.3767 - val_loss: 0.2591 - val_smart_sqrt_abs_min_loss: 0.2591 - val_accuracy: 0.3054 - 238s/epoch - 871ms/step
Epoch 45/100
273/273 - 238s - loss: 0.2938 - smart_sqrt_abs_min_loss: 0.2938 - accuracy: 0.3239 - val_loss: 0.2756 - val_smart_sqrt_abs_min_loss: 0.2756 - val_accuracy: 0.2298 - 238s/epoch - 871ms/step
Epoch 46/100
273/273 - 238s - loss: 0.2720 - smart_sqrt_abs_min_loss: 0.2720 - accuracy: 0.3356 - val_loss: 0.2761 - val_smart_sqrt_abs_min_loss: 0.2761 - val_accuracy: 0.3821 - 238s/epoch - 871ms/step
Epoch 47/100
273/273 - 237s - loss: 0.2381 - smart_sqrt_abs_min_loss: 0.2381 - accuracy: 0.3629 - val_loss: 0.2534 - val_smart_sqrt_abs_min_loss: 0.2534 - val_accuracy: 0.3427 - 237s/epoch - 870ms/step
Epoch 48/100
273/273 - 238s - loss: 0.2468 - smart_sqrt_abs_min_loss: 0.2468 - accuracy: 0.3523 - val_loss: 0.2339 - val_smart_sqrt_abs_min_loss: 0.2339 - val_accuracy: 0.4083 - 238s/epoch - 871ms/step
Epoch 49/100
273/273 - 238s - loss: 0.2374 - smart_sqrt_abs_min_loss: 0.2374 - accuracy: 0.3611 - val_loss: 0.2684 - val_smart_sqrt_abs_min_loss: 0.2684 - val_accuracy: 0.3448 - 238s/epoch - 871ms/step
Epoch 50/100
273/273 - 238s - loss: 0.2540 - smart_sqrt_abs_min_loss: 0.2540 - accuracy: 0.3179 - val_loss: 0.2360 - val_smart_sqrt_abs_min_loss: 0.2360 - val_accuracy: 0.4103 - 238s/epoch - 871ms/step
Epoch 51/100
273/273 - 238s - loss: 0.2597 - smart_sqrt_abs_min_loss: 0.2597 - accuracy: 0.3495 - val_loss: 0.2457 - val_smart_sqrt_abs_min_loss: 0.2457 - val_accuracy: 0.3710 - 238s/epoch - 871ms/step
Epoch 52/100
273/273 - 238s - loss: 0.2682 - smart_sqrt_abs_min_loss: 0.2682 - accuracy: 0.3579 - val_loss: 0.2466 - val_smart_sqrt_abs_min_loss: 0.2466 - val_accuracy: 0.4597 - 238s/epoch - 871ms/step
Epoch 53/100
273/273 - 238s - loss: 0.2774 - smart_sqrt_abs_min_loss: 0.2774 - accuracy: 0.3070 - val_loss: 0.2434 - val_smart_sqrt_abs_min_loss: 0.2434 - val_accuracy: 0.3599 - 238s/epoch - 871ms/step
Epoch 54/100
273/273 - 238s - loss: 0.2402 - smart_sqrt_abs_min_loss: 0.2402 - accuracy: 0.3432 - val_loss: 0.2362 - val_smart_sqrt_abs_min_loss: 0.2362 - val_accuracy: 0.2944 - 238s/epoch - 871ms/step
Epoch 55/100
273/273 - 238s - loss: 0.2465 - smart_sqrt_abs_min_loss: 0.2465 - accuracy: 0.3159 - val_loss: 0.2535 - val_smart_sqrt_abs_min_loss: 0.2535 - val_accuracy: 0.3448 - 238s/epoch - 871ms/step
Epoch 56/100
273/273 - 238s - loss: 0.2450 - smart_sqrt_abs_min_loss: 0.2450 - accuracy: 0.3599 - val_loss: 0.2491 - val_smart_sqrt_abs_min_loss: 0.2491 - val_accuracy: 0.3306 - 238s/epoch - 870ms/step
Epoch 57/100
273/273 - 238s - loss: 0.2759 - smart_sqrt_abs_min_loss: 0.2759 - accuracy: 0.3249 - val_loss: 0.2419 - val_smart_sqrt_abs_min_loss: 0.2419 - val_accuracy: 0.3306 - 238s/epoch - 871ms/step
Epoch 58/100
273/273 - 238s - loss: 0.2405 - smart_sqrt_abs_min_loss: 0.2405 - accuracy: 0.3194 - val_loss: 0.2386 - val_smart_sqrt_abs_min_loss: 0.2386 - val_accuracy: 0.3528 - 238s/epoch - 870ms/step
Epoch 59/100
273/273 - 238s - loss: 0.2705 - smart_sqrt_abs_min_loss: 0.2705 - accuracy: 0.3207 - val_loss: 0.2618 - val_smart_sqrt_abs_min_loss: 0.2618 - val_accuracy: 0.2339 - 238s/epoch - 870ms/step
Epoch 60/100
273/273 - 238s - loss: 0.2957 - smart_sqrt_abs_min_loss: 0.2957 - accuracy: 0.3331 - val_loss: 0.6781 - val_smart_sqrt_abs_min_loss: 0.6781 - val_accuracy: 0.3296 - 238s/epoch - 872ms/step
Epoch 61/100
273/273 - 238s - loss: 0.2693 - smart_sqrt_abs_min_loss: 0.2693 - accuracy: 0.3494 - val_loss: 0.2406 - val_smart_sqrt_abs_min_loss: 0.2406 - val_accuracy: 0.2631 - 238s/epoch - 870ms/step
Epoch 62/100
273/273 - 238s - loss: 0.2456 - smart_sqrt_abs_min_loss: 0.2456 - accuracy: 0.3363 - val_loss: 0.2678 - val_smart_sqrt_abs_min_loss: 0.2678 - val_accuracy: 0.2510 - 238s/epoch - 870ms/step
Epoch 63/100
273/273 - 238s - loss: 0.2523 - smart_sqrt_abs_min_loss: 0.2523 - accuracy: 0.3293 - val_loss: 0.2534 - val_smart_sqrt_abs_min_loss: 0.2534 - val_accuracy: 0.3216 - 238s/epoch - 871ms/step
Epoch 64/100
273/273 - 238s - loss: 0.2464 - smart_sqrt_abs_min_loss: 0.2464 - accuracy: 0.3527 - val_loss: 0.2558 - val_smart_sqrt_abs_min_loss: 0.2558 - val_accuracy: 0.3962 - 238s/epoch - 872ms/step
Epoch 65/100
273/273 - 238s - loss: 0.2660 - smart_sqrt_abs_min_loss: 0.2660 - accuracy: 0.3333 - val_loss: 0.2220 - val_smart_sqrt_abs_min_loss: 0.2220 - val_accuracy: 0.2994 - 238s/epoch - 871ms/step
Epoch 66/100
273/273 - 238s - loss: 0.2782 - smart_sqrt_abs_min_loss: 0.2782 - accuracy: 0.3449 - val_loss: 0.2456 - val_smart_sqrt_abs_min_loss: 0.2456 - val_accuracy: 0.4546 - 238s/epoch - 870ms/step
Epoch 67/100
273/273 - 238s - loss: 0.2919 - smart_sqrt_abs_min_loss: 0.2919 - accuracy: 0.3164 - val_loss: 0.2500 - val_smart_sqrt_abs_min_loss: 0.2500 - val_accuracy: 0.3357 - 238s/epoch - 872ms/step
Epoch 68/100
273/273 - 238s - loss: 0.2732 - smart_sqrt_abs_min_loss: 0.2732 - accuracy: 0.2862 - val_loss: 0.2387 - val_smart_sqrt_abs_min_loss: 0.2387 - val_accuracy: 0.3619 - 238s/epoch - 871ms/step
Epoch 69/100
273/273 - 237s - loss: 0.2787 - smart_sqrt_abs_min_loss: 0.2787 - accuracy: 0.3060 - val_loss: 0.2400 - val_smart_sqrt_abs_min_loss: 0.2400 - val_accuracy: 0.3256 - 237s/epoch - 870ms/step
Epoch 70/100
273/273 - 238s - loss: 0.2649 - smart_sqrt_abs_min_loss: 0.2649 - accuracy: 0.3478 - val_loss: 0.2400 - val_smart_sqrt_abs_min_loss: 0.2400 - val_accuracy: 0.2278 - 238s/epoch - 871ms/step
Epoch 71/100
273/273 - 237s - loss: 0.2962 - smart_sqrt_abs_min_loss: 0.2962 - accuracy: 0.3352 - val_loss: 0.2536 - val_smart_sqrt_abs_min_loss: 0.2536 - val_accuracy: 0.2692 - 237s/epoch - 869ms/step
Epoch 72/100
273/273 - 238s - loss: 0.2467 - smart_sqrt_abs_min_loss: 0.2467 - accuracy: 0.3241 - val_loss: 0.2637 - val_smart_sqrt_abs_min_loss: 0.2637 - val_accuracy: 0.3226 - 238s/epoch - 871ms/step
Epoch 73/100
273/273 - 239s - loss: 0.2436 - smart_sqrt_abs_min_loss: 0.2436 - accuracy: 0.3462 - val_loss: 0.2404 - val_smart_sqrt_abs_min_loss: 0.2404 - val_accuracy: 0.4546 - 239s/epoch - 875ms/step
Epoch 74/100
273/273 - 238s - loss: 0.2450 - smart_sqrt_abs_min_loss: 0.2450 - accuracy: 0.3489 - val_loss: 0.2426 - val_smart_sqrt_abs_min_loss: 0.2426 - val_accuracy: 0.3206 - 238s/epoch - 872ms/step
Epoch 75/100
273/273 - 238s - loss: 0.2626 - smart_sqrt_abs_min_loss: 0.2626 - accuracy: 0.3356 - val_loss: 0.2547 - val_smart_sqrt_abs_min_loss: 0.2547 - val_accuracy: 0.2954 - 238s/epoch - 873ms/step
Epoch 76/100
User defined signal 2

------------------------------------------------------------
Sender: LSF System <lsfadmin@hpc.dtu.dk>
Subject: Job 15232413: <s202741-train> in cluster <dcc> Exited

Job <s202741-train> was submitted from host <n-62-20-1> by user <s202741> in cluster <dcc> at Sun Jan 22 12:32:52 2023
Job was executed on host(s) <4*n-62-11-16>, in queue <gpuv100>, as user <s202741> in cluster <dcc> at Wed Jan 25 03:24:19 2023
</zhome/ab/7/153983> was used as the home directory.
</zhome/ab/7/153983/project/scripts> was used as the working directory.
Started at Wed Jan 25 03:24:19 2023
Terminated at Wed Jan 25 08:25:28 2023
Results reported at Wed Jan 25 08:25:28 2023

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#!/bin/bash
### General options
### -- specify queue --   NOTE: TitanX is significantly faster than K80
#BSUB -q gpuv100
#BSUB -gpu "num=1:mode=exclusive_process"
### -- set the job Name --
#BSUB -J s202741-train
### -- ask for number of cores (default: 1) --
#BSUB -n 4
#BSUB -R "span[hosts=1]"
### -- set walltime limit: hh:mm --  maximum 24 hours for GPU-queues right now
#BSUB -W 5:00
# request 5GB of memory
#BSUB -R "rusage[mem=5GB]"
### -- Specify the output and error file. %J is the job-id --
### -- -o and -e mean append, -oo and -eo mean overwrite --
#BSUB -o iter6/Logs/RMSprop_smart_sqrt_abs_min_loss_0002_model_g_%J.out
# -- end of LSF options --

# Necessary modules
cd ..
source venv/bin/activate

python trainModelIter3.py 100 "RMSprop(learning_rate=0.002)" "smart_sqrt_abs_min_loss" "black_background_500x500.csv" 2 "RMSprop_smart_sqrt_abs_min_loss_0002_model_g_" "iter6" "load_model_g"

    
------------------------------------------------------------

TERM_RUNLIMIT: job killed after reaching LSF run time limit.
Exited with exit code 140.

Resource usage summary:

    CPU time :                                   20094.00 sec.
    Max Memory :                                 2997 MB
    Average Memory :                             2841.16 MB
    Total Requested Memory :                     20480.00 MB
    Delta Memory :                               17483.00 MB
    Max Swap :                                   -
    Max Processes :                              4
    Max Threads :                                33
    Run time :                                   18069 sec.
    Turnaround time :                            244356 sec.

The output (if any) is above this job summary.

