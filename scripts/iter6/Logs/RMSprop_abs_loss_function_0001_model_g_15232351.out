Loaded dependency [python3/3.10.7]: gcc/11.3.0-binutils-2.38
Loaded module: python3/3.10.7

Loading python3/3.10.7
  Loading requirement: gcc/11.3.0-binutils-2.38
Loaded module: cuda/11.6
Loaded module: cudnn/v8.3.2.44-prod-cuda-11.X
2023-01-23 02:50:41.331895: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2023-01-23 02:50:42.804505: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer.so.7'; dlerror: libnvinfer.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /appl/cudnn/v8.3.2.44-prod-cuda-11.5/lib:/appl/cuda/11.6.0/lib64:/appl/python/3.10.7/lib:/appl/gcc/11.3.0-binutils-2.38/lib64:/appl/gcc/11.3.0-binutils-2.38/lib:/lsf/10.1/linux3.10-glibc2.17-x86_64/lib
2023-01-23 02:50:42.805162: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer_plugin.so.7'; dlerror: libnvinfer_plugin.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /appl/cudnn/v8.3.2.44-prod-cuda-11.5/lib:/appl/cuda/11.6.0/lib64:/appl/python/3.10.7/lib:/appl/gcc/11.3.0-binutils-2.38/lib64:/appl/gcc/11.3.0-binutils-2.38/lib:/lsf/10.1/linux3.10-glibc2.17-x86_64/lib
2023-01-23 02:50:42.805175: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Cannot dlopen some TensorRT libraries. If you would like to use Nvidia GPU with TensorRT, please make sure the missing libraries mentioned above are installed properly.
2023-01-23 02:50:45.918894: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2023-01-23 02:50:46.658749: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1613] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 30961 MB memory:  -> device: 0, name: Tesla V100-SXM2-32GB, pci bus id: 0000:3a:00.0, compute capability: 7.0
Epochs:  100
Optimizer:  RMSprop(learning_rate=0.001)
Loss function name:  abs_loss_function
Csv file used:  black_background_500x500.csv
Verbose:  2
Unique name:  RMSprop_abs_loss_function_0001_model_g_
Output folder:  iter6
Model name:  load_model_g
 
        ################ MODEL ############### 

        inputs = keras.Input(shape=(input_size, input_size, 1))
        x = layers.Conv2D(filters=64, kernel_size=11, activation="relu")(inputs)
        x = layers.Conv2D(filters=64, kernel_size=11, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=5, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=5, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Flatten()(x)
        x = layers.Dense(210, activation="relu")(x)
        x = layers.Dense(64, activation="relu")(x)
        x = layers.Dense(16, activation="sigmoid")(x)
        outputs = layers.Dense(3)(x)

        model = keras.Model(inputs=inputs, outputs=outputs)
    
Model: "model"
_________________________________________________________________
 Layer (type)                Output Shape              Param #   
=================================================================
 input_1 (InputLayer)        [(None, 500, 500, 1)]     0         
                                                                 
 conv2d (Conv2D)             (None, 490, 490, 64)      7808      
                                                                 
 conv2d_1 (Conv2D)           (None, 480, 480, 64)      495680    
                                                                 
 max_pooling2d (MaxPooling2D  (None, 240, 240, 64)     0         
 )                                                               
                                                                 
 conv2d_2 (Conv2D)           (None, 236, 236, 64)      102464    
                                                                 
 conv2d_3 (Conv2D)           (None, 232, 232, 64)      102464    
                                                                 
 max_pooling2d_1 (MaxPooling  (None, 116, 116, 64)     0         
 2D)                                                             
                                                                 
 conv2d_4 (Conv2D)           (None, 114, 114, 64)      36928     
                                                                 
 conv2d_5 (Conv2D)           (None, 112, 112, 64)      36928     
                                                                 
 max_pooling2d_2 (MaxPooling  (None, 56, 56, 64)       0         
 2D)                                                             
                                                                 
 conv2d_6 (Conv2D)           (None, 54, 54, 64)        36928     
                                                                 
 conv2d_7 (Conv2D)           (None, 52, 52, 64)        36928     
                                                                 
 max_pooling2d_3 (MaxPooling  (None, 26, 26, 64)       0         
 2D)                                                             
                                                                 
 conv2d_8 (Conv2D)           (None, 24, 24, 64)        36928     
                                                                 
 conv2d_9 (Conv2D)           (None, 22, 22, 64)        36928     
                                                                 
 max_pooling2d_4 (MaxPooling  (None, 11, 11, 64)       0         
 2D)                                                             
                                                                 
 conv2d_10 (Conv2D)          (None, 9, 9, 64)          36928     
                                                                 
 conv2d_11 (Conv2D)          (None, 7, 7, 64)          36928     
                                                                 
 max_pooling2d_5 (MaxPooling  (None, 3, 3, 64)         0         
 2D)                                                             
                                                                 
 flatten (Flatten)           (None, 576)               0         
                                                                 
 dense (Dense)               (None, 210)               121170    
                                                                 
 dense_1 (Dense)             (None, 64)                13504     
                                                                 
 dense_2 (Dense)             (None, 16)                1040      
                                                                 
 dense_3 (Dense)             (None, 3)                 51        
                                                                 
=================================================================
Total params: 1,139,605
Trainable params: 1,139,605
Non-trainable params: 0
_________________________________________________________________
/zhome/ab/7/153983/project/venv/lib/python3.10/site-packages/keras/utils/image_utils.py:409: UserWarning: grayscale is deprecated. Please use color_mode = "grayscale"
  warnings.warn(
Epoch 1/100
2023-01-23 02:50:50.469295: I tensorflow/compiler/xla/stream_executor/cuda/cuda_dnn.cc:428] Loaded cuDNN version 8302
273/273 - 251s - loss: 0.2520 - abs_loss_function: 0.2520 - accuracy: 0.3363 - val_loss: 0.2625 - val_abs_loss_function: 0.2625 - val_accuracy: 0.2923 - 251s/epoch - 919ms/step
Epoch 2/100
273/273 - 225s - loss: 0.2481 - abs_loss_function: 0.2481 - accuracy: 0.3426 - val_loss: 0.2628 - val_abs_loss_function: 0.2628 - val_accuracy: 0.2964 - 225s/epoch - 825ms/step
Epoch 3/100
273/273 - 224s - loss: 0.2421 - abs_loss_function: 0.2421 - accuracy: 0.3286 - val_loss: 0.2285 - val_abs_loss_function: 0.2285 - val_accuracy: 0.2429 - 224s/epoch - 820ms/step
Epoch 4/100
273/273 - 225s - loss: 0.2433 - abs_loss_function: 0.2433 - accuracy: 0.3428 - val_loss: 0.2507 - val_abs_loss_function: 0.2507 - val_accuracy: 0.3196 - 225s/epoch - 823ms/step
Epoch 5/100
273/273 - 225s - loss: 0.2390 - abs_loss_function: 0.2390 - accuracy: 0.3236 - val_loss: 0.2451 - val_abs_loss_function: 0.2451 - val_accuracy: 0.2722 - 225s/epoch - 824ms/step
Epoch 6/100
273/273 - 224s - loss: 0.2451 - abs_loss_function: 0.2451 - accuracy: 0.3633 - val_loss: 0.2521 - val_abs_loss_function: 0.2521 - val_accuracy: 0.4062 - 224s/epoch - 822ms/step
Epoch 7/100
273/273 - 225s - loss: 0.2400 - abs_loss_function: 0.2400 - accuracy: 0.3264 - val_loss: 0.2805 - val_abs_loss_function: 0.2805 - val_accuracy: 0.2651 - 225s/epoch - 824ms/step
Epoch 8/100
273/273 - 225s - loss: 0.2363 - abs_loss_function: 0.2363 - accuracy: 0.3457 - val_loss: 0.2576 - val_abs_loss_function: 0.2576 - val_accuracy: 0.3427 - 225s/epoch - 824ms/step
Epoch 9/100
273/273 - 225s - loss: 0.2515 - abs_loss_function: 0.2515 - accuracy: 0.3334 - val_loss: 0.2583 - val_abs_loss_function: 0.2583 - val_accuracy: 0.3054 - 225s/epoch - 824ms/step
Epoch 10/100
273/273 - 225s - loss: 0.2430 - abs_loss_function: 0.2430 - accuracy: 0.3313 - val_loss: 0.2467 - val_abs_loss_function: 0.2467 - val_accuracy: 0.3145 - 225s/epoch - 824ms/step
Epoch 11/100
273/273 - 226s - loss: 0.2433 - abs_loss_function: 0.2433 - accuracy: 0.3523 - val_loss: 0.2560 - val_abs_loss_function: 0.2560 - val_accuracy: 0.3286 - 226s/epoch - 827ms/step
Epoch 12/100
273/273 - 224s - loss: 0.2433 - abs_loss_function: 0.2433 - accuracy: 0.3724 - val_loss: 0.2531 - val_abs_loss_function: 0.2531 - val_accuracy: 0.3256 - 224s/epoch - 820ms/step
Epoch 13/100
273/273 - 225s - loss: 0.2412 - abs_loss_function: 0.2412 - accuracy: 0.3109 - val_loss: 0.2344 - val_abs_loss_function: 0.2344 - val_accuracy: 0.3306 - 225s/epoch - 825ms/step
Epoch 14/100
273/273 - 225s - loss: 0.2470 - abs_loss_function: 0.2470 - accuracy: 0.3812 - val_loss: 0.2446 - val_abs_loss_function: 0.2446 - val_accuracy: 0.2994 - 225s/epoch - 825ms/step
Epoch 15/100
273/273 - 225s - loss: 0.2426 - abs_loss_function: 0.2426 - accuracy: 0.3496 - val_loss: 0.2674 - val_abs_loss_function: 0.2674 - val_accuracy: 0.3498 - 225s/epoch - 826ms/step
Epoch 16/100
273/273 - 224s - loss: 0.2423 - abs_loss_function: 0.2423 - accuracy: 0.3207 - val_loss: 0.2479 - val_abs_loss_function: 0.2479 - val_accuracy: 0.3175 - 224s/epoch - 822ms/step
Epoch 17/100
273/273 - 225s - loss: 0.2365 - abs_loss_function: 0.2365 - accuracy: 0.3740 - val_loss: 0.2441 - val_abs_loss_function: 0.2441 - val_accuracy: 0.2873 - 225s/epoch - 825ms/step
Epoch 18/100
273/273 - 226s - loss: 0.2487 - abs_loss_function: 0.2487 - accuracy: 0.3245 - val_loss: 0.2556 - val_abs_loss_function: 0.2556 - val_accuracy: 0.3891 - 226s/epoch - 828ms/step
Epoch 19/100
273/273 - 225s - loss: 0.2520 - abs_loss_function: 0.2520 - accuracy: 0.3265 - val_loss: 0.2401 - val_abs_loss_function: 0.2401 - val_accuracy: 0.3397 - 225s/epoch - 823ms/step
Epoch 20/100
273/273 - 225s - loss: 0.2408 - abs_loss_function: 0.2408 - accuracy: 0.3684 - val_loss: 0.2463 - val_abs_loss_function: 0.2463 - val_accuracy: 0.5323 - 225s/epoch - 824ms/step
Epoch 21/100
273/273 - 225s - loss: 0.2461 - abs_loss_function: 0.2461 - accuracy: 0.3260 - val_loss: 0.2397 - val_abs_loss_function: 0.2397 - val_accuracy: 0.2913 - 225s/epoch - 824ms/step
Epoch 22/100
273/273 - 225s - loss: 0.2406 - abs_loss_function: 0.2406 - accuracy: 0.3792 - val_loss: 0.2600 - val_abs_loss_function: 0.2600 - val_accuracy: 0.2944 - 225s/epoch - 823ms/step
Epoch 23/100
273/273 - 225s - loss: 0.2408 - abs_loss_function: 0.2408 - accuracy: 0.3502 - val_loss: 0.2593 - val_abs_loss_function: 0.2593 - val_accuracy: 0.4183 - 225s/epoch - 824ms/step
Epoch 24/100
273/273 - 226s - loss: 0.2470 - abs_loss_function: 0.2470 - accuracy: 0.3236 - val_loss: 0.2547 - val_abs_loss_function: 0.2547 - val_accuracy: 0.3044 - 226s/epoch - 827ms/step
Epoch 25/100
273/273 - 226s - loss: 0.2434 - abs_loss_function: 0.2434 - accuracy: 0.2967 - val_loss: 0.2627 - val_abs_loss_function: 0.2627 - val_accuracy: 0.4728 - 226s/epoch - 828ms/step
Epoch 26/100
273/273 - 224s - loss: 0.2411 - abs_loss_function: 0.2411 - accuracy: 0.3266 - val_loss: 0.2686 - val_abs_loss_function: 0.2686 - val_accuracy: 0.3780 - 224s/epoch - 821ms/step
Epoch 27/100
273/273 - 225s - loss: 0.2336 - abs_loss_function: 0.2336 - accuracy: 0.2756 - val_loss: 0.2583 - val_abs_loss_function: 0.2583 - val_accuracy: 0.3065 - 225s/epoch - 824ms/step
Epoch 28/100
273/273 - 226s - loss: 0.2484 - abs_loss_function: 0.2484 - accuracy: 0.4127 - val_loss: 0.2505 - val_abs_loss_function: 0.2505 - val_accuracy: 0.3821 - 226s/epoch - 827ms/step
Epoch 29/100
273/273 - 226s - loss: 0.2420 - abs_loss_function: 0.2420 - accuracy: 0.3167 - val_loss: 0.2377 - val_abs_loss_function: 0.2377 - val_accuracy: 0.2319 - 226s/epoch - 829ms/step
Epoch 30/100
273/273 - 225s - loss: 0.2413 - abs_loss_function: 0.2413 - accuracy: 0.2904 - val_loss: 0.2633 - val_abs_loss_function: 0.2633 - val_accuracy: 0.5323 - 225s/epoch - 824ms/step
Epoch 31/100
273/273 - 224s - loss: 0.2461 - abs_loss_function: 0.2461 - accuracy: 0.3371 - val_loss: 0.2685 - val_abs_loss_function: 0.2685 - val_accuracy: 0.3831 - 224s/epoch - 822ms/step
Epoch 32/100
273/273 - 227s - loss: 0.2398 - abs_loss_function: 0.2398 - accuracy: 0.3227 - val_loss: 0.2531 - val_abs_loss_function: 0.2531 - val_accuracy: 0.3911 - 227s/epoch - 831ms/step
Epoch 33/100
273/273 - 226s - loss: 0.2495 - abs_loss_function: 0.2495 - accuracy: 0.3092 - val_loss: 0.2423 - val_abs_loss_function: 0.2423 - val_accuracy: 0.3881 - 226s/epoch - 829ms/step
Epoch 34/100
273/273 - 226s - loss: 0.2446 - abs_loss_function: 0.2446 - accuracy: 0.3222 - val_loss: 0.2333 - val_abs_loss_function: 0.2333 - val_accuracy: 0.3488 - 226s/epoch - 829ms/step
Epoch 35/100
273/273 - 224s - loss: 0.2429 - abs_loss_function: 0.2429 - accuracy: 0.3440 - val_loss: 0.2816 - val_abs_loss_function: 0.2816 - val_accuracy: 0.2157 - 224s/epoch - 821ms/step
Epoch 36/100
273/273 - 227s - loss: 0.2428 - abs_loss_function: 0.2428 - accuracy: 0.3519 - val_loss: 0.2423 - val_abs_loss_function: 0.2423 - val_accuracy: 0.3589 - 227s/epoch - 831ms/step
Epoch 37/100
273/273 - 224s - loss: 0.2418 - abs_loss_function: 0.2418 - accuracy: 0.3387 - val_loss: 0.2490 - val_abs_loss_function: 0.2490 - val_accuracy: 0.4264 - 224s/epoch - 820ms/step
Epoch 38/100
273/273 - 225s - loss: 0.2385 - abs_loss_function: 0.2385 - accuracy: 0.3569 - val_loss: 0.2585 - val_abs_loss_function: 0.2585 - val_accuracy: 0.3256 - 225s/epoch - 824ms/step
Epoch 39/100
273/273 - 227s - loss: 0.2509 - abs_loss_function: 0.2509 - accuracy: 0.3570 - val_loss: 0.2533 - val_abs_loss_function: 0.2533 - val_accuracy: 0.2843 - 227s/epoch - 831ms/step
Epoch 40/100
273/273 - 226s - loss: 0.2372 - abs_loss_function: 0.2372 - accuracy: 0.2875 - val_loss: 0.2459 - val_abs_loss_function: 0.2459 - val_accuracy: 0.2258 - 226s/epoch - 830ms/step
Epoch 41/100
273/273 - 227s - loss: 0.2398 - abs_loss_function: 0.2398 - accuracy: 0.3658 - val_loss: 0.2549 - val_abs_loss_function: 0.2549 - val_accuracy: 0.4254 - 227s/epoch - 830ms/step
Epoch 42/100
273/273 - 225s - loss: 0.2496 - abs_loss_function: 0.2496 - accuracy: 0.3561 - val_loss: 0.2651 - val_abs_loss_function: 0.2651 - val_accuracy: 0.3317 - 225s/epoch - 825ms/step
Epoch 43/100
273/273 - 227s - loss: 0.2448 - abs_loss_function: 0.2448 - accuracy: 0.3167 - val_loss: 0.2353 - val_abs_loss_function: 0.2353 - val_accuracy: 0.4073 - 227s/epoch - 831ms/step
Epoch 44/100
273/273 - 225s - loss: 0.2415 - abs_loss_function: 0.2415 - accuracy: 0.3125 - val_loss: 0.2471 - val_abs_loss_function: 0.2471 - val_accuracy: 0.2863 - 225s/epoch - 826ms/step
Epoch 45/100
273/273 - 226s - loss: 0.2443 - abs_loss_function: 0.2443 - accuracy: 0.3142 - val_loss: 0.2617 - val_abs_loss_function: 0.2617 - val_accuracy: 0.2994 - 226s/epoch - 829ms/step
Epoch 46/100
273/273 - 226s - loss: 0.2421 - abs_loss_function: 0.2421 - accuracy: 0.2877 - val_loss: 0.2366 - val_abs_loss_function: 0.2366 - val_accuracy: 0.3196 - 226s/epoch - 828ms/step
Epoch 47/100
273/273 - 227s - loss: 0.2455 - abs_loss_function: 0.2455 - accuracy: 0.3354 - val_loss: 0.2570 - val_abs_loss_function: 0.2570 - val_accuracy: 0.2944 - 227s/epoch - 831ms/step
Epoch 48/100
273/273 - 224s - loss: 0.2347 - abs_loss_function: 0.2347 - accuracy: 0.3030 - val_loss: 0.2495 - val_abs_loss_function: 0.2495 - val_accuracy: 0.3468 - 224s/epoch - 820ms/step
Epoch 49/100
273/273 - 225s - loss: 0.2406 - abs_loss_function: 0.2406 - accuracy: 0.3235 - val_loss: 0.2405 - val_abs_loss_function: 0.2405 - val_accuracy: 0.3821 - 225s/epoch - 824ms/step
Epoch 50/100
273/273 - 225s - loss: 0.2417 - abs_loss_function: 0.2417 - accuracy: 0.3368 - val_loss: 0.2658 - val_abs_loss_function: 0.2658 - val_accuracy: 0.3054 - 225s/epoch - 824ms/step
Epoch 51/100
273/273 - 227s - loss: 0.2372 - abs_loss_function: 0.2372 - accuracy: 0.2957 - val_loss: 0.2345 - val_abs_loss_function: 0.2345 - val_accuracy: 0.2177 - 227s/epoch - 831ms/step
Epoch 52/100
273/273 - 226s - loss: 0.2423 - abs_loss_function: 0.2423 - accuracy: 0.3455 - val_loss: 0.2539 - val_abs_loss_function: 0.2539 - val_accuracy: 0.3387 - 226s/epoch - 829ms/step
Epoch 53/100
273/273 - 227s - loss: 0.2441 - abs_loss_function: 0.2441 - accuracy: 0.3377 - val_loss: 0.2507 - val_abs_loss_function: 0.2507 - val_accuracy: 0.1875 - 227s/epoch - 830ms/step
Epoch 54/100
273/273 - 226s - loss: 0.2379 - abs_loss_function: 0.2379 - accuracy: 0.3265 - val_loss: 0.2569 - val_abs_loss_function: 0.2569 - val_accuracy: 0.3710 - 226s/epoch - 829ms/step
Epoch 55/100
273/273 - 226s - loss: 0.2391 - abs_loss_function: 0.2391 - accuracy: 0.3106 - val_loss: 0.2481 - val_abs_loss_function: 0.2481 - val_accuracy: 0.3639 - 226s/epoch - 829ms/step
Epoch 56/100
273/273 - 226s - loss: 0.2457 - abs_loss_function: 0.2457 - accuracy: 0.3133 - val_loss: 0.2480 - val_abs_loss_function: 0.2480 - val_accuracy: 0.2631 - 226s/epoch - 829ms/step
Epoch 57/100
273/273 - 226s - loss: 0.2496 - abs_loss_function: 0.2496 - accuracy: 0.3480 - val_loss: 0.2663 - val_abs_loss_function: 0.2663 - val_accuracy: 0.3387 - 226s/epoch - 829ms/step
Epoch 58/100
273/273 - 226s - loss: 0.2370 - abs_loss_function: 0.2370 - accuracy: 0.3363 - val_loss: 0.2360 - val_abs_loss_function: 0.2360 - val_accuracy: 0.3317 - 226s/epoch - 828ms/step
Epoch 59/100
273/273 - 226s - loss: 0.2386 - abs_loss_function: 0.2386 - accuracy: 0.3197 - val_loss: 0.2362 - val_abs_loss_function: 0.2362 - val_accuracy: 0.2833 - 226s/epoch - 827ms/step
Epoch 60/100
273/273 - 227s - loss: 0.2403 - abs_loss_function: 0.2403 - accuracy: 0.2984 - val_loss: 0.2531 - val_abs_loss_function: 0.2531 - val_accuracy: 0.2903 - 227s/epoch - 830ms/step
Epoch 61/100
273/273 - 226s - loss: 0.2418 - abs_loss_function: 0.2418 - accuracy: 0.3425 - val_loss: 0.2276 - val_abs_loss_function: 0.2276 - val_accuracy: 0.4163 - 226s/epoch - 829ms/step
Epoch 62/100
273/273 - 226s - loss: 0.2412 - abs_loss_function: 0.2412 - accuracy: 0.3078 - val_loss: 0.2402 - val_abs_loss_function: 0.2402 - val_accuracy: 0.3115 - 226s/epoch - 827ms/step
Epoch 63/100
273/273 - 225s - loss: 0.2450 - abs_loss_function: 0.2450 - accuracy: 0.3397 - val_loss: 0.2448 - val_abs_loss_function: 0.2448 - val_accuracy: 0.2974 - 225s/epoch - 825ms/step
Epoch 64/100
273/273 - 227s - loss: 0.2381 - abs_loss_function: 0.2381 - accuracy: 0.3568 - val_loss: 0.2446 - val_abs_loss_function: 0.2446 - val_accuracy: 0.3135 - 227s/epoch - 831ms/step
Epoch 65/100
273/273 - 226s - loss: 0.2376 - abs_loss_function: 0.2376 - accuracy: 0.3071 - val_loss: 0.2555 - val_abs_loss_function: 0.2555 - val_accuracy: 0.3458 - 226s/epoch - 828ms/step
Epoch 66/100
273/273 - 225s - loss: 0.2461 - abs_loss_function: 0.2461 - accuracy: 0.3117 - val_loss: 0.2380 - val_abs_loss_function: 0.2380 - val_accuracy: 0.2802 - 225s/epoch - 826ms/step
Epoch 67/100
273/273 - 226s - loss: 0.2425 - abs_loss_function: 0.2425 - accuracy: 0.3143 - val_loss: 0.2693 - val_abs_loss_function: 0.2693 - val_accuracy: 0.3327 - 226s/epoch - 829ms/step
Epoch 68/100
273/273 - 227s - loss: 0.2368 - abs_loss_function: 0.2368 - accuracy: 0.3124 - val_loss: 0.2564 - val_abs_loss_function: 0.2564 - val_accuracy: 0.2621 - 227s/epoch - 831ms/step
Epoch 69/100
273/273 - 227s - loss: 0.2462 - abs_loss_function: 0.2462 - accuracy: 0.3468 - val_loss: 0.2389 - val_abs_loss_function: 0.2389 - val_accuracy: 0.2480 - 227s/epoch - 830ms/step
Epoch 70/100
273/273 - 227s - loss: 0.2411 - abs_loss_function: 0.2411 - accuracy: 0.3289 - val_loss: 0.2610 - val_abs_loss_function: 0.2610 - val_accuracy: 0.4385 - 227s/epoch - 831ms/step
Epoch 71/100
273/273 - 226s - loss: 0.2505 - abs_loss_function: 0.2505 - accuracy: 0.3431 - val_loss: 0.2545 - val_abs_loss_function: 0.2545 - val_accuracy: 0.3538 - 226s/epoch - 827ms/step
Epoch 72/100
273/273 - 226s - loss: 0.2484 - abs_loss_function: 0.2484 - accuracy: 0.3062 - val_loss: 0.2508 - val_abs_loss_function: 0.2508 - val_accuracy: 0.4415 - 226s/epoch - 827ms/step
Epoch 73/100
273/273 - 226s - loss: 0.2478 - abs_loss_function: 0.2478 - accuracy: 0.3099 - val_loss: 0.2637 - val_abs_loss_function: 0.2637 - val_accuracy: 0.3921 - 226s/epoch - 827ms/step
Epoch 74/100
273/273 - 226s - loss: 0.2463 - abs_loss_function: 0.2463 - accuracy: 0.3102 - val_loss: 0.2479 - val_abs_loss_function: 0.2479 - val_accuracy: 0.3669 - 226s/epoch - 827ms/step
Epoch 75/100
273/273 - 225s - loss: 0.2409 - abs_loss_function: 0.2409 - accuracy: 0.3221 - val_loss: 0.2685 - val_abs_loss_function: 0.2685 - val_accuracy: 0.3115 - 225s/epoch - 826ms/step
Epoch 76/100
273/273 - 226s - loss: 0.2372 - abs_loss_function: 0.2372 - accuracy: 0.3432 - val_loss: 0.2817 - val_abs_loss_function: 0.2817 - val_accuracy: 0.4395 - 226s/epoch - 829ms/step
Epoch 77/100
273/273 - 226s - loss: 0.2363 - abs_loss_function: 0.2363 - accuracy: 0.3299 - val_loss: 0.2450 - val_abs_loss_function: 0.2450 - val_accuracy: 0.2843 - 226s/epoch - 828ms/step
Epoch 78/100
273/273 - 225s - loss: 0.2404 - abs_loss_function: 0.2404 - accuracy: 0.3157 - val_loss: 0.2490 - val_abs_loss_function: 0.2490 - val_accuracy: 0.5302 - 225s/epoch - 826ms/step
Epoch 79/100
273/273 - 225s - loss: 0.2408 - abs_loss_function: 0.2408 - accuracy: 0.3035 - val_loss: 0.2150 - val_abs_loss_function: 0.2150 - val_accuracy: 0.2873 - 225s/epoch - 826ms/step
Epoch 80/100
User defined signal 2

------------------------------------------------------------
Sender: LSF System <lsfadmin@hpc.dtu.dk>
Subject: Job 15232351: <s202741-train> in cluster <dcc> Exited

Job <s202741-train> was submitted from host <n-62-20-1> by user <s202741> in cluster <dcc> at Sun Jan 22 12:32:35 2023
Job was executed on host(s) <4*n-62-20-12>, in queue <gpuv100>, as user <s202741> in cluster <dcc> at Mon Jan 23 02:50:38 2023
</zhome/ab/7/153983> was used as the home directory.
</zhome/ab/7/153983/project/scripts> was used as the working directory.
Started at Mon Jan 23 02:50:38 2023
Terminated at Mon Jan 23 07:50:56 2023
Results reported at Mon Jan 23 07:50:56 2023

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#!/bin/bash
### General options
### -- specify queue --   NOTE: TitanX is significantly faster than K80
#BSUB -q gpuv100
#BSUB -gpu "num=1:mode=exclusive_process"
### -- set the job Name --
#BSUB -J s202741-train
### -- ask for number of cores (default: 1) --
#BSUB -n 4
#BSUB -R "span[hosts=1]"
### -- set walltime limit: hh:mm --  maximum 24 hours for GPU-queues right now
#BSUB -W 5:00
# request 5GB of memory
#BSUB -R "rusage[mem=5GB]"
### -- Specify the output and error file. %J is the job-id --
### -- -o and -e mean append, -oo and -eo mean overwrite --
#BSUB -o iter6/Logs/RMSprop_abs_loss_function_0001_model_g_%J.out
# -- end of LSF options --

# Necessary modules
cd ..
source venv/bin/activate

python trainModelIter3.py 100 "RMSprop(learning_rate=0.001)" "abs_loss_function" "black_background_500x500.csv" 2 "RMSprop_abs_loss_function_0001_model_g_" "iter6" "load_model_g"

    
------------------------------------------------------------

TERM_RUNLIMIT: job killed after reaching LSF run time limit.
Exited with exit code 140.

Resource usage summary:

    CPU time :                                   21454.00 sec.
    Max Memory :                                 3053 MB
    Average Memory :                             2934.36 MB
    Total Requested Memory :                     20480.00 MB
    Delta Memory :                               17427.00 MB
    Max Swap :                                   -
    Max Processes :                              4
    Max Threads :                                33
    Run time :                                   18019 sec.
    Turnaround time :                            69501 sec.

The output (if any) is above this job summary.

