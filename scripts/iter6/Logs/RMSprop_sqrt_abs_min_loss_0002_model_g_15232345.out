Loaded dependency [python3/3.10.7]: gcc/11.3.0-binutils-2.38
Loaded module: python3/3.10.7

Loading python3/3.10.7
  Loading requirement: gcc/11.3.0-binutils-2.38
Loaded module: cuda/11.6
Loaded module: cudnn/v8.3.2.44-prod-cuda-11.X
2023-01-23 00:02:44.733429: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2023-01-23 00:02:46.199493: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer.so.7'; dlerror: libnvinfer.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /appl/cudnn/v8.3.2.44-prod-cuda-11.5/lib:/appl/cuda/11.6.0/lib64:/appl/python/3.10.7/lib:/appl/gcc/11.3.0-binutils-2.38/lib64:/appl/gcc/11.3.0-binutils-2.38/lib:/lsf/10.1/linux3.10-glibc2.17-x86_64/lib
2023-01-23 00:02:46.200160: W tensorflow/compiler/xla/stream_executor/platform/default/dso_loader.cc:64] Could not load dynamic library 'libnvinfer_plugin.so.7'; dlerror: libnvinfer_plugin.so.7: cannot open shared object file: No such file or directory; LD_LIBRARY_PATH: /appl/cudnn/v8.3.2.44-prod-cuda-11.5/lib:/appl/cuda/11.6.0/lib64:/appl/python/3.10.7/lib:/appl/gcc/11.3.0-binutils-2.38/lib64:/appl/gcc/11.3.0-binutils-2.38/lib:/lsf/10.1/linux3.10-glibc2.17-x86_64/lib
2023-01-23 00:02:46.200172: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Cannot dlopen some TensorRT libraries. If you would like to use Nvidia GPU with TensorRT, please make sure the missing libraries mentioned above are installed properly.
2023-01-23 00:02:49.334683: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2023-01-23 00:02:50.012722: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1613] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 30961 MB memory:  -> device: 0, name: Tesla V100-SXM2-32GB, pci bus id: 0000:16:00.0, compute capability: 7.0
Epochs:  100
Optimizer:  RMSprop(learning_rate=0.002)
Loss function name:  sqrt_abs_min_loss
Csv file used:  black_background_500x500.csv
Verbose:  2
Unique name:  RMSprop_sqrt_abs_min_loss_0002_model_g_
Output folder:  iter6
Model name:  load_model_g
 
        ################ MODEL ############### 

        inputs = keras.Input(shape=(input_size, input_size, 1))
        x = layers.Conv2D(filters=64, kernel_size=11, activation="relu")(inputs)
        x = layers.Conv2D(filters=64, kernel_size=11, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=5, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=5, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.Conv2D(filters=64, kernel_size=3, activation="relu")(x)
        x = layers.MaxPooling2D(pool_size=2)(x)
        x = layers.Flatten()(x)
        x = layers.Dense(210, activation="relu")(x)
        x = layers.Dense(64, activation="relu")(x)
        x = layers.Dense(16, activation="sigmoid")(x)
        outputs = layers.Dense(3)(x)

        model = keras.Model(inputs=inputs, outputs=outputs)
    
Model: "model"
_________________________________________________________________
 Layer (type)                Output Shape              Param #   
=================================================================
 input_1 (InputLayer)        [(None, 500, 500, 1)]     0         
                                                                 
 conv2d (Conv2D)             (None, 490, 490, 64)      7808      
                                                                 
 conv2d_1 (Conv2D)           (None, 480, 480, 64)      495680    
                                                                 
 max_pooling2d (MaxPooling2D  (None, 240, 240, 64)     0         
 )                                                               
                                                                 
 conv2d_2 (Conv2D)           (None, 236, 236, 64)      102464    
                                                                 
 conv2d_3 (Conv2D)           (None, 232, 232, 64)      102464    
                                                                 
 max_pooling2d_1 (MaxPooling  (None, 116, 116, 64)     0         
 2D)                                                             
                                                                 
 conv2d_4 (Conv2D)           (None, 114, 114, 64)      36928     
                                                                 
 conv2d_5 (Conv2D)           (None, 112, 112, 64)      36928     
                                                                 
 max_pooling2d_2 (MaxPooling  (None, 56, 56, 64)       0         
 2D)                                                             
                                                                 
 conv2d_6 (Conv2D)           (None, 54, 54, 64)        36928     
                                                                 
 conv2d_7 (Conv2D)           (None, 52, 52, 64)        36928     
                                                                 
 max_pooling2d_3 (MaxPooling  (None, 26, 26, 64)       0         
 2D)                                                             
                                                                 
 conv2d_8 (Conv2D)           (None, 24, 24, 64)        36928     
                                                                 
 conv2d_9 (Conv2D)           (None, 22, 22, 64)        36928     
                                                                 
 max_pooling2d_4 (MaxPooling  (None, 11, 11, 64)       0         
 2D)                                                             
                                                                 
 conv2d_10 (Conv2D)          (None, 9, 9, 64)          36928     
                                                                 
 conv2d_11 (Conv2D)          (None, 7, 7, 64)          36928     
                                                                 
 max_pooling2d_5 (MaxPooling  (None, 3, 3, 64)         0         
 2D)                                                             
                                                                 
 flatten (Flatten)           (None, 576)               0         
                                                                 
 dense (Dense)               (None, 210)               121170    
                                                                 
 dense_1 (Dense)             (None, 64)                13504     
                                                                 
 dense_2 (Dense)             (None, 16)                1040      
                                                                 
 dense_3 (Dense)             (None, 3)                 51        
                                                                 
=================================================================
Total params: 1,139,605
Trainable params: 1,139,605
Non-trainable params: 0
_________________________________________________________________
/zhome/ab/7/153983/project/venv/lib/python3.10/site-packages/keras/utils/image_utils.py:409: UserWarning: grayscale is deprecated. Please use color_mode = "grayscale"
  warnings.warn(
Epoch 1/100
2023-01-23 00:02:53.274574: I tensorflow/compiler/xla/stream_executor/cuda/cuda_dnn.cc:428] Loaded cuDNN version 8302
273/273 - 249s - loss: 0.4652 - sqrt_abs_min_loss: 0.4652 - accuracy: 0.2984 - val_loss: 0.4799 - val_sqrt_abs_min_loss: 0.4799 - val_accuracy: 0.2923 - 249s/epoch - 911ms/step
Epoch 2/100
273/273 - 223s - loss: 0.4611 - sqrt_abs_min_loss: 0.4611 - accuracy: 0.3488 - val_loss: 0.4578 - val_sqrt_abs_min_loss: 0.4578 - val_accuracy: 0.3085 - 223s/epoch - 817ms/step
Epoch 3/100
273/273 - 223s - loss: 0.4663 - sqrt_abs_min_loss: 0.4663 - accuracy: 0.3549 - val_loss: 0.4424 - val_sqrt_abs_min_loss: 0.4424 - val_accuracy: 0.2470 - 223s/epoch - 816ms/step
Epoch 4/100
273/273 - 223s - loss: 0.4684 - sqrt_abs_min_loss: 0.4684 - accuracy: 0.3512 - val_loss: 0.4722 - val_sqrt_abs_min_loss: 0.4722 - val_accuracy: 0.2601 - 223s/epoch - 816ms/step
Epoch 5/100
273/273 - 223s - loss: 0.4682 - sqrt_abs_min_loss: 0.4682 - accuracy: 0.3361 - val_loss: 0.4909 - val_sqrt_abs_min_loss: 0.4909 - val_accuracy: 0.2520 - 223s/epoch - 816ms/step
Epoch 6/100
273/273 - 223s - loss: 0.4631 - sqrt_abs_min_loss: 0.4631 - accuracy: 0.3159 - val_loss: 0.4522 - val_sqrt_abs_min_loss: 0.4522 - val_accuracy: 0.3800 - 223s/epoch - 817ms/step
Epoch 7/100
273/273 - 223s - loss: 0.4632 - sqrt_abs_min_loss: 0.4632 - accuracy: 0.3356 - val_loss: 0.4630 - val_sqrt_abs_min_loss: 0.4630 - val_accuracy: 0.3458 - 223s/epoch - 817ms/step
Epoch 8/100
273/273 - 223s - loss: 0.4644 - sqrt_abs_min_loss: 0.4644 - accuracy: 0.3386 - val_loss: 0.4685 - val_sqrt_abs_min_loss: 0.4685 - val_accuracy: 0.2157 - 223s/epoch - 817ms/step
Epoch 9/100
273/273 - 223s - loss: 0.4645 - sqrt_abs_min_loss: 0.4645 - accuracy: 0.3339 - val_loss: 0.4694 - val_sqrt_abs_min_loss: 0.4694 - val_accuracy: 0.1804 - 223s/epoch - 817ms/step
Epoch 10/100
273/273 - 223s - loss: 0.4629 - sqrt_abs_min_loss: 0.4629 - accuracy: 0.3307 - val_loss: 0.4510 - val_sqrt_abs_min_loss: 0.4510 - val_accuracy: 0.2893 - 223s/epoch - 816ms/step
Epoch 11/100
273/273 - 223s - loss: 0.4628 - sqrt_abs_min_loss: 0.4628 - accuracy: 0.3410 - val_loss: 0.4696 - val_sqrt_abs_min_loss: 0.4696 - val_accuracy: 0.2490 - 223s/epoch - 816ms/step
Epoch 12/100
273/273 - 223s - loss: 0.4606 - sqrt_abs_min_loss: 0.4606 - accuracy: 0.3360 - val_loss: 0.4567 - val_sqrt_abs_min_loss: 0.4567 - val_accuracy: 0.2792 - 223s/epoch - 817ms/step
Epoch 13/100
273/273 - 223s - loss: 0.4657 - sqrt_abs_min_loss: 0.4657 - accuracy: 0.3347 - val_loss: 0.4726 - val_sqrt_abs_min_loss: 0.4726 - val_accuracy: 0.2379 - 223s/epoch - 816ms/step
Epoch 14/100
273/273 - 223s - loss: 0.4663 - sqrt_abs_min_loss: 0.4663 - accuracy: 0.3347 - val_loss: 0.4931 - val_sqrt_abs_min_loss: 0.4931 - val_accuracy: 0.3810 - 223s/epoch - 817ms/step
Epoch 15/100
273/273 - 223s - loss: 0.4670 - sqrt_abs_min_loss: 0.4670 - accuracy: 0.3255 - val_loss: 0.4459 - val_sqrt_abs_min_loss: 0.4459 - val_accuracy: 0.2571 - 223s/epoch - 816ms/step
Epoch 16/100
273/273 - 223s - loss: 0.4724 - sqrt_abs_min_loss: 0.4724 - accuracy: 0.2962 - val_loss: 0.4742 - val_sqrt_abs_min_loss: 0.4742 - val_accuracy: 0.3256 - 223s/epoch - 816ms/step
Epoch 17/100
273/273 - 223s - loss: 0.4738 - sqrt_abs_min_loss: 0.4738 - accuracy: 0.3307 - val_loss: 0.4831 - val_sqrt_abs_min_loss: 0.4831 - val_accuracy: 0.2409 - 223s/epoch - 816ms/step
Epoch 18/100
273/273 - 223s - loss: 0.4677 - sqrt_abs_min_loss: 0.4677 - accuracy: 0.2890 - val_loss: 0.4483 - val_sqrt_abs_min_loss: 0.4483 - val_accuracy: 0.3417 - 223s/epoch - 816ms/step
Epoch 19/100
273/273 - 223s - loss: 0.4612 - sqrt_abs_min_loss: 0.4612 - accuracy: 0.3442 - val_loss: 0.4782 - val_sqrt_abs_min_loss: 0.4782 - val_accuracy: 0.2440 - 223s/epoch - 816ms/step
Epoch 20/100
273/273 - 223s - loss: 0.4598 - sqrt_abs_min_loss: 0.4598 - accuracy: 0.3405 - val_loss: 0.4865 - val_sqrt_abs_min_loss: 0.4865 - val_accuracy: 0.3679 - 223s/epoch - 816ms/step
Epoch 21/100
273/273 - 223s - loss: 0.4531 - sqrt_abs_min_loss: 0.4531 - accuracy: 0.2518 - val_loss: 0.4645 - val_sqrt_abs_min_loss: 0.4645 - val_accuracy: 0.2903 - 223s/epoch - 817ms/step
Epoch 22/100
273/273 - 223s - loss: 0.4663 - sqrt_abs_min_loss: 0.4663 - accuracy: 0.3125 - val_loss: 0.4802 - val_sqrt_abs_min_loss: 0.4802 - val_accuracy: 0.4516 - 223s/epoch - 816ms/step
Epoch 23/100
273/273 - 223s - loss: 0.4673 - sqrt_abs_min_loss: 0.4673 - accuracy: 0.3369 - val_loss: 0.4900 - val_sqrt_abs_min_loss: 0.4900 - val_accuracy: 0.3468 - 223s/epoch - 816ms/step
Epoch 24/100
273/273 - 223s - loss: 0.4613 - sqrt_abs_min_loss: 0.4613 - accuracy: 0.2909 - val_loss: 0.4513 - val_sqrt_abs_min_loss: 0.4513 - val_accuracy: 0.1835 - 223s/epoch - 816ms/step
Epoch 25/100
273/273 - 223s - loss: 0.4650 - sqrt_abs_min_loss: 0.4650 - accuracy: 0.3166 - val_loss: 0.4729 - val_sqrt_abs_min_loss: 0.4729 - val_accuracy: 0.3276 - 223s/epoch - 816ms/step
Epoch 26/100
273/273 - 223s - loss: 0.4591 - sqrt_abs_min_loss: 0.4591 - accuracy: 0.3372 - val_loss: 0.4567 - val_sqrt_abs_min_loss: 0.4567 - val_accuracy: 0.3841 - 223s/epoch - 817ms/step
Epoch 27/100
273/273 - 223s - loss: 0.4598 - sqrt_abs_min_loss: 0.4598 - accuracy: 0.2838 - val_loss: 0.4692 - val_sqrt_abs_min_loss: 0.4692 - val_accuracy: 0.2964 - 223s/epoch - 816ms/step
Epoch 28/100
273/273 - 223s - loss: 0.4688 - sqrt_abs_min_loss: 0.4688 - accuracy: 0.3079 - val_loss: 0.4805 - val_sqrt_abs_min_loss: 0.4805 - val_accuracy: 0.3871 - 223s/epoch - 818ms/step
Epoch 29/100
273/273 - 223s - loss: 0.4732 - sqrt_abs_min_loss: 0.4732 - accuracy: 0.3552 - val_loss: 0.4578 - val_sqrt_abs_min_loss: 0.4578 - val_accuracy: 0.4204 - 223s/epoch - 816ms/step
Epoch 30/100
273/273 - 223s - loss: 0.4581 - sqrt_abs_min_loss: 0.4581 - accuracy: 0.3408 - val_loss: 0.4711 - val_sqrt_abs_min_loss: 0.4711 - val_accuracy: 0.2984 - 223s/epoch - 816ms/step
Epoch 31/100
273/273 - 223s - loss: 0.4579 - sqrt_abs_min_loss: 0.4579 - accuracy: 0.3530 - val_loss: 0.4575 - val_sqrt_abs_min_loss: 0.4575 - val_accuracy: 0.4274 - 223s/epoch - 817ms/step
Epoch 32/100
273/273 - 223s - loss: 0.4568 - sqrt_abs_min_loss: 0.4568 - accuracy: 0.3497 - val_loss: 0.4661 - val_sqrt_abs_min_loss: 0.4661 - val_accuracy: 0.3750 - 223s/epoch - 816ms/step
Epoch 33/100
273/273 - 223s - loss: 0.4572 - sqrt_abs_min_loss: 0.4572 - accuracy: 0.3039 - val_loss: 0.4724 - val_sqrt_abs_min_loss: 0.4724 - val_accuracy: 0.1996 - 223s/epoch - 817ms/step
Epoch 34/100
273/273 - 223s - loss: 0.4690 - sqrt_abs_min_loss: 0.4690 - accuracy: 0.3769 - val_loss: 0.4560 - val_sqrt_abs_min_loss: 0.4560 - val_accuracy: 0.4335 - 223s/epoch - 816ms/step
Epoch 35/100
273/273 - 222s - loss: 0.4737 - sqrt_abs_min_loss: 0.4737 - accuracy: 0.3765 - val_loss: 0.4692 - val_sqrt_abs_min_loss: 0.4692 - val_accuracy: 0.3145 - 222s/epoch - 814ms/step
Epoch 36/100
273/273 - 222s - loss: 0.4618 - sqrt_abs_min_loss: 0.4618 - accuracy: 0.3565 - val_loss: 0.4565 - val_sqrt_abs_min_loss: 0.4565 - val_accuracy: 0.2792 - 222s/epoch - 815ms/step
Epoch 37/100
273/273 - 223s - loss: 0.4602 - sqrt_abs_min_loss: 0.4602 - accuracy: 0.3378 - val_loss: 0.4657 - val_sqrt_abs_min_loss: 0.4657 - val_accuracy: 0.3216 - 223s/epoch - 816ms/step
Epoch 38/100
273/273 - 223s - loss: 0.4657 - sqrt_abs_min_loss: 0.4657 - accuracy: 0.3315 - val_loss: 0.4706 - val_sqrt_abs_min_loss: 0.4706 - val_accuracy: 0.3841 - 223s/epoch - 816ms/step
Epoch 39/100
273/273 - 222s - loss: 0.4563 - sqrt_abs_min_loss: 0.4563 - accuracy: 0.3524 - val_loss: 0.4460 - val_sqrt_abs_min_loss: 0.4460 - val_accuracy: 0.1895 - 222s/epoch - 814ms/step
Epoch 40/100
273/273 - 223s - loss: 0.4612 - sqrt_abs_min_loss: 0.4612 - accuracy: 0.2945 - val_loss: 0.4958 - val_sqrt_abs_min_loss: 0.4958 - val_accuracy: 0.3004 - 223s/epoch - 816ms/step
Epoch 41/100
273/273 - 223s - loss: 0.4700 - sqrt_abs_min_loss: 0.4700 - accuracy: 0.3600 - val_loss: 0.4629 - val_sqrt_abs_min_loss: 0.4629 - val_accuracy: 0.3488 - 223s/epoch - 816ms/step
Epoch 42/100
273/273 - 223s - loss: 0.4606 - sqrt_abs_min_loss: 0.4606 - accuracy: 0.2793 - val_loss: 0.4421 - val_sqrt_abs_min_loss: 0.4421 - val_accuracy: 0.1502 - 223s/epoch - 817ms/step
Epoch 43/100
273/273 - 223s - loss: 0.4623 - sqrt_abs_min_loss: 0.4623 - accuracy: 0.3317 - val_loss: 0.4791 - val_sqrt_abs_min_loss: 0.4791 - val_accuracy: 0.5101 - 223s/epoch - 816ms/step
Epoch 44/100
273/273 - 223s - loss: 0.4578 - sqrt_abs_min_loss: 0.4578 - accuracy: 0.3329 - val_loss: 0.4471 - val_sqrt_abs_min_loss: 0.4471 - val_accuracy: 0.3952 - 223s/epoch - 817ms/step
Epoch 45/100
273/273 - 223s - loss: 0.4642 - sqrt_abs_min_loss: 0.4642 - accuracy: 0.3547 - val_loss: 0.4596 - val_sqrt_abs_min_loss: 0.4596 - val_accuracy: 0.1532 - 223s/epoch - 817ms/step
Epoch 46/100
273/273 - 223s - loss: 0.4660 - sqrt_abs_min_loss: 0.4660 - accuracy: 0.3542 - val_loss: 0.4555 - val_sqrt_abs_min_loss: 0.4555 - val_accuracy: 0.2994 - 223s/epoch - 817ms/step
Epoch 47/100
273/273 - 223s - loss: 0.4705 - sqrt_abs_min_loss: 0.4705 - accuracy: 0.3218 - val_loss: 0.4679 - val_sqrt_abs_min_loss: 0.4679 - val_accuracy: 0.3619 - 223s/epoch - 816ms/step
Epoch 48/100
273/273 - 223s - loss: 0.4700 - sqrt_abs_min_loss: 0.4700 - accuracy: 0.4249 - val_loss: 0.4802 - val_sqrt_abs_min_loss: 0.4802 - val_accuracy: 0.3246 - 223s/epoch - 816ms/step
Epoch 49/100
273/273 - 224s - loss: 0.4605 - sqrt_abs_min_loss: 0.4605 - accuracy: 0.3981 - val_loss: 0.4616 - val_sqrt_abs_min_loss: 0.4616 - val_accuracy: 0.2349 - 224s/epoch - 821ms/step
Epoch 50/100
273/273 - 223s - loss: 0.4669 - sqrt_abs_min_loss: 0.4669 - accuracy: 0.3239 - val_loss: 0.4787 - val_sqrt_abs_min_loss: 0.4787 - val_accuracy: 0.3710 - 223s/epoch - 817ms/step
Epoch 51/100
273/273 - 223s - loss: 0.4659 - sqrt_abs_min_loss: 0.4659 - accuracy: 0.3077 - val_loss: 0.4883 - val_sqrt_abs_min_loss: 0.4883 - val_accuracy: 0.5050 - 223s/epoch - 817ms/step
Epoch 52/100
273/273 - 223s - loss: 0.4573 - sqrt_abs_min_loss: 0.4573 - accuracy: 0.3424 - val_loss: 0.4607 - val_sqrt_abs_min_loss: 0.4607 - val_accuracy: 0.4204 - 223s/epoch - 817ms/step
Epoch 53/100
273/273 - 223s - loss: 0.4734 - sqrt_abs_min_loss: 0.4734 - accuracy: 0.3179 - val_loss: 0.4800 - val_sqrt_abs_min_loss: 0.4800 - val_accuracy: 0.3387 - 223s/epoch - 817ms/step
Epoch 54/100
273/273 - 223s - loss: 0.4656 - sqrt_abs_min_loss: 0.4656 - accuracy: 0.3417 - val_loss: 0.4631 - val_sqrt_abs_min_loss: 0.4631 - val_accuracy: 0.4194 - 223s/epoch - 817ms/step
Epoch 55/100
273/273 - 223s - loss: 0.4634 - sqrt_abs_min_loss: 0.4634 - accuracy: 0.2961 - val_loss: 0.4762 - val_sqrt_abs_min_loss: 0.4762 - val_accuracy: 0.3780 - 223s/epoch - 817ms/step
Epoch 56/100
273/273 - 223s - loss: 0.4602 - sqrt_abs_min_loss: 0.4602 - accuracy: 0.3155 - val_loss: 0.4840 - val_sqrt_abs_min_loss: 0.4840 - val_accuracy: 0.2944 - 223s/epoch - 817ms/step
Epoch 57/100
273/273 - 223s - loss: 0.4572 - sqrt_abs_min_loss: 0.4572 - accuracy: 0.3479 - val_loss: 0.4529 - val_sqrt_abs_min_loss: 0.4529 - val_accuracy: 0.2954 - 223s/epoch - 817ms/step
Epoch 58/100
273/273 - 223s - loss: 0.4586 - sqrt_abs_min_loss: 0.4586 - accuracy: 0.3598 - val_loss: 0.4781 - val_sqrt_abs_min_loss: 0.4781 - val_accuracy: 0.3105 - 223s/epoch - 817ms/step
Epoch 59/100
273/273 - 223s - loss: 0.4580 - sqrt_abs_min_loss: 0.4580 - accuracy: 0.3276 - val_loss: 0.4652 - val_sqrt_abs_min_loss: 0.4652 - val_accuracy: 0.3054 - 223s/epoch - 816ms/step
Epoch 60/100
273/273 - 223s - loss: 0.4649 - sqrt_abs_min_loss: 0.4649 - accuracy: 0.3293 - val_loss: 0.4863 - val_sqrt_abs_min_loss: 0.4863 - val_accuracy: 0.4315 - 223s/epoch - 817ms/step
Epoch 61/100
273/273 - 223s - loss: 0.4670 - sqrt_abs_min_loss: 0.4670 - accuracy: 0.3530 - val_loss: 0.4812 - val_sqrt_abs_min_loss: 0.4812 - val_accuracy: 0.3750 - 223s/epoch - 816ms/step
Epoch 62/100
273/273 - 223s - loss: 0.4640 - sqrt_abs_min_loss: 0.4640 - accuracy: 0.3132 - val_loss: 0.4522 - val_sqrt_abs_min_loss: 0.4522 - val_accuracy: 0.1411 - 223s/epoch - 817ms/step
Epoch 63/100
273/273 - 223s - loss: 0.4683 - sqrt_abs_min_loss: 0.4683 - accuracy: 0.3275 - val_loss: 0.4658 - val_sqrt_abs_min_loss: 0.4658 - val_accuracy: 0.2409 - 223s/epoch - 817ms/step
Epoch 64/100
273/273 - 223s - loss: 0.4714 - sqrt_abs_min_loss: 0.4714 - accuracy: 0.3526 - val_loss: 0.4703 - val_sqrt_abs_min_loss: 0.4703 - val_accuracy: 0.2450 - 223s/epoch - 816ms/step
Epoch 65/100
273/273 - 223s - loss: 0.4646 - sqrt_abs_min_loss: 0.4646 - accuracy: 0.3592 - val_loss: 0.4805 - val_sqrt_abs_min_loss: 0.4805 - val_accuracy: 0.3317 - 223s/epoch - 817ms/step
Epoch 66/100
273/273 - 223s - loss: 0.4617 - sqrt_abs_min_loss: 0.4617 - accuracy: 0.3073 - val_loss: 0.4711 - val_sqrt_abs_min_loss: 0.4711 - val_accuracy: 0.3236 - 223s/epoch - 816ms/step
Epoch 67/100
273/273 - 223s - loss: 0.4636 - sqrt_abs_min_loss: 0.4636 - accuracy: 0.3440 - val_loss: 0.4639 - val_sqrt_abs_min_loss: 0.4639 - val_accuracy: 0.3377 - 223s/epoch - 816ms/step
Epoch 68/100
273/273 - 223s - loss: 0.4618 - sqrt_abs_min_loss: 0.4618 - accuracy: 0.3346 - val_loss: 0.4752 - val_sqrt_abs_min_loss: 0.4752 - val_accuracy: 0.4365 - 223s/epoch - 817ms/step
Epoch 69/100
273/273 - 223s - loss: 0.4699 - sqrt_abs_min_loss: 0.4699 - accuracy: 0.3557 - val_loss: 0.4613 - val_sqrt_abs_min_loss: 0.4613 - val_accuracy: 0.2107 - 223s/epoch - 816ms/step
Epoch 70/100
273/273 - 223s - loss: 0.4641 - sqrt_abs_min_loss: 0.4641 - accuracy: 0.3307 - val_loss: 0.4562 - val_sqrt_abs_min_loss: 0.4562 - val_accuracy: 0.2722 - 223s/epoch - 817ms/step
Epoch 71/100
273/273 - 223s - loss: 0.4608 - sqrt_abs_min_loss: 0.4608 - accuracy: 0.3577 - val_loss: 0.4932 - val_sqrt_abs_min_loss: 0.4932 - val_accuracy: 0.2026 - 223s/epoch - 817ms/step
Epoch 72/100
273/273 - 223s - loss: 0.4690 - sqrt_abs_min_loss: 0.4690 - accuracy: 0.3456 - val_loss: 0.4838 - val_sqrt_abs_min_loss: 0.4838 - val_accuracy: 0.3609 - 223s/epoch - 816ms/step
Epoch 73/100
273/273 - 223s - loss: 0.4654 - sqrt_abs_min_loss: 0.4654 - accuracy: 0.3425 - val_loss: 0.4618 - val_sqrt_abs_min_loss: 0.4618 - val_accuracy: 0.3911 - 223s/epoch - 817ms/step
Epoch 74/100
273/273 - 223s - loss: 0.4669 - sqrt_abs_min_loss: 0.4669 - accuracy: 0.3529 - val_loss: 0.4893 - val_sqrt_abs_min_loss: 0.4893 - val_accuracy: 0.2772 - 223s/epoch - 816ms/step
Epoch 75/100
273/273 - 223s - loss: 0.4589 - sqrt_abs_min_loss: 0.4589 - accuracy: 0.2962 - val_loss: 0.4528 - val_sqrt_abs_min_loss: 0.4528 - val_accuracy: 0.1915 - 223s/epoch - 817ms/step
Epoch 76/100
273/273 - 223s - loss: 0.4674 - sqrt_abs_min_loss: 0.4674 - accuracy: 0.3450 - val_loss: 0.4616 - val_sqrt_abs_min_loss: 0.4616 - val_accuracy: 0.2812 - 223s/epoch - 817ms/step
Epoch 77/100
273/273 - 223s - loss: 0.4683 - sqrt_abs_min_loss: 0.4683 - accuracy: 0.3549 - val_loss: 0.4578 - val_sqrt_abs_min_loss: 0.4578 - val_accuracy: 0.3145 - 223s/epoch - 816ms/step
Epoch 78/100
273/273 - 223s - loss: 0.4689 - sqrt_abs_min_loss: 0.4689 - accuracy: 0.3536 - val_loss: 0.5040 - val_sqrt_abs_min_loss: 0.5040 - val_accuracy: 0.2883 - 223s/epoch - 817ms/step
Epoch 79/100
273/273 - 223s - loss: 0.4571 - sqrt_abs_min_loss: 0.4571 - accuracy: 0.3538 - val_loss: 0.4687 - val_sqrt_abs_min_loss: 0.4687 - val_accuracy: 0.2702 - 223s/epoch - 817ms/step
Epoch 80/100
273/273 - 223s - loss: 0.4652 - sqrt_abs_min_loss: 0.4652 - accuracy: 0.3608 - val_loss: 0.4515 - val_sqrt_abs_min_loss: 0.4515 - val_accuracy: 0.4526 - 223s/epoch - 817ms/step
Epoch 81/100
User defined signal 2

------------------------------------------------------------
Sender: LSF System <lsfadmin@hpc.dtu.dk>
Subject: Job 15232345: <s202741-train> in cluster <dcc> Exited

Job <s202741-train> was submitted from host <n-62-20-1> by user <s202741> in cluster <dcc> at Sun Jan 22 12:32:34 2023
Job was executed on host(s) <4*n-62-20-10>, in queue <gpuv100>, as user <s202741> in cluster <dcc> at Mon Jan 23 00:02:41 2023
</zhome/ab/7/153983> was used as the home directory.
</zhome/ab/7/153983/project/scripts> was used as the working directory.
Started at Mon Jan 23 00:02:41 2023
Terminated at Mon Jan 23 05:03:13 2023
Results reported at Mon Jan 23 05:03:13 2023

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input

#!/bin/bash
### General options
### -- specify queue --   NOTE: TitanX is significantly faster than K80
#BSUB -q gpuv100
#BSUB -gpu "num=1:mode=exclusive_process"
### -- set the job Name --
#BSUB -J s202741-train
### -- ask for number of cores (default: 1) --
#BSUB -n 4
#BSUB -R "span[hosts=1]"
### -- set walltime limit: hh:mm --  maximum 24 hours for GPU-queues right now
#BSUB -W 5:00
# request 5GB of memory
#BSUB -R "rusage[mem=5GB]"
### -- Specify the output and error file. %J is the job-id --
### -- -o and -e mean append, -oo and -eo mean overwrite --
#BSUB -o iter6/Logs/RMSprop_sqrt_abs_min_loss_0002_model_g_%J.out
# -- end of LSF options --

# Necessary modules
cd ..
source venv/bin/activate

python trainModelIter3.py 100 "RMSprop(learning_rate=0.002)" "sqrt_abs_min_loss" "black_background_500x500.csv" 2 "RMSprop_sqrt_abs_min_loss_0002_model_g_" "iter6" "load_model_g"

    
------------------------------------------------------------

TERM_RUNLIMIT: job killed after reaching LSF run time limit.
Exited with exit code 140.

Resource usage summary:

    CPU time :                                   20633.00 sec.
    Max Memory :                                 2981 MB
    Average Memory :                             2901.63 MB
    Total Requested Memory :                     20480.00 MB
    Delta Memory :                               17499.00 MB
    Max Swap :                                   -
    Max Processes :                              4
    Max Threads :                                33
    Run time :                                   18032 sec.
    Turnaround time :                            59439 sec.

The output (if any) is above this job summary.

